
ADC_proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005cce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a2  00800060  00005cce  00005d62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800202  00800202  00005f04  2**0
                  ALLOC
  3 .stab         000050e8  00000000  00000000  00005f04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001984  00000000  00000000  0000afec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000c970  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000cb10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000cd02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000f10d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00010493  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0001166c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0001182c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00011b22  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012490  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <__vector_1>
       8:	0c 94 ee 0e 	jmp	0x1ddc	; 0x1ddc <__vector_2>
       c:	0c 94 21 0f 	jmp	0x1e42	; 0x1e42 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	fc e5       	ldi	r31, 0x5C	; 92
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 30       	cpi	r26, 0x02	; 2
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 e0       	ldi	r26, 0x02	; 2
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 31       	cpi	r26, 0x1A	; 26
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 19 2b 	call	0x5632	; 0x5632 <main>
      8a:	0c 94 65 2e 	jmp	0x5cca	; 0x5cca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 25 2e 	jmp	0x5c4a	; 0x5c4a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab ec       	ldi	r26, 0xCB	; 203
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 41 2e 	jmp	0x5c82	; 0x5c82 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 31 2e 	jmp	0x5c62	; 0x5c62 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4d 2e 	jmp	0x5c9a	; 0x5c9a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 31 2e 	jmp	0x5c62	; 0x5c62 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4d 2e 	jmp	0x5c9a	; 0x5c9a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 25 2e 	jmp	0x5c4a	; 0x5c4a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b ec       	ldi	r24, 0xCB	; 203
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 41 2e 	jmp	0x5c82	; 0x5c82 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2d 2e 	jmp	0x5c5a	; 0x5c5a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b ec       	ldi	r22, 0xCB	; 203
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 49 2e 	jmp	0x5c92	; 0x5c92 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 31 2e 	jmp	0x5c62	; 0x5c62 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 4d 2e 	jmp	0x5c9a	; 0x5c9a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 31 2e 	jmp	0x5c62	; 0x5c62 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 4d 2e 	jmp	0x5c9a	; 0x5c9a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 31 2e 	jmp	0x5c62	; 0x5c62 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 4d 2e 	jmp	0x5c9a	; 0x5c9a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 35 2e 	jmp	0x5c6a	; 0x5c6a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 51 2e 	jmp	0x5ca2	; 0x5ca2 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 2d 2e 	jmp	0x5c5a	; 0x5c5a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 49 2e 	jmp	0x5c92	; 0x5c92 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ed 52       	subi	r30, 0x2D	; 45
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_voidInit>:
static u8	ADC_u8BusyFlag 							= IDLE;
static u8 	ADC_u8ChainFlag 						= 0u;
static u8* 	ADC_ChannelArr 							= NULL;

void ADC_voidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
#if ADC_u8Voltage_Ref == AREF
	CLR_BIT(ADMUX,ADMUX_REFS1);
	CLR_BIT(ADMUX,ADMUX_REFS0);
	/*Set AVCC as reference voltage*/
#elif ADC_u8Voltage_Ref == AVCC
	CLR_BIT(ADMUX,ADMUX_REFS1);
     e36:	a7 e2       	ldi	r26, 0x27	; 39
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e2       	ldi	r30, 0x27	; 39
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8f 77       	andi	r24, 0x7F	; 127
     e42:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS0);
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 64       	ori	r24, 0x40	; 64
     e50:	8c 93       	st	X, r24
#endif

	/*Resolution configurations*/
	/*8 bit resolution*/
#if ADC_u8Resolution == _8_BIT
	SET_BIT(ADMUX,ADMUX_ADLAR);
     e52:	a7 e2       	ldi	r26, 0x27	; 39
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	80 62       	ori	r24, 0x20	; 32
     e5e:	8c 93       	st	X, r24
#endif

	/*Conversion Mode*/
	/*Disable Auto trigger mode*/
#if ADC_u8Conv_Mode == Manual
	CLR_BIT(ADCSRA,ADCSRA_ADATE);
     e60:	a6 e2       	ldi	r26, 0x26	; 38
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e6 e2       	ldi	r30, 0x26	; 38
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	8f 7d       	andi	r24, 0xDF	; 223
     e6c:	8c 93       	st	X, r24
#endif

	/*Configure the Prescaler Division Factor*/

	/*Clear Prescaler Bits*/
	ADCSRA &= Prescaler_Bit_Mask;
     e6e:	a6 e2       	ldi	r26, 0x26	; 38
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e6 e2       	ldi	r30, 0x26	; 38
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	88 7f       	andi	r24, 0xF8	; 248
     e7a:	8c 93       	st	X, r24
	ADCSRA |= ADC_u8PrescalerDivisionFactor << Prescaler_Bit_Pos;
     e7c:	a6 e2       	ldi	r26, 0x26	; 38
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e2       	ldi	r30, 0x26	; 38
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	87 60       	ori	r24, 0x07	; 7
     e88:	8c 93       	st	X, r24

	/*Enable the ADC*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     e8a:	a6 e2       	ldi	r26, 0x26	; 38
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e6 e2       	ldi	r30, 0x26	; 38
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	80 68       	ori	r24, 0x80	; 128
     e96:	8c 93       	st	X, r24
}
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <ADC_u8StartConversionSynch>:

u8 ADC_u8StartConversionSynch(u8 Copy_u8Channel , u16* Copy_pu16Result)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	28 97       	sbiw	r28, 0x08	; 8
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	8e 83       	std	Y+6, r24	; 0x06
     eb4:	78 87       	std	Y+8, r23	; 0x08
     eb6:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrState = NO_ERROR;
     eb8:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Counter = 0u;
     eba:	19 82       	std	Y+1, r1	; 0x01
     ebc:	1a 82       	std	Y+2, r1	; 0x02
     ebe:	1b 82       	std	Y+3, r1	; 0x03
     ec0:	1c 82       	std	Y+4, r1	; 0x04

	if(Copy_pu16Result != NULL)
     ec2:	8f 81       	ldd	r24, Y+7	; 0x07
     ec4:	98 85       	ldd	r25, Y+8	; 0x08
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	09 f4       	brne	.+2      	; 0xecc <ADC_u8StartConversionSynch+0x2e>
     eca:	66 c0       	rjmp	.+204    	; 0xf98 <ADC_u8StartConversionSynch+0xfa>
	{
		if(ADC_u8BusyFlag == IDLE)
     ecc:	80 91 06 02 	lds	r24, 0x0206
     ed0:	88 23       	and	r24, r24
     ed2:	09 f0       	breq	.+2      	; 0xed6 <ADC_u8StartConversionSynch+0x38>
     ed4:	5e c0       	rjmp	.+188    	; 0xf92 <ADC_u8StartConversionSynch+0xf4>
		{
			/*ADC is now busy*/
			ADC_u8BusyFlag = BUSY;
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	80 93 06 02 	sts	0x0206, r24

			/*Set ADC Channel*/
			ADMUX &= Channel_Bit_Mask;/*Clear Channel Bits*/
     edc:	a7 e2       	ldi	r26, 0x27	; 39
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e7 e2       	ldi	r30, 0x27	; 39
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	80 7e       	andi	r24, 0xE0	; 224
     ee8:	8c 93       	st	X, r24
			ADMUX |= Copy_u8Channel;
     eea:	a7 e2       	ldi	r26, 0x27	; 39
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e7 e2       	ldi	r30, 0x27	; 39
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	90 81       	ld	r25, Z
     ef4:	8e 81       	ldd	r24, Y+6	; 0x06
     ef6:	89 2b       	or	r24, r25
     ef8:	8c 93       	st	X, r24

			/*Start conversion*/
			SET_BIT(ADCSRA, ADCSRA_ADSC);
     efa:	a6 e2       	ldi	r26, 0x26	; 38
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e6 e2       	ldi	r30, 0x26	; 38
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	80 64       	ori	r24, 0x40	; 64
     f06:	8c 93       	st	X, r24
     f08:	0b c0       	rjmp	.+22     	; 0xf20 <ADC_u8StartConversionSynch+0x82>

			/*Polling with blocking on the conversion complete on condition Timeout has not passed yet*/
			while(((GET_BIT(ADCSRA ,ADCSRA_ADIF)) == 0u) && (Local_u32Counter < ADC_u32TimeOut))
			{
				Local_u32Counter ++;
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	9a 81       	ldd	r25, Y+2	; 0x02
     f0e:	ab 81       	ldd	r26, Y+3	; 0x03
     f10:	bc 81       	ldd	r27, Y+4	; 0x04
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	a1 1d       	adc	r26, r1
     f16:	b1 1d       	adc	r27, r1
     f18:	89 83       	std	Y+1, r24	; 0x01
     f1a:	9a 83       	std	Y+2, r25	; 0x02
     f1c:	ab 83       	std	Y+3, r26	; 0x03
     f1e:	bc 83       	std	Y+4, r27	; 0x04

			/*Start conversion*/
			SET_BIT(ADCSRA, ADCSRA_ADSC);

			/*Polling with blocking on the conversion complete on condition Timeout has not passed yet*/
			while(((GET_BIT(ADCSRA ,ADCSRA_ADIF)) == 0u) && (Local_u32Counter < ADC_u32TimeOut))
     f20:	e6 e2       	ldi	r30, 0x26	; 38
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	82 95       	swap	r24
     f28:	8f 70       	andi	r24, 0x0F	; 15
     f2a:	88 2f       	mov	r24, r24
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	81 70       	andi	r24, 0x01	; 1
     f30:	90 70       	andi	r25, 0x00	; 0
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	61 f4       	brne	.+24     	; 0xf4e <ADC_u8StartConversionSynch+0xb0>
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	9a 81       	ldd	r25, Y+2	; 0x02
     f3a:	ab 81       	ldd	r26, Y+3	; 0x03
     f3c:	bc 81       	ldd	r27, Y+4	; 0x04
     f3e:	80 35       	cpi	r24, 0x50	; 80
     f40:	23 ec       	ldi	r18, 0xC3	; 195
     f42:	92 07       	cpc	r25, r18
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	a2 07       	cpc	r26, r18
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	b2 07       	cpc	r27, r18
     f4c:	f0 f2       	brcs	.-68     	; 0xf0a <ADC_u8StartConversionSynch+0x6c>
			{
				Local_u32Counter ++;
			}

			if(Local_u32Counter == ADC_u32TimeOut)
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	9a 81       	ldd	r25, Y+2	; 0x02
     f52:	ab 81       	ldd	r26, Y+3	; 0x03
     f54:	bc 81       	ldd	r27, Y+4	; 0x04
     f56:	80 35       	cpi	r24, 0x50	; 80
     f58:	23 ec       	ldi	r18, 0xC3	; 195
     f5a:	92 07       	cpc	r25, r18
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	a2 07       	cpc	r26, r18
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	b2 07       	cpc	r27, r18
     f64:	19 f4       	brne	.+6      	; 0xf6c <ADC_u8StartConversionSynch+0xce>
			{
				/*Timeout has passed without the flag being raised*/
				Local_u8ErrState = TIMEOUT_ERR;
     f66:	83 e0       	ldi	r24, 0x03	; 3
     f68:	8d 83       	std	Y+5, r24	; 0x05
     f6a:	10 c0       	rjmp	.+32     	; 0xf8c <ADC_u8StartConversionSynch+0xee>
			}
			else
			{
				/*The flag is raised before Timeout*/
				/*Clear the conversion complete*/
				SET_BIT(ADCSRA ,ADCSRA_ADIF);
     f6c:	a6 e2       	ldi	r26, 0x26	; 38
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e6 e2       	ldi	r30, 0x26	; 38
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	80 61       	ori	r24, 0x10	; 16
     f78:	8c 93       	st	X, r24

				/*Get the conversion result*/
#if ADC_u8Resolution == _8_BIT
				*Copy_pu16Result = ADCH;
     f7a:	e5 e2       	ldi	r30, 0x25	; 37
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	88 2f       	mov	r24, r24
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	ef 81       	ldd	r30, Y+7	; 0x07
     f86:	f8 85       	ldd	r31, Y+8	; 0x08
     f88:	91 83       	std	Z+1, r25	; 0x01
     f8a:	80 83       	st	Z, r24
#error 		Wrong Resolution configration option
#endif
			}

			/*ADC is now IDLE*/
			ADC_u8BusyFlag = IDLE;
     f8c:	10 92 06 02 	sts	0x0206, r1
     f90:	05 c0       	rjmp	.+10     	; 0xf9c <ADC_u8StartConversionSynch+0xfe>

		}
		else
		{
			Local_u8ErrState = BUSY_ERR;
     f92:	84 e0       	ldi	r24, 0x04	; 4
     f94:	8d 83       	std	Y+5, r24	; 0x05
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <ADC_u8StartConversionSynch+0xfe>
		}

	}
	else
	{
		Local_u8ErrState = NULL_PTR_ERR;
     f98:	82 e0       	ldi	r24, 0x02	; 2
     f9a:	8d 83       	std	Y+5, r24	; 0x05
	}

	return Local_u8ErrState;
     f9c:	8d 81       	ldd	r24, Y+5	; 0x05
}
     f9e:	28 96       	adiw	r28, 0x08	; 8
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	cd bf       	out	0x3d, r28	; 61
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <ADC_u8StartConversionAsynch>:

u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel , u16* Copy_pu16Result , void(*Copy_pvNotificationFunc)(void))
{
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <ADC_u8StartConversionAsynch+0x6>
     fb6:	00 d0       	rcall	.+0      	; 0xfb8 <ADC_u8StartConversionAsynch+0x8>
     fb8:	00 d0       	rcall	.+0      	; 0xfba <ADC_u8StartConversionAsynch+0xa>
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	8a 83       	std	Y+2, r24	; 0x02
     fc0:	7c 83       	std	Y+4, r23	; 0x04
     fc2:	6b 83       	std	Y+3, r22	; 0x03
     fc4:	5e 83       	std	Y+6, r21	; 0x06
     fc6:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrState = NO_ERROR;
     fc8:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_pu16Result != NULL) && (Copy_pvNotificationFunc != NULL))
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	9c 81       	ldd	r25, Y+4	; 0x04
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	c1 f1       	breq	.+112    	; 0x1042 <ADC_u8StartConversionAsynch+0x92>
     fd2:	8d 81       	ldd	r24, Y+5	; 0x05
     fd4:	9e 81       	ldd	r25, Y+6	; 0x06
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	a1 f1       	breq	.+104    	; 0x1042 <ADC_u8StartConversionAsynch+0x92>
	{
		if(ADC_u8BusyFlag == IDLE)
     fda:	80 91 06 02 	lds	r24, 0x0206
     fde:	88 23       	and	r24, r24
     fe0:	69 f5       	brne	.+90     	; 0x103c <ADC_u8StartConversionAsynch+0x8c>
		{
			/*ADC is now busy*/
			ADC_u8BusyFlag = BUSY;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	80 93 06 02 	sts	0x0206, r24

			/*Convert the Local ADC Result into Global*/
			ADC_u16Result = Copy_pu16Result;
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	9c 81       	ldd	r25, Y+4	; 0x04
     fec:	90 93 05 02 	sts	0x0205, r25
     ff0:	80 93 04 02 	sts	0x0204, r24

			/*Convert the Local ADC Call Back into Global*/
			ADC_pvCallBackNotificationFunc = Copy_pvNotificationFunc;
     ff4:	8d 81       	ldd	r24, Y+5	; 0x05
     ff6:	9e 81       	ldd	r25, Y+6	; 0x06
     ff8:	90 93 03 02 	sts	0x0203, r25
     ffc:	80 93 02 02 	sts	0x0202, r24

			/*Set ADC Channel*/
			ADMUX &= Channel_Bit_Mask;/*Clear Channel Bits*/
    1000:	a7 e2       	ldi	r26, 0x27	; 39
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e7 e2       	ldi	r30, 0x27	; 39
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	80 7e       	andi	r24, 0xE0	; 224
    100c:	8c 93       	st	X, r24
			ADMUX |= Copy_u8Channel;
    100e:	a7 e2       	ldi	r26, 0x27	; 39
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e7 e2       	ldi	r30, 0x27	; 39
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	90 81       	ld	r25, Z
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	89 2b       	or	r24, r25
    101c:	8c 93       	st	X, r24

			/*Start conversion*/
			SET_BIT(ADCSRA, ADCSRA_ADSC);
    101e:	a6 e2       	ldi	r26, 0x26	; 38
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e6 e2       	ldi	r30, 0x26	; 38
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	80 64       	ori	r24, 0x40	; 64
    102a:	8c 93       	st	X, r24

			/*Enable the ADC Conversion Complete interrupt "Requires Global interrupt to be on"*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
    102c:	a6 e2       	ldi	r26, 0x26	; 38
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e6 e2       	ldi	r30, 0x26	; 38
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	88 60       	ori	r24, 0x08	; 8
    1038:	8c 93       	st	X, r24
    103a:	05 c0       	rjmp	.+10     	; 0x1046 <ADC_u8StartConversionAsynch+0x96>
		}
		else
		{
			Local_u8ErrState = BUSY_ERR;
    103c:	84 e0       	ldi	r24, 0x04	; 4
    103e:	89 83       	std	Y+1, r24	; 0x01
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <ADC_u8StartConversionAsynch+0x96>
		}
	}
	else
	{
		Local_u8ErrState = NULL_PTR_ERR;
    1042:	82 e0       	ldi	r24, 0x02	; 2
    1044:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrState;
    1046:	89 81       	ldd	r24, Y+1	; 0x01
}
    1048:	26 96       	adiw	r28, 0x06	; 6
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	de bf       	out	0x3e, r29	; 62
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	cd bf       	out	0x3d, r28	; 61
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <ADC_u8StartChainConvAsynch>:

u8 ADC_u8StartChainConvAsynch(u8 Copy_u8NumOfChannels , u8* Copy_u8Channels , u16* Copy_pu16Results , void(*Copy_pvNotificationFunc)(void))
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	28 97       	sbiw	r28, 0x08	; 8
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	f8 94       	cli
    1068:	de bf       	out	0x3e, r29	; 62
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	cd bf       	out	0x3d, r28	; 61
    106e:	8a 83       	std	Y+2, r24	; 0x02
    1070:	7c 83       	std	Y+4, r23	; 0x04
    1072:	6b 83       	std	Y+3, r22	; 0x03
    1074:	5e 83       	std	Y+6, r21	; 0x06
    1076:	4d 83       	std	Y+5, r20	; 0x05
    1078:	38 87       	std	Y+8, r19	; 0x08
    107a:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8ErrState = NO_ERROR;
    107c:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_pu16Results != NULL) && (Copy_pvNotificationFunc != NULL) && (Copy_u8Channels != NULL))
    107e:	8d 81       	ldd	r24, Y+5	; 0x05
    1080:	9e 81       	ldd	r25, Y+6	; 0x06
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	41 f1       	breq	.+80     	; 0x10d6 <ADC_u8StartChainConvAsynch+0x7c>
    1086:	8f 81       	ldd	r24, Y+7	; 0x07
    1088:	98 85       	ldd	r25, Y+8	; 0x08
    108a:	00 97       	sbiw	r24, 0x00	; 0
    108c:	21 f1       	breq	.+72     	; 0x10d6 <ADC_u8StartChainConvAsynch+0x7c>
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	9c 81       	ldd	r25, Y+4	; 0x04
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	01 f1       	breq	.+64     	; 0x10d6 <ADC_u8StartChainConvAsynch+0x7c>
	{
		if(ADC_u8BusyFlag == IDLE)
    1096:	80 91 06 02 	lds	r24, 0x0206
    109a:	88 23       	and	r24, r24
    109c:	c9 f4       	brne	.+50     	; 0x10d0 <ADC_u8StartChainConvAsynch+0x76>
		{
			/*ADC is now busy*/
			ADC_u8BusyFlag = BUSY;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	80 93 06 02 	sts	0x0206, r24

			/*Convert the Local ADC Number into Global*/
			ADC_u8ChainFlag = Copy_u8NumOfChannels;
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	80 93 07 02 	sts	0x0207, r24

			/*Convert the Local ADC Channel Array into Global*/
			ADC_ChannelArr = Copy_u8Channels;
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	9c 81       	ldd	r25, Y+4	; 0x04
    10ae:	90 93 09 02 	sts	0x0209, r25
    10b2:	80 93 08 02 	sts	0x0208, r24

			/*ADC is now IDLE*/
			ADC_u8BusyFlag = IDLE;
    10b6:	10 92 06 02 	sts	0x0206, r1

			/*Start the conversion*/
			ADC_u8StartConversionAsynch(*Copy_u8Channels , Copy_pu16Results , Copy_pvNotificationFunc);
    10ba:	eb 81       	ldd	r30, Y+3	; 0x03
    10bc:	fc 81       	ldd	r31, Y+4	; 0x04
    10be:	80 81       	ld	r24, Z
    10c0:	2d 81       	ldd	r18, Y+5	; 0x05
    10c2:	3e 81       	ldd	r19, Y+6	; 0x06
    10c4:	4f 81       	ldd	r20, Y+7	; 0x07
    10c6:	58 85       	ldd	r21, Y+8	; 0x08
    10c8:	b9 01       	movw	r22, r18
    10ca:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <ADC_u8StartConversionAsynch>
    10ce:	05 c0       	rjmp	.+10     	; 0x10da <ADC_u8StartChainConvAsynch+0x80>
		}
		else
		{
			Local_u8ErrState = BUSY_ERR;
    10d0:	84 e0       	ldi	r24, 0x04	; 4
    10d2:	89 83       	std	Y+1, r24	; 0x01
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <ADC_u8StartChainConvAsynch+0x80>
		}
	}
	else
	{
		Local_u8ErrState = NULL_PTR_ERR;
    10d6:	82 e0       	ldi	r24, 0x02	; 2
    10d8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrState;
    10da:	89 81       	ldd	r24, Y+1	; 0x01
}
    10dc:	28 96       	adiw	r28, 0x08	; 8
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	cd bf       	out	0x3d, r28	; 61
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <__vector_16>:

__attribute__((signal)) void __vector_16 (void);
void __vector_16 (void)
{
    10ee:	1f 92       	push	r1
    10f0:	0f 92       	push	r0
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	0f 92       	push	r0
    10f6:	11 24       	eor	r1, r1
    10f8:	2f 93       	push	r18
    10fa:	3f 93       	push	r19
    10fc:	4f 93       	push	r20
    10fe:	5f 93       	push	r21
    1100:	6f 93       	push	r22
    1102:	7f 93       	push	r23
    1104:	8f 93       	push	r24
    1106:	9f 93       	push	r25
    1108:	af 93       	push	r26
    110a:	bf 93       	push	r27
    110c:	ef 93       	push	r30
    110e:	ff 93       	push	r31
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
	/*Read Result*/
#if ADC_u8Resolution == _8_BIT
	*ADC_u16Result = ADCH;
    1118:	a0 91 04 02 	lds	r26, 0x0204
    111c:	b0 91 05 02 	lds	r27, 0x0205
    1120:	e5 e2       	ldi	r30, 0x25	; 37
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	88 2f       	mov	r24, r24
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	8d 93       	st	X+, r24
    112c:	9c 93       	st	X, r25
#else
#error 		Wrong Resolution configration option
#endif

	/*Disable Conversion Complete interrupt*/
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
    112e:	a6 e2       	ldi	r26, 0x26	; 38
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e6 e2       	ldi	r30, 0x26	; 38
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	87 7f       	andi	r24, 0xF7	; 247
    113a:	8c 93       	st	X, r24

	/*ADC is now IDLE*/
	ADC_u8BusyFlag = IDLE;
    113c:	10 92 06 02 	sts	0x0206, r1

	/*Chain loop*/
	if(ADC_u8ChainFlag > 1)
    1140:	80 91 07 02 	lds	r24, 0x0207
    1144:	82 30       	cpi	r24, 0x02	; 2
    1146:	40 f1       	brcs	.+80     	; 0x1198 <__vector_16+0xaa>
	{
		ADC_u8ChainFlag --;
    1148:	80 91 07 02 	lds	r24, 0x0207
    114c:	81 50       	subi	r24, 0x01	; 1
    114e:	80 93 07 02 	sts	0x0207, r24
		ADC_u16Result ++;
    1152:	80 91 04 02 	lds	r24, 0x0204
    1156:	90 91 05 02 	lds	r25, 0x0205
    115a:	02 96       	adiw	r24, 0x02	; 2
    115c:	90 93 05 02 	sts	0x0205, r25
    1160:	80 93 04 02 	sts	0x0204, r24
		ADC_ChannelArr ++;
    1164:	80 91 08 02 	lds	r24, 0x0208
    1168:	90 91 09 02 	lds	r25, 0x0209
    116c:	01 96       	adiw	r24, 0x01	; 1
    116e:	90 93 09 02 	sts	0x0209, r25
    1172:	80 93 08 02 	sts	0x0208, r24
		ADC_u8StartConversionAsynch(*ADC_ChannelArr , ADC_u16Result , ADC_pvCallBackNotificationFunc);
    1176:	e0 91 08 02 	lds	r30, 0x0208
    117a:	f0 91 09 02 	lds	r31, 0x0209
    117e:	80 81       	ld	r24, Z
    1180:	20 91 04 02 	lds	r18, 0x0204
    1184:	30 91 05 02 	lds	r19, 0x0205
    1188:	40 91 02 02 	lds	r20, 0x0202
    118c:	50 91 03 02 	lds	r21, 0x0203
    1190:	b9 01       	movw	r22, r18
    1192:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <ADC_u8StartConversionAsynch>
    1196:	0b c0       	rjmp	.+22     	; 0x11ae <__vector_16+0xc0>
	}
	else
	{
		/*Invoke the call back notification function*/
		if(ADC_pvCallBackNotificationFunc != NULL)
    1198:	80 91 02 02 	lds	r24, 0x0202
    119c:	90 91 03 02 	lds	r25, 0x0203
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	29 f0       	breq	.+10     	; 0x11ae <__vector_16+0xc0>
		{
			ADC_pvCallBackNotificationFunc();
    11a4:	e0 91 02 02 	lds	r30, 0x0202
    11a8:	f0 91 03 02 	lds	r31, 0x0203
    11ac:	09 95       	icall
		else
		{
			/*Do nothing*/
		}
	}
}
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	ff 91       	pop	r31
    11b4:	ef 91       	pop	r30
    11b6:	bf 91       	pop	r27
    11b8:	af 91       	pop	r26
    11ba:	9f 91       	pop	r25
    11bc:	8f 91       	pop	r24
    11be:	7f 91       	pop	r23
    11c0:	6f 91       	pop	r22
    11c2:	5f 91       	pop	r21
    11c4:	4f 91       	pop	r20
    11c6:	3f 91       	pop	r19
    11c8:	2f 91       	pop	r18
    11ca:	0f 90       	pop	r0
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	0f 90       	pop	r0
    11d0:	1f 90       	pop	r1
    11d2:	18 95       	reti

000011d4 <BUZZER_voidInit>:
/***************     LED_interface  *****************************/
/***************************************************************/
#include "BUZZER_interface.h"
#include "DIO_interface.h"

void BUZZER_voidInit(BUZZER_T buzzer) {
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	00 d0       	rcall	.+0      	; 0x11da <BUZZER_voidInit+0x6>
    11da:	0f 92       	push	r0
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	69 83       	std	Y+1, r22	; 0x01
    11e2:	7a 83       	std	Y+2, r23	; 0x02
    11e4:	8b 83       	std	Y+3, r24	; 0x03
	
	DIO_u8_SetPinDirection(buzzer.port, buzzer.pin, DIO_u8PIN_OUTPUT);
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ea:	69 2f       	mov	r22, r25
    11ec:	41 e0       	ldi	r20, 0x01	; 1
    11ee:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8_SetPinDirection>
	
	if (buzzer.Active_State == BUZZER_ACTIVE_HIGH) {
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	39 f4       	brne	.+14     	; 0x1206 <BUZZER_voidInit+0x32>
		DIO_u8_SetPinValue(buzzer.port, buzzer.pin, DIO_u8PIN_LOW);  
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	9a 81       	ldd	r25, Y+2	; 0x02
    11fc:	69 2f       	mov	r22, r25
    11fe:	40 e0       	ldi	r20, 0x00	; 0
    1200:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    1204:	06 c0       	rjmp	.+12     	; 0x1212 <BUZZER_voidInit+0x3e>
		} else {
		DIO_u8_SetPinValue(buzzer.port, buzzer.pin, DIO_u8PIN_HIGH); 
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	9a 81       	ldd	r25, Y+2	; 0x02
    120a:	69 2f       	mov	r22, r25
    120c:	41 e0       	ldi	r20, 0x01	; 1
    120e:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
	}
}
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <BUZZER_voidOn>:

void BUZZER_voidOn(BUZZER_T buzzer) {
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	00 d0       	rcall	.+0      	; 0x1224 <BUZZER_voidOn+0x6>
    1224:	0f 92       	push	r0
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	69 83       	std	Y+1, r22	; 0x01
    122c:	7a 83       	std	Y+2, r23	; 0x02
    122e:	8b 83       	std	Y+3, r24	; 0x03
	if (buzzer.Active_State == BUZZER_ACTIVE_HIGH) {
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	39 f4       	brne	.+14     	; 0x1244 <BUZZER_voidOn+0x26>
		DIO_u8_SetPinValue(buzzer.port, buzzer.pin, DIO_u8PIN_HIGH); 
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	9a 81       	ldd	r25, Y+2	; 0x02
    123a:	69 2f       	mov	r22, r25
    123c:	41 e0       	ldi	r20, 0x01	; 1
    123e:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    1242:	06 c0       	rjmp	.+12     	; 0x1250 <BUZZER_voidOn+0x32>
		} else {
		DIO_u8_SetPinValue(buzzer.port, buzzer.pin, DIO_u8PIN_LOW); 
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	9a 81       	ldd	r25, Y+2	; 0x02
    1248:	69 2f       	mov	r22, r25
    124a:	40 e0       	ldi	r20, 0x00	; 0
    124c:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
	}
}
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	08 95       	ret

0000125c <BUZZER_voidOff>:

void BUZZER_voidOff(BUZZER_T buzzer) {
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	00 d0       	rcall	.+0      	; 0x1262 <BUZZER_voidOff+0x6>
    1262:	0f 92       	push	r0
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	69 83       	std	Y+1, r22	; 0x01
    126a:	7a 83       	std	Y+2, r23	; 0x02
    126c:	8b 83       	std	Y+3, r24	; 0x03
	if (buzzer.Active_State == BUZZER_ACTIVE_HIGH) {
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	39 f4       	brne	.+14     	; 0x1282 <BUZZER_voidOff+0x26>
		DIO_u8_SetPinValue(buzzer.port, buzzer.pin, DIO_u8PIN_LOW); 
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	9a 81       	ldd	r25, Y+2	; 0x02
    1278:	69 2f       	mov	r22, r25
    127a:	40 e0       	ldi	r20, 0x00	; 0
    127c:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    1280:	06 c0       	rjmp	.+12     	; 0x128e <BUZZER_voidOff+0x32>
		} else {
		DIO_u8_SetPinValue(buzzer.port, buzzer.pin, DIO_u8PIN_HIGH); 
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	9a 81       	ldd	r25, Y+2	; 0x02
    1286:	69 2f       	mov	r22, r25
    1288:	41 e0       	ldi	r20, 0x01	; 1
    128a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
	}
}
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	08 95       	ret

0000129a <BUZZER_voidToggle>:

void BUZZER_voidToggle(BUZZER_T buzzer) {
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	2a 97       	sbiw	r28, 0x0a	; 10
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	6a 83       	std	Y+2, r22	; 0x02
    12b0:	7b 83       	std	Y+3, r23	; 0x03
    12b2:	8c 83       	std	Y+4, r24	; 0x04
	 u8 pinValue;
	 DIO_u8_GetPinValue(buzzer.port, buzzer.pin, &pinValue);
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	9b 81       	ldd	r25, Y+3	; 0x03
    12b8:	69 2f       	mov	r22, r25
    12ba:	9e 01       	movw	r18, r28
    12bc:	2f 5f       	subi	r18, 0xFF	; 255
    12be:	3f 4f       	sbci	r19, 0xFF	; 255
    12c0:	a9 01       	movw	r20, r18
    12c2:	0e 94 42 0c 	call	0x1884	; 0x1884 <DIO_u8_GetPinValue>

	 if (buzzer.Active_State == BUZZER_ACTIVE_HIGH) {
    12c6:	8c 81       	ldd	r24, Y+4	; 0x04
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	81 f4       	brne	.+32     	; 0x12ec <BUZZER_voidToggle+0x52>
		 
		 DIO_u8_SetPinValue(buzzer.port, buzzer.pin, pinValue == DIO_u8PIN_HIGH ? DIO_u8PIN_LOW : DIO_u8PIN_HIGH);
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	8a 87       	std	Y+10, r24	; 0x0a
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	89 87       	std	Y+9, r24	; 0x09
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	18 86       	std	Y+8, r1	; 0x08
    12d8:	81 30       	cpi	r24, 0x01	; 1
    12da:	11 f0       	breq	.+4      	; 0x12e0 <BUZZER_voidToggle+0x46>
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	88 87       	std	Y+8, r24	; 0x08
    12e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    12e2:	69 85       	ldd	r22, Y+9	; 0x09
    12e4:	48 85       	ldd	r20, Y+8	; 0x08
    12e6:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    12ea:	0f c0       	rjmp	.+30     	; 0x130a <BUZZER_voidToggle+0x70>
		 } else {
		
		 DIO_u8_SetPinValue(buzzer.port, buzzer.pin, pinValue == DIO_u8PIN_LOW ? DIO_u8PIN_HIGH : DIO_u8PIN_LOW);
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	8f 83       	std	Y+7, r24	; 0x07
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	8e 83       	std	Y+6, r24	; 0x06
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	1d 82       	std	Y+5, r1	; 0x05
    12f8:	88 23       	and	r24, r24
    12fa:	11 f4       	brne	.+4      	; 0x1300 <BUZZER_voidToggle+0x66>
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	8d 83       	std	Y+5, r24	; 0x05
    1300:	8f 81       	ldd	r24, Y+7	; 0x07
    1302:	6e 81       	ldd	r22, Y+6	; 0x06
    1304:	4d 81       	ldd	r20, Y+5	; 0x05
    1306:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
	 }
 }
    130a:	2a 96       	adiw	r28, 0x0a	; 10
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <DIO_u8_SetPinDirection>:
#include "STD_types.h"
#include "BIT_math.h"
#include "DIO_interface.h"
#include "DIO_Register.h"

u8 DIO_u8_SetPinDirection(u8 copy_u8Port,u8 copy_u8Pin,u8 copy_u8Direction){
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	28 97       	sbiw	r28, 0x08	; 8
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
    1330:	8a 83       	std	Y+2, r24	; 0x02
    1332:	6b 83       	std	Y+3, r22	; 0x03
    1334:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
    1336:	19 82       	std	Y+1, r1	; 0x01
	
	if ((copy_u8Pin <= DIO_u8PIN7) && (copy_u8Pin >= DIO_u8PIN0))
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	88 30       	cpi	r24, 0x08	; 8
    133c:	08 f0       	brcs	.+2      	; 0x1340 <DIO_u8_SetPinDirection+0x24>
    133e:	f4 c0       	rjmp	.+488    	; 0x1528 <DIO_u8_SetPinDirection+0x20c>
	{
		if (copy_u8Direction == DIO_u8PIN_INPUT)
    1340:	8c 81       	ldd	r24, Y+4	; 0x04
    1342:	88 23       	and	r24, r24
    1344:	09 f0       	breq	.+2      	; 0x1348 <DIO_u8_SetPinDirection+0x2c>
    1346:	77 c0       	rjmp	.+238    	; 0x1436 <DIO_u8_SetPinDirection+0x11a>
		{
			switch (copy_u8Port)
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	38 87       	std	Y+8, r19	; 0x08
    1350:	2f 83       	std	Y+7, r18	; 0x07
    1352:	8f 81       	ldd	r24, Y+7	; 0x07
    1354:	98 85       	ldd	r25, Y+8	; 0x08
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	91 05       	cpc	r25, r1
    135a:	59 f1       	breq	.+86     	; 0x13b2 <DIO_u8_SetPinDirection+0x96>
    135c:	2f 81       	ldd	r18, Y+7	; 0x07
    135e:	38 85       	ldd	r19, Y+8	; 0x08
    1360:	22 30       	cpi	r18, 0x02	; 2
    1362:	31 05       	cpc	r19, r1
    1364:	2c f4       	brge	.+10     	; 0x1370 <DIO_u8_SetPinDirection+0x54>
    1366:	8f 81       	ldd	r24, Y+7	; 0x07
    1368:	98 85       	ldd	r25, Y+8	; 0x08
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	69 f0       	breq	.+26     	; 0x1388 <DIO_u8_SetPinDirection+0x6c>
    136e:	60 c0       	rjmp	.+192    	; 0x1430 <DIO_u8_SetPinDirection+0x114>
    1370:	2f 81       	ldd	r18, Y+7	; 0x07
    1372:	38 85       	ldd	r19, Y+8	; 0x08
    1374:	22 30       	cpi	r18, 0x02	; 2
    1376:	31 05       	cpc	r19, r1
    1378:	89 f1       	breq	.+98     	; 0x13dc <DIO_u8_SetPinDirection+0xc0>
    137a:	8f 81       	ldd	r24, Y+7	; 0x07
    137c:	98 85       	ldd	r25, Y+8	; 0x08
    137e:	83 30       	cpi	r24, 0x03	; 3
    1380:	91 05       	cpc	r25, r1
    1382:	09 f4       	brne	.+2      	; 0x1386 <DIO_u8_SetPinDirection+0x6a>
    1384:	40 c0       	rjmp	.+128    	; 0x1406 <DIO_u8_SetPinDirection+0xea>
    1386:	54 c0       	rjmp	.+168    	; 0x1430 <DIO_u8_SetPinDirection+0x114>
			{
				case DIO_u8PORTA:
				CLR_BIT(DDRA, copy_u8Pin);
    1388:	aa e3       	ldi	r26, 0x3A	; 58
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	ea e3       	ldi	r30, 0x3A	; 58
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	48 2f       	mov	r20, r24
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	02 2e       	mov	r0, r18
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <DIO_u8_SetPinDirection+0x8a>
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	0a 94       	dec	r0
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <DIO_u8_SetPinDirection+0x86>
    13aa:	80 95       	com	r24
    13ac:	84 23       	and	r24, r20
    13ae:	8c 93       	st	X, r24
    13b0:	bd c0       	rjmp	.+378    	; 0x152c <DIO_u8_SetPinDirection+0x210>
				break;
				case DIO_u8PORTB:
				CLR_BIT(DDRB, copy_u8Pin);
    13b2:	a7 e3       	ldi	r26, 0x37	; 55
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e7 e3       	ldi	r30, 0x37	; 55
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	48 2f       	mov	r20, r24
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	02 2e       	mov	r0, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <DIO_u8_SetPinDirection+0xb4>
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	0a 94       	dec	r0
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <DIO_u8_SetPinDirection+0xb0>
    13d4:	80 95       	com	r24
    13d6:	84 23       	and	r24, r20
    13d8:	8c 93       	st	X, r24
    13da:	a8 c0       	rjmp	.+336    	; 0x152c <DIO_u8_SetPinDirection+0x210>
				break;
				case DIO_u8PORTC:
				CLR_BIT(DDRC, copy_u8Pin);
    13dc:	a4 e3       	ldi	r26, 0x34	; 52
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e4 e3       	ldi	r30, 0x34	; 52
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	48 2f       	mov	r20, r24
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	02 2e       	mov	r0, r18
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <DIO_u8_SetPinDirection+0xde>
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	0a 94       	dec	r0
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <DIO_u8_SetPinDirection+0xda>
    13fe:	80 95       	com	r24
    1400:	84 23       	and	r24, r20
    1402:	8c 93       	st	X, r24
    1404:	93 c0       	rjmp	.+294    	; 0x152c <DIO_u8_SetPinDirection+0x210>
				break;
				case DIO_u8PORTD:
				CLR_BIT(DDRD, copy_u8Pin);
    1406:	a1 e3       	ldi	r26, 0x31	; 49
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e1 e3       	ldi	r30, 0x31	; 49
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	48 2f       	mov	r20, r24
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	02 2e       	mov	r0, r18
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <DIO_u8_SetPinDirection+0x108>
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	0a 94       	dec	r0
    1426:	e2 f7       	brpl	.-8      	; 0x1420 <DIO_u8_SetPinDirection+0x104>
    1428:	80 95       	com	r24
    142a:	84 23       	and	r24, r20
    142c:	8c 93       	st	X, r24
    142e:	7e c0       	rjmp	.+252    	; 0x152c <DIO_u8_SetPinDirection+0x210>
				break;
				default:
				Local_u8ErrorState = 1;
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	7b c0       	rjmp	.+246    	; 0x152c <DIO_u8_SetPinDirection+0x210>
			}
		}
		else if (copy_u8Direction == DIO_u8PIN_OUTPUT)
    1436:	8c 81       	ldd	r24, Y+4	; 0x04
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	09 f0       	breq	.+2      	; 0x143e <DIO_u8_SetPinDirection+0x122>
    143c:	72 c0       	rjmp	.+228    	; 0x1522 <DIO_u8_SetPinDirection+0x206>
		{
			switch (copy_u8Port)
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	3e 83       	std	Y+6, r19	; 0x06
    1446:	2d 83       	std	Y+5, r18	; 0x05
    1448:	8d 81       	ldd	r24, Y+5	; 0x05
    144a:	9e 81       	ldd	r25, Y+6	; 0x06
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	91 05       	cpc	r25, r1
    1450:	49 f1       	breq	.+82     	; 0x14a4 <DIO_u8_SetPinDirection+0x188>
    1452:	2d 81       	ldd	r18, Y+5	; 0x05
    1454:	3e 81       	ldd	r19, Y+6	; 0x06
    1456:	22 30       	cpi	r18, 0x02	; 2
    1458:	31 05       	cpc	r19, r1
    145a:	2c f4       	brge	.+10     	; 0x1466 <DIO_u8_SetPinDirection+0x14a>
    145c:	8d 81       	ldd	r24, Y+5	; 0x05
    145e:	9e 81       	ldd	r25, Y+6	; 0x06
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	61 f0       	breq	.+24     	; 0x147c <DIO_u8_SetPinDirection+0x160>
    1464:	5b c0       	rjmp	.+182    	; 0x151c <DIO_u8_SetPinDirection+0x200>
    1466:	2d 81       	ldd	r18, Y+5	; 0x05
    1468:	3e 81       	ldd	r19, Y+6	; 0x06
    146a:	22 30       	cpi	r18, 0x02	; 2
    146c:	31 05       	cpc	r19, r1
    146e:	71 f1       	breq	.+92     	; 0x14cc <DIO_u8_SetPinDirection+0x1b0>
    1470:	8d 81       	ldd	r24, Y+5	; 0x05
    1472:	9e 81       	ldd	r25, Y+6	; 0x06
    1474:	83 30       	cpi	r24, 0x03	; 3
    1476:	91 05       	cpc	r25, r1
    1478:	e9 f1       	breq	.+122    	; 0x14f4 <DIO_u8_SetPinDirection+0x1d8>
    147a:	50 c0       	rjmp	.+160    	; 0x151c <DIO_u8_SetPinDirection+0x200>
			{
				case DIO_u8PORTA:
				SET_BIT(DDRA, copy_u8Pin);
    147c:	aa e3       	ldi	r26, 0x3A	; 58
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	ea e3       	ldi	r30, 0x3A	; 58
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	48 2f       	mov	r20, r24
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	02 2e       	mov	r0, r18
    1494:	02 c0       	rjmp	.+4      	; 0x149a <DIO_u8_SetPinDirection+0x17e>
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	0a 94       	dec	r0
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <DIO_u8_SetPinDirection+0x17a>
    149e:	84 2b       	or	r24, r20
    14a0:	8c 93       	st	X, r24
    14a2:	44 c0       	rjmp	.+136    	; 0x152c <DIO_u8_SetPinDirection+0x210>
				break;
				case DIO_u8PORTB:
				SET_BIT(DDRB, copy_u8Pin);
    14a4:	a7 e3       	ldi	r26, 0x37	; 55
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e7 e3       	ldi	r30, 0x37	; 55
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	48 2f       	mov	r20, r24
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	02 2e       	mov	r0, r18
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <DIO_u8_SetPinDirection+0x1a6>
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	0a 94       	dec	r0
    14c4:	e2 f7       	brpl	.-8      	; 0x14be <DIO_u8_SetPinDirection+0x1a2>
    14c6:	84 2b       	or	r24, r20
    14c8:	8c 93       	st	X, r24
    14ca:	30 c0       	rjmp	.+96     	; 0x152c <DIO_u8_SetPinDirection+0x210>
				break;
				case DIO_u8PORTC:
				SET_BIT(DDRC, copy_u8Pin);
    14cc:	a4 e3       	ldi	r26, 0x34	; 52
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e4 e3       	ldi	r30, 0x34	; 52
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	48 2f       	mov	r20, r24
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	02 2e       	mov	r0, r18
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <DIO_u8_SetPinDirection+0x1ce>
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	0a 94       	dec	r0
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <DIO_u8_SetPinDirection+0x1ca>
    14ee:	84 2b       	or	r24, r20
    14f0:	8c 93       	st	X, r24
    14f2:	1c c0       	rjmp	.+56     	; 0x152c <DIO_u8_SetPinDirection+0x210>
				break;
				case DIO_u8PORTD:
				SET_BIT(DDRD, copy_u8Pin);
    14f4:	a1 e3       	ldi	r26, 0x31	; 49
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e1 e3       	ldi	r30, 0x31	; 49
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	48 2f       	mov	r20, r24
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	02 2e       	mov	r0, r18
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <DIO_u8_SetPinDirection+0x1f6>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	0a 94       	dec	r0
    1514:	e2 f7       	brpl	.-8      	; 0x150e <DIO_u8_SetPinDirection+0x1f2>
    1516:	84 2b       	or	r24, r20
    1518:	8c 93       	st	X, r24
    151a:	08 c0       	rjmp	.+16     	; 0x152c <DIO_u8_SetPinDirection+0x210>
				break;
				default:
				Local_u8ErrorState = 1;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	05 c0       	rjmp	.+10     	; 0x152c <DIO_u8_SetPinDirection+0x210>
			}
		}
		else
		Local_u8ErrorState = 1;
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	89 83       	std	Y+1, r24	; 0x01
    1526:	02 c0       	rjmp	.+4      	; 0x152c <DIO_u8_SetPinDirection+0x210>
	}
	else
	{
		Local_u8ErrorState = 1;
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_u8ErrorState;
    152c:	89 81       	ldd	r24, Y+1	; 0x01
}
    152e:	28 96       	adiw	r28, 0x08	; 8
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	de bf       	out	0x3e, r29	; 62
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	cd bf       	out	0x3d, r28	; 61
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	08 95       	ret

00001540 <DIO_u8_SetPortDirection>:


u8 DIO_u8_SetPortDirection(u8 copy_u8Port,u8 copy_u8Direction){
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	00 d0       	rcall	.+0      	; 0x1546 <DIO_u8_SetPortDirection+0x6>
    1546:	00 d0       	rcall	.+0      	; 0x1548 <DIO_u8_SetPortDirection+0x8>
    1548:	0f 92       	push	r0
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	8a 83       	std	Y+2, r24	; 0x02
    1550:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8ErorrState=0;
    1552:	19 82       	std	Y+1, r1	; 0x01
	switch( copy_u8Port)
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	3d 83       	std	Y+5, r19	; 0x05
    155c:	2c 83       	std	Y+4, r18	; 0x04
    155e:	8c 81       	ldd	r24, Y+4	; 0x04
    1560:	9d 81       	ldd	r25, Y+5	; 0x05
    1562:	81 30       	cpi	r24, 0x01	; 1
    1564:	91 05       	cpc	r25, r1
    1566:	d1 f0       	breq	.+52     	; 0x159c <DIO_u8_SetPortDirection+0x5c>
    1568:	2c 81       	ldd	r18, Y+4	; 0x04
    156a:	3d 81       	ldd	r19, Y+5	; 0x05
    156c:	22 30       	cpi	r18, 0x02	; 2
    156e:	31 05       	cpc	r19, r1
    1570:	2c f4       	brge	.+10     	; 0x157c <DIO_u8_SetPortDirection+0x3c>
    1572:	8c 81       	ldd	r24, Y+4	; 0x04
    1574:	9d 81       	ldd	r25, Y+5	; 0x05
    1576:	00 97       	sbiw	r24, 0x00	; 0
    1578:	61 f0       	breq	.+24     	; 0x1592 <DIO_u8_SetPortDirection+0x52>
    157a:	1f c0       	rjmp	.+62     	; 0x15ba <DIO_u8_SetPortDirection+0x7a>
    157c:	2c 81       	ldd	r18, Y+4	; 0x04
    157e:	3d 81       	ldd	r19, Y+5	; 0x05
    1580:	22 30       	cpi	r18, 0x02	; 2
    1582:	31 05       	cpc	r19, r1
    1584:	81 f0       	breq	.+32     	; 0x15a6 <DIO_u8_SetPortDirection+0x66>
    1586:	8c 81       	ldd	r24, Y+4	; 0x04
    1588:	9d 81       	ldd	r25, Y+5	; 0x05
    158a:	83 30       	cpi	r24, 0x03	; 3
    158c:	91 05       	cpc	r25, r1
    158e:	81 f0       	breq	.+32     	; 0x15b0 <DIO_u8_SetPortDirection+0x70>
    1590:	14 c0       	rjmp	.+40     	; 0x15ba <DIO_u8_SetPortDirection+0x7a>
	{
		case DIO_u8PORTA:
		DDRA=copy_u8Direction;
    1592:	ea e3       	ldi	r30, 0x3A	; 58
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	80 83       	st	Z, r24
    159a:	11 c0       	rjmp	.+34     	; 0x15be <DIO_u8_SetPortDirection+0x7e>
		break;
		case DIO_u8PORTB:
		DDRB=copy_u8Direction;
    159c:	e7 e3       	ldi	r30, 0x37	; 55
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	80 83       	st	Z, r24
    15a4:	0c c0       	rjmp	.+24     	; 0x15be <DIO_u8_SetPortDirection+0x7e>
		break;
		case DIO_u8PORTC:
		DDRC=copy_u8Direction;
    15a6:	e4 e3       	ldi	r30, 0x34	; 52
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	80 83       	st	Z, r24
    15ae:	07 c0       	rjmp	.+14     	; 0x15be <DIO_u8_SetPortDirection+0x7e>
		break;
		case DIO_u8PORTD:
		DDRD=copy_u8Direction;
    15b0:	e1 e3       	ldi	r30, 0x31	; 49
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	80 83       	st	Z, r24
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <DIO_u8_SetPortDirection+0x7e>
		break;
		default:
		local_u8ErorrState= 1;
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	89 83       	std	Y+1, r24	; 0x01
		
	}
	return local_u8ErorrState;
    15be:	89 81       	ldd	r24, Y+1	; 0x01
}
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <DIO_u8_SetPinValue>:


u8 DIO_u8_SetPinValue(u8 copy_u8Port,u8 copy_u8Pin,u8 copy_u8Value){
    15d0:	df 93       	push	r29
    15d2:	cf 93       	push	r28
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	28 97       	sbiw	r28, 0x08	; 8
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	8a 83       	std	Y+2, r24	; 0x02
    15e6:	6b 83       	std	Y+3, r22	; 0x03
    15e8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
    15ea:	19 82       	std	Y+1, r1	; 0x01
	
	if ((copy_u8Pin <= DIO_u8PIN7) && (copy_u8Pin >= DIO_u8PIN0))
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	88 30       	cpi	r24, 0x08	; 8
    15f0:	08 f0       	brcs	.+2      	; 0x15f4 <DIO_u8_SetPinValue+0x24>
    15f2:	f4 c0       	rjmp	.+488    	; 0x17dc <DIO_u8_SetPinValue+0x20c>
	{
		if (copy_u8Value == DIO_u8PIN_LOW)
    15f4:	8c 81       	ldd	r24, Y+4	; 0x04
    15f6:	88 23       	and	r24, r24
    15f8:	09 f0       	breq	.+2      	; 0x15fc <DIO_u8_SetPinValue+0x2c>
    15fa:	77 c0       	rjmp	.+238    	; 0x16ea <DIO_u8_SetPinValue+0x11a>
		{
			switch (copy_u8Port)
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	38 87       	std	Y+8, r19	; 0x08
    1604:	2f 83       	std	Y+7, r18	; 0x07
    1606:	8f 81       	ldd	r24, Y+7	; 0x07
    1608:	98 85       	ldd	r25, Y+8	; 0x08
    160a:	81 30       	cpi	r24, 0x01	; 1
    160c:	91 05       	cpc	r25, r1
    160e:	59 f1       	breq	.+86     	; 0x1666 <DIO_u8_SetPinValue+0x96>
    1610:	2f 81       	ldd	r18, Y+7	; 0x07
    1612:	38 85       	ldd	r19, Y+8	; 0x08
    1614:	22 30       	cpi	r18, 0x02	; 2
    1616:	31 05       	cpc	r19, r1
    1618:	2c f4       	brge	.+10     	; 0x1624 <DIO_u8_SetPinValue+0x54>
    161a:	8f 81       	ldd	r24, Y+7	; 0x07
    161c:	98 85       	ldd	r25, Y+8	; 0x08
    161e:	00 97       	sbiw	r24, 0x00	; 0
    1620:	69 f0       	breq	.+26     	; 0x163c <DIO_u8_SetPinValue+0x6c>
    1622:	60 c0       	rjmp	.+192    	; 0x16e4 <DIO_u8_SetPinValue+0x114>
    1624:	2f 81       	ldd	r18, Y+7	; 0x07
    1626:	38 85       	ldd	r19, Y+8	; 0x08
    1628:	22 30       	cpi	r18, 0x02	; 2
    162a:	31 05       	cpc	r19, r1
    162c:	89 f1       	breq	.+98     	; 0x1690 <DIO_u8_SetPinValue+0xc0>
    162e:	8f 81       	ldd	r24, Y+7	; 0x07
    1630:	98 85       	ldd	r25, Y+8	; 0x08
    1632:	83 30       	cpi	r24, 0x03	; 3
    1634:	91 05       	cpc	r25, r1
    1636:	09 f4       	brne	.+2      	; 0x163a <DIO_u8_SetPinValue+0x6a>
    1638:	40 c0       	rjmp	.+128    	; 0x16ba <DIO_u8_SetPinValue+0xea>
    163a:	54 c0       	rjmp	.+168    	; 0x16e4 <DIO_u8_SetPinValue+0x114>
			{
				case DIO_u8PORTA:
				CLR_BIT(PORTA, copy_u8Pin);
    163c:	ab e3       	ldi	r26, 0x3B	; 59
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	eb e3       	ldi	r30, 0x3B	; 59
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	48 2f       	mov	r20, r24
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	02 2e       	mov	r0, r18
    1654:	02 c0       	rjmp	.+4      	; 0x165a <DIO_u8_SetPinValue+0x8a>
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	0a 94       	dec	r0
    165c:	e2 f7       	brpl	.-8      	; 0x1656 <DIO_u8_SetPinValue+0x86>
    165e:	80 95       	com	r24
    1660:	84 23       	and	r24, r20
    1662:	8c 93       	st	X, r24
    1664:	bd c0       	rjmp	.+378    	; 0x17e0 <DIO_u8_SetPinValue+0x210>
				break;
				case DIO_u8PORTB:
				CLR_BIT(PORTB, copy_u8Pin);
    1666:	a8 e3       	ldi	r26, 0x38	; 56
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e8 e3       	ldi	r30, 0x38	; 56
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	48 2f       	mov	r20, r24
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	02 2e       	mov	r0, r18
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <DIO_u8_SetPinValue+0xb4>
    1680:	88 0f       	add	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	0a 94       	dec	r0
    1686:	e2 f7       	brpl	.-8      	; 0x1680 <DIO_u8_SetPinValue+0xb0>
    1688:	80 95       	com	r24
    168a:	84 23       	and	r24, r20
    168c:	8c 93       	st	X, r24
    168e:	a8 c0       	rjmp	.+336    	; 0x17e0 <DIO_u8_SetPinValue+0x210>
				break;
				case DIO_u8PORTC:
				CLR_BIT(PORTC, copy_u8Pin);
    1690:	a5 e3       	ldi	r26, 0x35	; 53
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e5 e3       	ldi	r30, 0x35	; 53
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	48 2f       	mov	r20, r24
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	02 2e       	mov	r0, r18
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <DIO_u8_SetPinValue+0xde>
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	0a 94       	dec	r0
    16b0:	e2 f7       	brpl	.-8      	; 0x16aa <DIO_u8_SetPinValue+0xda>
    16b2:	80 95       	com	r24
    16b4:	84 23       	and	r24, r20
    16b6:	8c 93       	st	X, r24
    16b8:	93 c0       	rjmp	.+294    	; 0x17e0 <DIO_u8_SetPinValue+0x210>
				break;
				case DIO_u8PORTD:
				CLR_BIT(PORTD, copy_u8Pin);
    16ba:	a2 e3       	ldi	r26, 0x32	; 50
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e2 e3       	ldi	r30, 0x32	; 50
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 2e       	mov	r0, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <DIO_u8_SetPinValue+0x108>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	0a 94       	dec	r0
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <DIO_u8_SetPinValue+0x104>
    16dc:	80 95       	com	r24
    16de:	84 23       	and	r24, r20
    16e0:	8c 93       	st	X, r24
    16e2:	7e c0       	rjmp	.+252    	; 0x17e0 <DIO_u8_SetPinValue+0x210>
				break;
				default:
				Local_u8ErrorState = 1;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	89 83       	std	Y+1, r24	; 0x01
    16e8:	7b c0       	rjmp	.+246    	; 0x17e0 <DIO_u8_SetPinValue+0x210>
			}
		}
		else if (copy_u8Value == DIO_u8PIN_HIGH)
    16ea:	8c 81       	ldd	r24, Y+4	; 0x04
    16ec:	81 30       	cpi	r24, 0x01	; 1
    16ee:	09 f0       	breq	.+2      	; 0x16f2 <DIO_u8_SetPinValue+0x122>
    16f0:	72 c0       	rjmp	.+228    	; 0x17d6 <DIO_u8_SetPinValue+0x206>
		{
			switch (copy_u8Port)
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	3e 83       	std	Y+6, r19	; 0x06
    16fa:	2d 83       	std	Y+5, r18	; 0x05
    16fc:	8d 81       	ldd	r24, Y+5	; 0x05
    16fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1700:	81 30       	cpi	r24, 0x01	; 1
    1702:	91 05       	cpc	r25, r1
    1704:	49 f1       	breq	.+82     	; 0x1758 <DIO_u8_SetPinValue+0x188>
    1706:	2d 81       	ldd	r18, Y+5	; 0x05
    1708:	3e 81       	ldd	r19, Y+6	; 0x06
    170a:	22 30       	cpi	r18, 0x02	; 2
    170c:	31 05       	cpc	r19, r1
    170e:	2c f4       	brge	.+10     	; 0x171a <DIO_u8_SetPinValue+0x14a>
    1710:	8d 81       	ldd	r24, Y+5	; 0x05
    1712:	9e 81       	ldd	r25, Y+6	; 0x06
    1714:	00 97       	sbiw	r24, 0x00	; 0
    1716:	61 f0       	breq	.+24     	; 0x1730 <DIO_u8_SetPinValue+0x160>
    1718:	5b c0       	rjmp	.+182    	; 0x17d0 <DIO_u8_SetPinValue+0x200>
    171a:	2d 81       	ldd	r18, Y+5	; 0x05
    171c:	3e 81       	ldd	r19, Y+6	; 0x06
    171e:	22 30       	cpi	r18, 0x02	; 2
    1720:	31 05       	cpc	r19, r1
    1722:	71 f1       	breq	.+92     	; 0x1780 <DIO_u8_SetPinValue+0x1b0>
    1724:	8d 81       	ldd	r24, Y+5	; 0x05
    1726:	9e 81       	ldd	r25, Y+6	; 0x06
    1728:	83 30       	cpi	r24, 0x03	; 3
    172a:	91 05       	cpc	r25, r1
    172c:	e9 f1       	breq	.+122    	; 0x17a8 <DIO_u8_SetPinValue+0x1d8>
    172e:	50 c0       	rjmp	.+160    	; 0x17d0 <DIO_u8_SetPinValue+0x200>
			{
				case DIO_u8PORTA:
				SET_BIT(PORTA, copy_u8Pin);
    1730:	ab e3       	ldi	r26, 0x3B	; 59
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	eb e3       	ldi	r30, 0x3B	; 59
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	48 2f       	mov	r20, r24
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	02 2e       	mov	r0, r18
    1748:	02 c0       	rjmp	.+4      	; 0x174e <DIO_u8_SetPinValue+0x17e>
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	0a 94       	dec	r0
    1750:	e2 f7       	brpl	.-8      	; 0x174a <DIO_u8_SetPinValue+0x17a>
    1752:	84 2b       	or	r24, r20
    1754:	8c 93       	st	X, r24
    1756:	44 c0       	rjmp	.+136    	; 0x17e0 <DIO_u8_SetPinValue+0x210>
				break;
				case DIO_u8PORTB:
				SET_BIT(PORTB, copy_u8Pin);
    1758:	a8 e3       	ldi	r26, 0x38	; 56
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	e8 e3       	ldi	r30, 0x38	; 56
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	48 2f       	mov	r20, r24
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	02 2e       	mov	r0, r18
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <DIO_u8_SetPinValue+0x1a6>
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	0a 94       	dec	r0
    1778:	e2 f7       	brpl	.-8      	; 0x1772 <DIO_u8_SetPinValue+0x1a2>
    177a:	84 2b       	or	r24, r20
    177c:	8c 93       	st	X, r24
    177e:	30 c0       	rjmp	.+96     	; 0x17e0 <DIO_u8_SetPinValue+0x210>
				break;
				case DIO_u8PORTC:
				SET_BIT(PORTC, copy_u8Pin);
    1780:	a5 e3       	ldi	r26, 0x35	; 53
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e5 e3       	ldi	r30, 0x35	; 53
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	48 2f       	mov	r20, r24
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	02 2e       	mov	r0, r18
    1798:	02 c0       	rjmp	.+4      	; 0x179e <DIO_u8_SetPinValue+0x1ce>
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	0a 94       	dec	r0
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <DIO_u8_SetPinValue+0x1ca>
    17a2:	84 2b       	or	r24, r20
    17a4:	8c 93       	st	X, r24
    17a6:	1c c0       	rjmp	.+56     	; 0x17e0 <DIO_u8_SetPinValue+0x210>
				break;
				case DIO_u8PORTD:
				SET_BIT(PORTD, copy_u8Pin);
    17a8:	a2 e3       	ldi	r26, 0x32	; 50
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e2 e3       	ldi	r30, 0x32	; 50
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	48 2f       	mov	r20, r24
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	02 2e       	mov	r0, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <DIO_u8_SetPinValue+0x1f6>
    17c2:	88 0f       	add	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	0a 94       	dec	r0
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <DIO_u8_SetPinValue+0x1f2>
    17ca:	84 2b       	or	r24, r20
    17cc:	8c 93       	st	X, r24
    17ce:	08 c0       	rjmp	.+16     	; 0x17e0 <DIO_u8_SetPinValue+0x210>
				break;
				default:
				Local_u8ErrorState = 1;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	05 c0       	rjmp	.+10     	; 0x17e0 <DIO_u8_SetPinValue+0x210>
			}
		}
		else
		Local_u8ErrorState = 1;
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	89 83       	std	Y+1, r24	; 0x01
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <DIO_u8_SetPinValue+0x210>
	}
	else
	{
		Local_u8ErrorState = 1;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_u8ErrorState;
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    17e2:	28 96       	adiw	r28, 0x08	; 8
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	cd bf       	out	0x3d, r28	; 61
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <DIO_u8_SetPortValue>:


u8 DIO_u8_SetPortValue(u8 copy_u8Port,u8 copy_u8Value){
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <DIO_u8_SetPortValue+0x6>
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <DIO_u8_SetPortValue+0x8>
    17fc:	0f 92       	push	r0
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	8a 83       	std	Y+2, r24	; 0x02
    1804:	6b 83       	std	Y+3, r22	; 0x03
	
	u8 local_u8StateError=0;
    1806:	19 82       	std	Y+1, r1	; 0x01
	
	switch(copy_u8Port){
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	3d 83       	std	Y+5, r19	; 0x05
    1810:	2c 83       	std	Y+4, r18	; 0x04
    1812:	8c 81       	ldd	r24, Y+4	; 0x04
    1814:	9d 81       	ldd	r25, Y+5	; 0x05
    1816:	81 30       	cpi	r24, 0x01	; 1
    1818:	91 05       	cpc	r25, r1
    181a:	d1 f0       	breq	.+52     	; 0x1850 <DIO_u8_SetPortValue+0x5c>
    181c:	2c 81       	ldd	r18, Y+4	; 0x04
    181e:	3d 81       	ldd	r19, Y+5	; 0x05
    1820:	22 30       	cpi	r18, 0x02	; 2
    1822:	31 05       	cpc	r19, r1
    1824:	2c f4       	brge	.+10     	; 0x1830 <DIO_u8_SetPortValue+0x3c>
    1826:	8c 81       	ldd	r24, Y+4	; 0x04
    1828:	9d 81       	ldd	r25, Y+5	; 0x05
    182a:	00 97       	sbiw	r24, 0x00	; 0
    182c:	61 f0       	breq	.+24     	; 0x1846 <DIO_u8_SetPortValue+0x52>
    182e:	1f c0       	rjmp	.+62     	; 0x186e <DIO_u8_SetPortValue+0x7a>
    1830:	2c 81       	ldd	r18, Y+4	; 0x04
    1832:	3d 81       	ldd	r19, Y+5	; 0x05
    1834:	22 30       	cpi	r18, 0x02	; 2
    1836:	31 05       	cpc	r19, r1
    1838:	81 f0       	breq	.+32     	; 0x185a <DIO_u8_SetPortValue+0x66>
    183a:	8c 81       	ldd	r24, Y+4	; 0x04
    183c:	9d 81       	ldd	r25, Y+5	; 0x05
    183e:	83 30       	cpi	r24, 0x03	; 3
    1840:	91 05       	cpc	r25, r1
    1842:	81 f0       	breq	.+32     	; 0x1864 <DIO_u8_SetPortValue+0x70>
    1844:	14 c0       	rjmp	.+40     	; 0x186e <DIO_u8_SetPortValue+0x7a>
		case DIO_u8PORTA:
		PORTA=copy_u8Value;
    1846:	eb e3       	ldi	r30, 0x3B	; 59
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	80 83       	st	Z, r24
    184e:	11 c0       	rjmp	.+34     	; 0x1872 <DIO_u8_SetPortValue+0x7e>
		break;
		
		case DIO_u8PORTB:
		PORTB=copy_u8Value;
    1850:	e8 e3       	ldi	r30, 0x38	; 56
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	80 83       	st	Z, r24
    1858:	0c c0       	rjmp	.+24     	; 0x1872 <DIO_u8_SetPortValue+0x7e>
		break;
		
		case DIO_u8PORTC:
		PORTC=copy_u8Value;
    185a:	e5 e3       	ldi	r30, 0x35	; 53
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	80 83       	st	Z, r24
    1862:	07 c0       	rjmp	.+14     	; 0x1872 <DIO_u8_SetPortValue+0x7e>
		break;
		
		case DIO_u8PORTD:
		PORTD=copy_u8Value;
    1864:	e2 e3       	ldi	r30, 0x32	; 50
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	80 83       	st	Z, r24
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <DIO_u8_SetPortValue+0x7e>
		break;
		
		default :
		local_u8StateError=1;
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return local_u8StateError;
    1872:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <DIO_u8_GetPinValue>:


u8 DIO_u8_GetPinValue(u8 copy_u8Port,u8 copy_u8Pin,u8* copy_pu8Value){
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	27 97       	sbiw	r28, 0x07	; 7
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	8a 83       	std	Y+2, r24	; 0x02
    189a:	6b 83       	std	Y+3, r22	; 0x03
    189c:	5d 83       	std	Y+5, r21	; 0x05
    189e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
    18a0:	19 82       	std	Y+1, r1	; 0x01
	
	if ((copy_pu8Value != NULL) && (copy_u8Pin <= DIO_u8PIN7))
    18a2:	8c 81       	ldd	r24, Y+4	; 0x04
    18a4:	9d 81       	ldd	r25, Y+5	; 0x05
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	09 f4       	brne	.+2      	; 0x18ac <DIO_u8_GetPinValue+0x28>
    18aa:	78 c0       	rjmp	.+240    	; 0x199c <DIO_u8_GetPinValue+0x118>
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	88 30       	cpi	r24, 0x08	; 8
    18b0:	08 f0       	brcs	.+2      	; 0x18b4 <DIO_u8_GetPinValue+0x30>
    18b2:	74 c0       	rjmp	.+232    	; 0x199c <DIO_u8_GetPinValue+0x118>
	{
		switch (copy_u8Port)
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	3f 83       	std	Y+7, r19	; 0x07
    18bc:	2e 83       	std	Y+6, r18	; 0x06
    18be:	4e 81       	ldd	r20, Y+6	; 0x06
    18c0:	5f 81       	ldd	r21, Y+7	; 0x07
    18c2:	41 30       	cpi	r20, 0x01	; 1
    18c4:	51 05       	cpc	r21, r1
    18c6:	59 f1       	breq	.+86     	; 0x191e <DIO_u8_GetPinValue+0x9a>
    18c8:	8e 81       	ldd	r24, Y+6	; 0x06
    18ca:	9f 81       	ldd	r25, Y+7	; 0x07
    18cc:	82 30       	cpi	r24, 0x02	; 2
    18ce:	91 05       	cpc	r25, r1
    18d0:	34 f4       	brge	.+12     	; 0x18de <DIO_u8_GetPinValue+0x5a>
    18d2:	2e 81       	ldd	r18, Y+6	; 0x06
    18d4:	3f 81       	ldd	r19, Y+7	; 0x07
    18d6:	21 15       	cp	r18, r1
    18d8:	31 05       	cpc	r19, r1
    18da:	69 f0       	breq	.+26     	; 0x18f6 <DIO_u8_GetPinValue+0x72>
    18dc:	5c c0       	rjmp	.+184    	; 0x1996 <DIO_u8_GetPinValue+0x112>
    18de:	4e 81       	ldd	r20, Y+6	; 0x06
    18e0:	5f 81       	ldd	r21, Y+7	; 0x07
    18e2:	42 30       	cpi	r20, 0x02	; 2
    18e4:	51 05       	cpc	r21, r1
    18e6:	79 f1       	breq	.+94     	; 0x1946 <DIO_u8_GetPinValue+0xc2>
    18e8:	8e 81       	ldd	r24, Y+6	; 0x06
    18ea:	9f 81       	ldd	r25, Y+7	; 0x07
    18ec:	83 30       	cpi	r24, 0x03	; 3
    18ee:	91 05       	cpc	r25, r1
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <DIO_u8_GetPinValue+0x70>
    18f2:	3d c0       	rjmp	.+122    	; 0x196e <DIO_u8_GetPinValue+0xea>
    18f4:	50 c0       	rjmp	.+160    	; 0x1996 <DIO_u8_GetPinValue+0x112>
		{
			case DIO_u8PORTA:
			*copy_pu8Value = GET_BIT(PINA, copy_u8Pin);
    18f6:	e9 e3       	ldi	r30, 0x39	; 57
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	28 2f       	mov	r18, r24
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	88 2f       	mov	r24, r24
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	a9 01       	movw	r20, r18
    1908:	02 c0       	rjmp	.+4      	; 0x190e <DIO_u8_GetPinValue+0x8a>
    190a:	55 95       	asr	r21
    190c:	47 95       	ror	r20
    190e:	8a 95       	dec	r24
    1910:	e2 f7       	brpl	.-8      	; 0x190a <DIO_u8_GetPinValue+0x86>
    1912:	ca 01       	movw	r24, r20
    1914:	81 70       	andi	r24, 0x01	; 1
    1916:	ec 81       	ldd	r30, Y+4	; 0x04
    1918:	fd 81       	ldd	r31, Y+5	; 0x05
    191a:	80 83       	st	Z, r24
    191c:	41 c0       	rjmp	.+130    	; 0x19a0 <DIO_u8_GetPinValue+0x11c>
			break;
			case DIO_u8PORTB:
			*copy_pu8Value = GET_BIT(PINB, copy_u8Pin);
    191e:	e6 e3       	ldi	r30, 0x36	; 54
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	88 2f       	mov	r24, r24
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	a9 01       	movw	r20, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <DIO_u8_GetPinValue+0xb2>
    1932:	55 95       	asr	r21
    1934:	47 95       	ror	r20
    1936:	8a 95       	dec	r24
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <DIO_u8_GetPinValue+0xae>
    193a:	ca 01       	movw	r24, r20
    193c:	81 70       	andi	r24, 0x01	; 1
    193e:	ec 81       	ldd	r30, Y+4	; 0x04
    1940:	fd 81       	ldd	r31, Y+5	; 0x05
    1942:	80 83       	st	Z, r24
    1944:	2d c0       	rjmp	.+90     	; 0x19a0 <DIO_u8_GetPinValue+0x11c>
			break;
			case DIO_u8PORTC:
			*copy_pu8Value = GET_BIT(PINC, copy_u8Pin);
    1946:	e3 e3       	ldi	r30, 0x33	; 51
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	88 2f       	mov	r24, r24
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	a9 01       	movw	r20, r18
    1958:	02 c0       	rjmp	.+4      	; 0x195e <DIO_u8_GetPinValue+0xda>
    195a:	55 95       	asr	r21
    195c:	47 95       	ror	r20
    195e:	8a 95       	dec	r24
    1960:	e2 f7       	brpl	.-8      	; 0x195a <DIO_u8_GetPinValue+0xd6>
    1962:	ca 01       	movw	r24, r20
    1964:	81 70       	andi	r24, 0x01	; 1
    1966:	ec 81       	ldd	r30, Y+4	; 0x04
    1968:	fd 81       	ldd	r31, Y+5	; 0x05
    196a:	80 83       	st	Z, r24
    196c:	19 c0       	rjmp	.+50     	; 0x19a0 <DIO_u8_GetPinValue+0x11c>
			break;
			case DIO_u8PORTD:
			*copy_pu8Value = GET_BIT(PIND, copy_u8Pin);
    196e:	e0 e3       	ldi	r30, 0x30	; 48
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	88 2f       	mov	r24, r24
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	a9 01       	movw	r20, r18
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <DIO_u8_GetPinValue+0x102>
    1982:	55 95       	asr	r21
    1984:	47 95       	ror	r20
    1986:	8a 95       	dec	r24
    1988:	e2 f7       	brpl	.-8      	; 0x1982 <DIO_u8_GetPinValue+0xfe>
    198a:	ca 01       	movw	r24, r20
    198c:	81 70       	andi	r24, 0x01	; 1
    198e:	ec 81       	ldd	r30, Y+4	; 0x04
    1990:	fd 81       	ldd	r31, Y+5	; 0x05
    1992:	80 83       	st	Z, r24
    1994:	05 c0       	rjmp	.+10     	; 0x19a0 <DIO_u8_GetPinValue+0x11c>
			break;
			default:
			Local_u8ErrorState = 1;
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	89 83       	std	Y+1, r24	; 0x01
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <DIO_u8_GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_u8ErrorState;
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a2:	27 96       	adiw	r28, 0x07	; 7
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	f8 94       	cli
    19a8:	de bf       	out	0x3e, r29	; 62
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	cd bf       	out	0x3d, r28	; 61
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	08 95       	ret

000019b4 <EXTI_voidInit>:
 * @brief  Initializes the EXTI (External Interrupt) module based on configuration settings.
 * @param  None
 * @return None
 */
void EXTI_voidInit(void)
{
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
        CLR_BIT(MCUCR, MCUCR_ISC01);
    #elif INT0_SENSE_CTRL == EXTI_ON_CHANGE
        SET_BIT(MCUCR, MCUCR_ISC00);
        CLR_BIT(MCUCR, MCUCR_ISC01);
    #elif INT0_SENSE_CTRL == EXTI_FALLING_EDGE
        CLR_BIT(MCUCR, MCUCR_ISC00);
    19bc:	a5 e5       	ldi	r26, 0x55	; 85
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e5 e5       	ldi	r30, 0x55	; 85
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	8e 7f       	andi	r24, 0xFE	; 254
    19c8:	8c 93       	st	X, r24
        SET_BIT(MCUCR, MCUCR_ISC01);
    19ca:	a5 e5       	ldi	r26, 0x55	; 85
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	e5 e5       	ldi	r30, 0x55	; 85
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	82 60       	ori	r24, 0x02	; 2
    19d6:	8c 93       	st	X, r24
        CLR_BIT(MCUCR, MCUCR_ISC11);
    #elif INT1_SENSE_CTRL == EXTI_ON_CHANGE
        SET_BIT(MCUCR, MCUCR_ISC10);
        CLR_BIT(MCUCR, MCUCR_ISC11);
    #elif INT1_SENSE_CTRL == EXTI_FALLING_EDGE
        CLR_BIT(MCUCR, MCUCR_ISC10);
    19d8:	a5 e5       	ldi	r26, 0x55	; 85
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e5 e5       	ldi	r30, 0x55	; 85
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	8b 7f       	andi	r24, 0xFB	; 251
    19e4:	8c 93       	st	X, r24
        SET_BIT(MCUCR, MCUCR_ISC11);
    19e6:	a5 e5       	ldi	r26, 0x55	; 85
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e5 e5       	ldi	r30, 0x55	; 85
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	88 60       	ori	r24, 0x08	; 8
    19f2:	8c 93       	st	X, r24
        #error Wrong INT1_SENSE_CTRL configuration option
    #endif

    // Configuration for INT2 (External Interrupt 2)
    #if INT2_SENSE_CTRL == EXTI_FALLING_EDGE
        CLR_BIT(MCUCSR, MCUCSR_ISC2);
    19f4:	a4 e5       	ldi	r26, 0x54	; 84
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e4 e5       	ldi	r30, 0x54	; 84
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	8f 7b       	andi	r24, 0xBF	; 191
    1a00:	8c 93       	st	X, r24
        #error Wrong INT2_SENSE_CTRL configuration option
    #endif

    // Enable or disable INT0 based on initial state configuration
    #if INT0_INIT_STATE == DISABLED
        CLR_BIT(GICR, GICR_INT0);
    1a02:	ab e5       	ldi	r26, 0x5B	; 91
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	eb e5       	ldi	r30, 0x5B	; 91
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	8f 7b       	andi	r24, 0xBF	; 191
    1a0e:	8c 93       	st	X, r24
        #error Wrong INT0_INIT_STATE configuration option
    #endif

    // Enable or disable INT1 based on initial state configuration
    #if INT1_INIT_STATE == DISABLED
        CLR_BIT(GICR, GICR_INT1);
    1a10:	ab e5       	ldi	r26, 0x5B	; 91
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	eb e5       	ldi	r30, 0x5B	; 91
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	8f 77       	andi	r24, 0x7F	; 127
    1a1c:	8c 93       	st	X, r24

    // Enable or disable INT2 based on initial state configuration
    #if INT2_INIT_STATE == DISABLED
        CLR_BIT(GICR, GICR_INT2);
    #elif INT2_INIT_STATE == ENABLED
        SET_BIT(GICR, GICR_INT2);
    1a1e:	ab e5       	ldi	r26, 0x5B	; 91
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	eb e5       	ldi	r30, 0x5B	; 91
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	80 62       	ori	r24, 0x20	; 32
    1a2a:	8c 93       	st	X, r24
    #else
        #error Wrong INT2_INIT_STATE configuration option
    #endif
}
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <EXTI_u8SetSenseCtrl>:
 * @param  Copy_IntCh: The interrupt channel (INT0, INT1, or INT2).
 * @param  Copy_SenseCtrl: The sense control mode (LOW_LEVEL, ON_CHANGE, FALLING_EDGE, RISING_EDGE).
 * @return Error status (NO_ERROR if successful, ERROR if an invalid configuration is passed).
 */
u8 EXTI_u8SetSenseCtrl(IntChannel_t Copy_IntCh, SenseCtrl_t Copy_SenseCtrl )
{
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	29 97       	sbiw	r28, 0x09	; 9
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	de bf       	out	0x3e, r29	; 62
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	cd bf       	out	0x3d, r28	; 61
    1a46:	8a 83       	std	Y+2, r24	; 0x02
    1a48:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = NO_ERROR;
    1a4a:	19 82       	std	Y+1, r1	; 0x01

    // Set sense control for INT0
    if(Copy_IntCh == INT0)
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	88 23       	and	r24, r24
    1a50:	09 f0       	breq	.+2      	; 0x1a54 <EXTI_u8SetSenseCtrl+0x22>
    1a52:	5e c0       	rjmp	.+188    	; 0x1b10 <EXTI_u8SetSenseCtrl+0xde>
    {
        switch (Copy_SenseCtrl)
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	39 87       	std	Y+9, r19	; 0x09
    1a5c:	28 87       	std	Y+8, r18	; 0x08
    1a5e:	88 85       	ldd	r24, Y+8	; 0x08
    1a60:	99 85       	ldd	r25, Y+9	; 0x09
    1a62:	81 30       	cpi	r24, 0x01	; 1
    1a64:	91 05       	cpc	r25, r1
    1a66:	21 f1       	breq	.+72     	; 0x1ab0 <EXTI_u8SetSenseCtrl+0x7e>
    1a68:	28 85       	ldd	r18, Y+8	; 0x08
    1a6a:	39 85       	ldd	r19, Y+9	; 0x09
    1a6c:	22 30       	cpi	r18, 0x02	; 2
    1a6e:	31 05       	cpc	r19, r1
    1a70:	2c f4       	brge	.+10     	; 0x1a7c <EXTI_u8SetSenseCtrl+0x4a>
    1a72:	88 85       	ldd	r24, Y+8	; 0x08
    1a74:	99 85       	ldd	r25, Y+9	; 0x09
    1a76:	00 97       	sbiw	r24, 0x00	; 0
    1a78:	61 f0       	breq	.+24     	; 0x1a92 <EXTI_u8SetSenseCtrl+0x60>
    1a7a:	47 c0       	rjmp	.+142    	; 0x1b0a <EXTI_u8SetSenseCtrl+0xd8>
    1a7c:	28 85       	ldd	r18, Y+8	; 0x08
    1a7e:	39 85       	ldd	r19, Y+9	; 0x09
    1a80:	22 30       	cpi	r18, 0x02	; 2
    1a82:	31 05       	cpc	r19, r1
    1a84:	21 f1       	breq	.+72     	; 0x1ace <EXTI_u8SetSenseCtrl+0x9c>
    1a86:	88 85       	ldd	r24, Y+8	; 0x08
    1a88:	99 85       	ldd	r25, Y+9	; 0x09
    1a8a:	83 30       	cpi	r24, 0x03	; 3
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	71 f1       	breq	.+92     	; 0x1aec <EXTI_u8SetSenseCtrl+0xba>
    1a90:	3c c0       	rjmp	.+120    	; 0x1b0a <EXTI_u8SetSenseCtrl+0xd8>
        {
            case LOW_LEVEL:
                CLR_BIT(MCUCR, MCUCR_ISC00);
    1a92:	a5 e5       	ldi	r26, 0x55	; 85
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e5 e5       	ldi	r30, 0x55	; 85
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	8e 7f       	andi	r24, 0xFE	; 254
    1a9e:	8c 93       	st	X, r24
                CLR_BIT(MCUCR, MCUCR_ISC01);
    1aa0:	a5 e5       	ldi	r26, 0x55	; 85
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	e5 e5       	ldi	r30, 0x55	; 85
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	8d 7f       	andi	r24, 0xFD	; 253
    1aac:	8c 93       	st	X, r24
    1aae:	ba c0       	rjmp	.+372    	; 0x1c24 <EXTI_u8SetSenseCtrl+0x1f2>
                break;
            case ON_CHANGE:
                SET_BIT(MCUCR, MCUCR_ISC00);
    1ab0:	a5 e5       	ldi	r26, 0x55	; 85
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	e5 e5       	ldi	r30, 0x55	; 85
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	81 60       	ori	r24, 0x01	; 1
    1abc:	8c 93       	st	X, r24
                CLR_BIT(MCUCR, MCUCR_ISC01);
    1abe:	a5 e5       	ldi	r26, 0x55	; 85
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	e5 e5       	ldi	r30, 0x55	; 85
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	8d 7f       	andi	r24, 0xFD	; 253
    1aca:	8c 93       	st	X, r24
    1acc:	ab c0       	rjmp	.+342    	; 0x1c24 <EXTI_u8SetSenseCtrl+0x1f2>
                break;
            case FALLING_EDGE:
                CLR_BIT(MCUCR, MCUCR_ISC00);
    1ace:	a5 e5       	ldi	r26, 0x55	; 85
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	e5 e5       	ldi	r30, 0x55	; 85
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	8e 7f       	andi	r24, 0xFE	; 254
    1ada:	8c 93       	st	X, r24
                SET_BIT(MCUCR, MCUCR_ISC01);
    1adc:	a5 e5       	ldi	r26, 0x55	; 85
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e5 e5       	ldi	r30, 0x55	; 85
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	82 60       	ori	r24, 0x02	; 2
    1ae8:	8c 93       	st	X, r24
    1aea:	9c c0       	rjmp	.+312    	; 0x1c24 <EXTI_u8SetSenseCtrl+0x1f2>
                break;
            case RISING_EDGE:
                SET_BIT(MCUCR, MCUCR_ISC00);
    1aec:	a5 e5       	ldi	r26, 0x55	; 85
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	e5 e5       	ldi	r30, 0x55	; 85
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	81 60       	ori	r24, 0x01	; 1
    1af8:	8c 93       	st	X, r24
                SET_BIT(MCUCR, MCUCR_ISC01);
    1afa:	a5 e5       	ldi	r26, 0x55	; 85
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e5 e5       	ldi	r30, 0x55	; 85
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	82 60       	ori	r24, 0x02	; 2
    1b06:	8c 93       	st	X, r24
    1b08:	8d c0       	rjmp	.+282    	; 0x1c24 <EXTI_u8SetSenseCtrl+0x1f2>
                break;
            default:
                Local_u8ErrorState = ERROR;
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	89 83       	std	Y+1, r24	; 0x01
    1b0e:	8a c0       	rjmp	.+276    	; 0x1c24 <EXTI_u8SetSenseCtrl+0x1f2>
                break;
        }
    }
    // Set sense control for INT1
    else if(Copy_IntCh == INT1)
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
    1b12:	81 30       	cpi	r24, 0x01	; 1
    1b14:	09 f0       	breq	.+2      	; 0x1b18 <EXTI_u8SetSenseCtrl+0xe6>
    1b16:	5e c0       	rjmp	.+188    	; 0x1bd4 <EXTI_u8SetSenseCtrl+0x1a2>
    {
        switch (Copy_SenseCtrl)
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	3f 83       	std	Y+7, r19	; 0x07
    1b20:	2e 83       	std	Y+6, r18	; 0x06
    1b22:	8e 81       	ldd	r24, Y+6	; 0x06
    1b24:	9f 81       	ldd	r25, Y+7	; 0x07
    1b26:	81 30       	cpi	r24, 0x01	; 1
    1b28:	91 05       	cpc	r25, r1
    1b2a:	21 f1       	breq	.+72     	; 0x1b74 <EXTI_u8SetSenseCtrl+0x142>
    1b2c:	2e 81       	ldd	r18, Y+6	; 0x06
    1b2e:	3f 81       	ldd	r19, Y+7	; 0x07
    1b30:	22 30       	cpi	r18, 0x02	; 2
    1b32:	31 05       	cpc	r19, r1
    1b34:	2c f4       	brge	.+10     	; 0x1b40 <EXTI_u8SetSenseCtrl+0x10e>
    1b36:	8e 81       	ldd	r24, Y+6	; 0x06
    1b38:	9f 81       	ldd	r25, Y+7	; 0x07
    1b3a:	00 97       	sbiw	r24, 0x00	; 0
    1b3c:	61 f0       	breq	.+24     	; 0x1b56 <EXTI_u8SetSenseCtrl+0x124>
    1b3e:	47 c0       	rjmp	.+142    	; 0x1bce <EXTI_u8SetSenseCtrl+0x19c>
    1b40:	2e 81       	ldd	r18, Y+6	; 0x06
    1b42:	3f 81       	ldd	r19, Y+7	; 0x07
    1b44:	22 30       	cpi	r18, 0x02	; 2
    1b46:	31 05       	cpc	r19, r1
    1b48:	21 f1       	breq	.+72     	; 0x1b92 <EXTI_u8SetSenseCtrl+0x160>
    1b4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b4c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b4e:	83 30       	cpi	r24, 0x03	; 3
    1b50:	91 05       	cpc	r25, r1
    1b52:	71 f1       	breq	.+92     	; 0x1bb0 <EXTI_u8SetSenseCtrl+0x17e>
    1b54:	3c c0       	rjmp	.+120    	; 0x1bce <EXTI_u8SetSenseCtrl+0x19c>
        {
            case LOW_LEVEL:
                CLR_BIT(MCUCR, MCUCR_ISC10);
    1b56:	a5 e5       	ldi	r26, 0x55	; 85
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	e5 e5       	ldi	r30, 0x55	; 85
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	8b 7f       	andi	r24, 0xFB	; 251
    1b62:	8c 93       	st	X, r24
                CLR_BIT(MCUCR, MCUCR_ISC11);
    1b64:	a5 e5       	ldi	r26, 0x55	; 85
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	e5 e5       	ldi	r30, 0x55	; 85
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	87 7f       	andi	r24, 0xF7	; 247
    1b70:	8c 93       	st	X, r24
    1b72:	58 c0       	rjmp	.+176    	; 0x1c24 <EXTI_u8SetSenseCtrl+0x1f2>
                break;
            case ON_CHANGE:
                SET_BIT(MCUCR, MCUCR_ISC10);
    1b74:	a5 e5       	ldi	r26, 0x55	; 85
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	e5 e5       	ldi	r30, 0x55	; 85
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	84 60       	ori	r24, 0x04	; 4
    1b80:	8c 93       	st	X, r24
                CLR_BIT(MCUCR, MCUCR_ISC11);
    1b82:	a5 e5       	ldi	r26, 0x55	; 85
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	e5 e5       	ldi	r30, 0x55	; 85
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	87 7f       	andi	r24, 0xF7	; 247
    1b8e:	8c 93       	st	X, r24
    1b90:	49 c0       	rjmp	.+146    	; 0x1c24 <EXTI_u8SetSenseCtrl+0x1f2>
                break;
            case FALLING_EDGE:
                CLR_BIT(MCUCR, MCUCR_ISC10);
    1b92:	a5 e5       	ldi	r26, 0x55	; 85
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	e5 e5       	ldi	r30, 0x55	; 85
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	8b 7f       	andi	r24, 0xFB	; 251
    1b9e:	8c 93       	st	X, r24
                SET_BIT(MCUCR, MCUCR_ISC11);
    1ba0:	a5 e5       	ldi	r26, 0x55	; 85
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e5 e5       	ldi	r30, 0x55	; 85
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	88 60       	ori	r24, 0x08	; 8
    1bac:	8c 93       	st	X, r24
    1bae:	3a c0       	rjmp	.+116    	; 0x1c24 <EXTI_u8SetSenseCtrl+0x1f2>
                break;
            case RISING_EDGE:
                SET_BIT(MCUCR, MCUCR_ISC10);
    1bb0:	a5 e5       	ldi	r26, 0x55	; 85
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	e5 e5       	ldi	r30, 0x55	; 85
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	84 60       	ori	r24, 0x04	; 4
    1bbc:	8c 93       	st	X, r24
                SET_BIT(MCUCR, MCUCR_ISC11);
    1bbe:	a5 e5       	ldi	r26, 0x55	; 85
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e5 e5       	ldi	r30, 0x55	; 85
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	88 60       	ori	r24, 0x08	; 8
    1bca:	8c 93       	st	X, r24
    1bcc:	2b c0       	rjmp	.+86     	; 0x1c24 <EXTI_u8SetSenseCtrl+0x1f2>
                break;
            default:
                Local_u8ErrorState = ERROR;
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	89 83       	std	Y+1, r24	; 0x01
    1bd2:	28 c0       	rjmp	.+80     	; 0x1c24 <EXTI_u8SetSenseCtrl+0x1f2>
                break;
        }
    }
    // Set sense control for INT2
    else if(Copy_IntCh == INT2)
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	82 30       	cpi	r24, 0x02	; 2
    1bd8:	19 f5       	brne	.+70     	; 0x1c20 <EXTI_u8SetSenseCtrl+0x1ee>
    {
        switch (Copy_SenseCtrl)
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	28 2f       	mov	r18, r24
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	3d 83       	std	Y+5, r19	; 0x05
    1be2:	2c 83       	std	Y+4, r18	; 0x04
    1be4:	8c 81       	ldd	r24, Y+4	; 0x04
    1be6:	9d 81       	ldd	r25, Y+5	; 0x05
    1be8:	82 30       	cpi	r24, 0x02	; 2
    1bea:	91 05       	cpc	r25, r1
    1bec:	31 f0       	breq	.+12     	; 0x1bfa <EXTI_u8SetSenseCtrl+0x1c8>
    1bee:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf0:	3d 81       	ldd	r19, Y+5	; 0x05
    1bf2:	23 30       	cpi	r18, 0x03	; 3
    1bf4:	31 05       	cpc	r19, r1
    1bf6:	49 f0       	breq	.+18     	; 0x1c0a <EXTI_u8SetSenseCtrl+0x1d8>
    1bf8:	10 c0       	rjmp	.+32     	; 0x1c1a <EXTI_u8SetSenseCtrl+0x1e8>
        {
            case FALLING_EDGE:
                CLR_BIT(MCUCSR, MCUCSR_ISC2);
    1bfa:	a4 e5       	ldi	r26, 0x54	; 84
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e4 e5       	ldi	r30, 0x54	; 84
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	8f 7b       	andi	r24, 0xBF	; 191
    1c06:	8c 93       	st	X, r24
    1c08:	0d c0       	rjmp	.+26     	; 0x1c24 <EXTI_u8SetSenseCtrl+0x1f2>
                break;
            case RISING_EDGE:
                SET_BIT(MCUCSR, MCUCSR_ISC2);
    1c0a:	a4 e5       	ldi	r26, 0x54	; 84
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	e4 e5       	ldi	r30, 0x54	; 84
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	80 64       	ori	r24, 0x40	; 64
    1c16:	8c 93       	st	X, r24
    1c18:	05 c0       	rjmp	.+10     	; 0x1c24 <EXTI_u8SetSenseCtrl+0x1f2>
                break;
            default:
                Local_u8ErrorState = ERROR;
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	89 83       	std	Y+1, r24	; 0x01
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <EXTI_u8SetSenseCtrl+0x1f2>
                break;
        }
    }
    else
    {
        Local_u8ErrorState = ERROR;
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c26:	29 96       	adiw	r28, 0x09	; 9
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	de bf       	out	0x3e, r29	; 62
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	cd bf       	out	0x3d, r28	; 61
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <EXTI_u8EnableIntChannel>:
 * @brief  Enables a specific interrupt channel (INT0, INT1, or INT2).
 * @param  Copy_IntCh: The interrupt channel to enable.
 * @return Error status (NO_ERROR if successful, ERROR if an invalid channel is passed).
 */
u8 EXTI_u8EnableIntChannel(IntChannel_t Copy_IntCh)
{
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	00 d0       	rcall	.+0      	; 0x1c3e <EXTI_u8EnableIntChannel+0x6>
    1c3e:	00 d0       	rcall	.+0      	; 0x1c40 <EXTI_u8EnableIntChannel+0x8>
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
    1c44:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8ErrorState = NO_ERROR;
    1c46:	19 82       	std	Y+1, r1	; 0x01

    switch(Copy_IntCh)
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	3c 83       	std	Y+4, r19	; 0x04
    1c50:	2b 83       	std	Y+3, r18	; 0x03
    1c52:	8b 81       	ldd	r24, Y+3	; 0x03
    1c54:	9c 81       	ldd	r25, Y+4	; 0x04
    1c56:	81 30       	cpi	r24, 0x01	; 1
    1c58:	91 05       	cpc	r25, r1
    1c5a:	89 f0       	breq	.+34     	; 0x1c7e <EXTI_u8EnableIntChannel+0x46>
    1c5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c60:	22 30       	cpi	r18, 0x02	; 2
    1c62:	31 05       	cpc	r19, r1
    1c64:	a1 f0       	breq	.+40     	; 0x1c8e <EXTI_u8EnableIntChannel+0x56>
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	c1 f4       	brne	.+48     	; 0x1c9e <EXTI_u8EnableIntChannel+0x66>
    {
        case INT0:
            SET_BIT(GICR, GICR_INT0);
    1c6e:	ab e5       	ldi	r26, 0x5B	; 91
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	eb e5       	ldi	r30, 0x5B	; 91
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	80 64       	ori	r24, 0x40	; 64
    1c7a:	8c 93       	st	X, r24
    1c7c:	12 c0       	rjmp	.+36     	; 0x1ca2 <EXTI_u8EnableIntChannel+0x6a>
            break;
        case INT1:
            SET_BIT(GICR, GICR_INT1);
    1c7e:	ab e5       	ldi	r26, 0x5B	; 91
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	eb e5       	ldi	r30, 0x5B	; 91
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	80 68       	ori	r24, 0x80	; 128
    1c8a:	8c 93       	st	X, r24
    1c8c:	0a c0       	rjmp	.+20     	; 0x1ca2 <EXTI_u8EnableIntChannel+0x6a>
            break;
        case INT2:
            SET_BIT(GICR, GICR_INT2);
    1c8e:	ab e5       	ldi	r26, 0x5B	; 91
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	eb e5       	ldi	r30, 0x5B	; 91
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	80 62       	ori	r24, 0x20	; 32
    1c9a:	8c 93       	st	X, r24
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <EXTI_u8EnableIntChannel+0x6a>
            break;
        default:
            Local_u8ErrorState = ERROR;
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	89 83       	std	Y+1, r24	; 0x01
            break;
    }

    return Local_u8ErrorState;
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <EXTI_u8DisableIntChannel>:
 * @brief  Disables a specific interrupt channel (INT0, INT1, or INT2).
 * @param  Copy_IntCh: The interrupt channel to disable.
 * @return Error status (NO_ERROR if successful, ERROR if an invalid channel is passed).
 */
u8 EXTI_u8DisableIntChannel(IntChannel_t Copy_IntCh)
{
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <EXTI_u8DisableIntChannel+0x6>
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <EXTI_u8DisableIntChannel+0x8>
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8ErrorState = NO_ERROR;
    1cc0:	19 82       	std	Y+1, r1	; 0x01

    switch(Copy_IntCh)
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	3c 83       	std	Y+4, r19	; 0x04
    1cca:	2b 83       	std	Y+3, r18	; 0x03
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd0:	81 30       	cpi	r24, 0x01	; 1
    1cd2:	91 05       	cpc	r25, r1
    1cd4:	89 f0       	breq	.+34     	; 0x1cf8 <EXTI_u8DisableIntChannel+0x46>
    1cd6:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cda:	22 30       	cpi	r18, 0x02	; 2
    1cdc:	31 05       	cpc	r19, r1
    1cde:	a1 f0       	breq	.+40     	; 0x1d08 <EXTI_u8DisableIntChannel+0x56>
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce4:	00 97       	sbiw	r24, 0x00	; 0
    1ce6:	c1 f4       	brne	.+48     	; 0x1d18 <EXTI_u8DisableIntChannel+0x66>
    {
        case INT0:
            CLR_BIT(GICR, GICR_INT0);
    1ce8:	ab e5       	ldi	r26, 0x5B	; 91
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	eb e5       	ldi	r30, 0x5B	; 91
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	8f 7b       	andi	r24, 0xBF	; 191
    1cf4:	8c 93       	st	X, r24
    1cf6:	12 c0       	rjmp	.+36     	; 0x1d1c <EXTI_u8DisableIntChannel+0x6a>
            break;
        case INT1:
            CLR_BIT(GICR, GICR_INT1);
    1cf8:	ab e5       	ldi	r26, 0x5B	; 91
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	eb e5       	ldi	r30, 0x5B	; 91
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	8f 77       	andi	r24, 0x7F	; 127
    1d04:	8c 93       	st	X, r24
    1d06:	0a c0       	rjmp	.+20     	; 0x1d1c <EXTI_u8DisableIntChannel+0x6a>
            break;
        case INT2:
            CLR_BIT(GICR, GICR_INT2);
    1d08:	ab e5       	ldi	r26, 0x5B	; 91
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	eb e5       	ldi	r30, 0x5B	; 91
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	8f 7d       	andi	r24, 0xDF	; 223
    1d14:	8c 93       	st	X, r24
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <EXTI_u8DisableIntChannel+0x6a>
            break;
        default:
            Local_u8ErrorState = ERROR;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	89 83       	std	Y+1, r24	; 0x01
            break;
    }

    return Local_u8ErrorState;
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	08 95       	ret

00001d2c <EXTI_u8SetCallBack>:
 * @param  Copy_IntCh: The interrupt channel (INT0, INT1, or INT2).
 * @param  Copy_pvCallBackFunc: Pointer to the callback function.
 * @return Error status (NO_ERROR if successful, NULL_PTR_ERR if the callback is NULL).
 */
u8 EXTI_u8SetCallBack(IntChannel_t Copy_IntCh, void(*Copy_pvCallBackFunc)(void))
{
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <EXTI_u8SetCallBack+0x6>
    1d32:	00 d0       	rcall	.+0      	; 0x1d34 <EXTI_u8SetCallBack+0x8>
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	8a 83       	std	Y+2, r24	; 0x02
    1d3a:	7c 83       	std	Y+4, r23	; 0x04
    1d3c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorStatus = NO_ERROR;
    1d3e:	19 82       	std	Y+1, r1	; 0x01

    if(Copy_pvCallBackFunc != NULL)
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	9c 81       	ldd	r25, Y+4	; 0x04
    1d44:	00 97       	sbiw	r24, 0x00	; 0
    1d46:	69 f0       	breq	.+26     	; 0x1d62 <EXTI_u8SetCallBack+0x36>
    {
        EXTI_pvCallBack[Copy_IntCh] = Copy_pvCallBackFunc;
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	88 2f       	mov	r24, r24
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	88 0f       	add	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	fc 01       	movw	r30, r24
    1d54:	e6 5f       	subi	r30, 0xF6	; 246
    1d56:	fd 4f       	sbci	r31, 0xFD	; 253
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5c:	91 83       	std	Z+1, r25	; 0x01
    1d5e:	80 83       	st	Z, r24
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <EXTI_u8SetCallBack+0x3a>
    }
    else
    {
        Local_u8ErrorStatus = NULL_PTR_ERR;
    1d62:	82 e0       	ldi	r24, 0x02	; 2
    1d64:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorStatus;
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	cf 91       	pop	r28
    1d72:	df 91       	pop	r29
    1d74:	08 95       	ret

00001d76 <__vector_1>:
 * @param  None
 * @return None
 */
__attribute__((signal)) void __vector_1 (void);
void __vector_1 (void)
{
    1d76:	1f 92       	push	r1
    1d78:	0f 92       	push	r0
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	0f 92       	push	r0
    1d7e:	11 24       	eor	r1, r1
    1d80:	2f 93       	push	r18
    1d82:	3f 93       	push	r19
    1d84:	4f 93       	push	r20
    1d86:	5f 93       	push	r21
    1d88:	6f 93       	push	r22
    1d8a:	7f 93       	push	r23
    1d8c:	8f 93       	push	r24
    1d8e:	9f 93       	push	r25
    1d90:	af 93       	push	r26
    1d92:	bf 93       	push	r27
    1d94:	ef 93       	push	r30
    1d96:	ff 93       	push	r31
    1d98:	df 93       	push	r29
    1d9a:	cf 93       	push	r28
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    if(EXTI_pvCallBack[INT0] != NULL)
    1da0:	80 91 0a 02 	lds	r24, 0x020A
    1da4:	90 91 0b 02 	lds	r25, 0x020B
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	29 f0       	breq	.+10     	; 0x1db6 <__vector_1+0x40>
    {
        EXTI_pvCallBack[INT0]();
    1dac:	e0 91 0a 02 	lds	r30, 0x020A
    1db0:	f0 91 0b 02 	lds	r31, 0x020B
    1db4:	09 95       	icall
    }
}
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	ff 91       	pop	r31
    1dbc:	ef 91       	pop	r30
    1dbe:	bf 91       	pop	r27
    1dc0:	af 91       	pop	r26
    1dc2:	9f 91       	pop	r25
    1dc4:	8f 91       	pop	r24
    1dc6:	7f 91       	pop	r23
    1dc8:	6f 91       	pop	r22
    1dca:	5f 91       	pop	r21
    1dcc:	4f 91       	pop	r20
    1dce:	3f 91       	pop	r19
    1dd0:	2f 91       	pop	r18
    1dd2:	0f 90       	pop	r0
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	0f 90       	pop	r0
    1dd8:	1f 90       	pop	r1
    1dda:	18 95       	reti

00001ddc <__vector_2>:
 * @param  None
 * @return None
 */
__attribute__((signal)) void __vector_2 (void);
void __vector_2 (void)
{
    1ddc:	1f 92       	push	r1
    1dde:	0f 92       	push	r0
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	0f 92       	push	r0
    1de4:	11 24       	eor	r1, r1
    1de6:	2f 93       	push	r18
    1de8:	3f 93       	push	r19
    1dea:	4f 93       	push	r20
    1dec:	5f 93       	push	r21
    1dee:	6f 93       	push	r22
    1df0:	7f 93       	push	r23
    1df2:	8f 93       	push	r24
    1df4:	9f 93       	push	r25
    1df6:	af 93       	push	r26
    1df8:	bf 93       	push	r27
    1dfa:	ef 93       	push	r30
    1dfc:	ff 93       	push	r31
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    if(EXTI_pvCallBack[INT1] != NULL)
    1e06:	80 91 0c 02 	lds	r24, 0x020C
    1e0a:	90 91 0d 02 	lds	r25, 0x020D
    1e0e:	00 97       	sbiw	r24, 0x00	; 0
    1e10:	29 f0       	breq	.+10     	; 0x1e1c <__vector_2+0x40>
    {
        EXTI_pvCallBack[INT1]();
    1e12:	e0 91 0c 02 	lds	r30, 0x020C
    1e16:	f0 91 0d 02 	lds	r31, 0x020D
    1e1a:	09 95       	icall
    }
}
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	ff 91       	pop	r31
    1e22:	ef 91       	pop	r30
    1e24:	bf 91       	pop	r27
    1e26:	af 91       	pop	r26
    1e28:	9f 91       	pop	r25
    1e2a:	8f 91       	pop	r24
    1e2c:	7f 91       	pop	r23
    1e2e:	6f 91       	pop	r22
    1e30:	5f 91       	pop	r21
    1e32:	4f 91       	pop	r20
    1e34:	3f 91       	pop	r19
    1e36:	2f 91       	pop	r18
    1e38:	0f 90       	pop	r0
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	0f 90       	pop	r0
    1e3e:	1f 90       	pop	r1
    1e40:	18 95       	reti

00001e42 <__vector_3>:
 * @param  None
 * @return None
 */
__attribute__((signal)) void __vector_3 (void);
void __vector_3 (void)
{
    1e42:	1f 92       	push	r1
    1e44:	0f 92       	push	r0
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	0f 92       	push	r0
    1e4a:	11 24       	eor	r1, r1
    1e4c:	2f 93       	push	r18
    1e4e:	3f 93       	push	r19
    1e50:	4f 93       	push	r20
    1e52:	5f 93       	push	r21
    1e54:	6f 93       	push	r22
    1e56:	7f 93       	push	r23
    1e58:	8f 93       	push	r24
    1e5a:	9f 93       	push	r25
    1e5c:	af 93       	push	r26
    1e5e:	bf 93       	push	r27
    1e60:	ef 93       	push	r30
    1e62:	ff 93       	push	r31
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    if(EXTI_pvCallBack[INT2] != NULL)
    1e6c:	80 91 0e 02 	lds	r24, 0x020E
    1e70:	90 91 0f 02 	lds	r25, 0x020F
    1e74:	00 97       	sbiw	r24, 0x00	; 0
    1e76:	29 f0       	breq	.+10     	; 0x1e82 <__vector_3+0x40>
    {
        EXTI_pvCallBack[INT2]();
    1e78:	e0 91 0e 02 	lds	r30, 0x020E
    1e7c:	f0 91 0f 02 	lds	r31, 0x020F
    1e80:	09 95       	icall
    }
}
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	ff 91       	pop	r31
    1e88:	ef 91       	pop	r30
    1e8a:	bf 91       	pop	r27
    1e8c:	af 91       	pop	r26
    1e8e:	9f 91       	pop	r25
    1e90:	8f 91       	pop	r24
    1e92:	7f 91       	pop	r23
    1e94:	6f 91       	pop	r22
    1e96:	5f 91       	pop	r21
    1e98:	4f 91       	pop	r20
    1e9a:	3f 91       	pop	r19
    1e9c:	2f 91       	pop	r18
    1e9e:	0f 90       	pop	r0
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	0f 90       	pop	r0
    1ea4:	1f 90       	pop	r1
    1ea6:	18 95       	reti

00001ea8 <GIE_voidEnableGlobal>:
 * 
 * This function sets the Global Interrupt Enable bit in the SREG register, enabling global interrupts
 * for the microcontroller. It allows the processor to respond to external and internal interrupt requests.
 */
void GIE_voidEnableGlobal(void)
{
    1ea8:	df 93       	push	r29
    1eaa:	cf 93       	push	r28
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG, SREG_I);
    1eb0:	af e5       	ldi	r26, 0x5F	; 95
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	ef e5       	ldi	r30, 0x5F	; 95
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	80 68       	ori	r24, 0x80	; 128
    1ebc:	8c 93       	st	X, r24
}
    1ebe:	cf 91       	pop	r28
    1ec0:	df 91       	pop	r29
    1ec2:	08 95       	ret

00001ec4 <GIE_voidDisableGlobal>:
 * 
 * This function clears the Global Interrupt Enable bit in the SREG register, disabling global interrupts
 * for the microcontroller. This prevents the processor from responding to external and internal interrupt requests.
 */
void GIE_voidDisableGlobal(void)
{
    1ec4:	df 93       	push	r29
    1ec6:	cf 93       	push	r28
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG, SREG_I);
    1ecc:	af e5       	ldi	r26, 0x5F	; 95
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	ef e5       	ldi	r30, 0x5F	; 95
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	8f 77       	andi	r24, 0x7F	; 127
    1ed8:	8c 93       	st	X, r24
}
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <KPD_u8GetPressedKey>:
#include "KPD_config.h"
#include "KPD_interface.h"


u8 KPD_u8GetPressedKey(void)
{
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    1ee8:	63 97       	sbiw	r28, 0x13	; 19
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	de bf       	out	0x3e, r29	; 62
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY, Local_u8ColumnIdx, Local_u8RowIdx, Local_u8PinState;
    1ef4:	8f ef       	ldi	r24, 0xFF	; 255
    1ef6:	89 8b       	std	Y+17, r24	; 0x11
	static u8 Local_u8KPDArr[ROWS_NUM][COLUMNS_NUM] = KPD_ARR_VAL;
	static u8 Local_u8ColumnArr[COLUMNS_NUM] = {KPD_COLUMN0_PIN, KPD_COLUMN1_PIN};
	static u8 Local_u8RowArr[ROWS_NUM] = {KPD_ROW0_PIN, KPD_ROW1_PIN};
	
	for (Local_u8ColumnIdx = 0; Local_u8ColumnIdx < COLUMNS_NUM; Local_u8ColumnIdx++)
    1ef8:	18 8a       	std	Y+16, r1	; 0x10
    1efa:	db c0       	rjmp	.+438    	; 0x20b2 <KPD_u8GetPressedKey+0x1d2>
	{
		DIO_u8_SetPinValue(KPD_PORT, Local_u8ColumnArr[Local_u8ColumnIdx], DIO_u8PIN_LOW);
    1efc:	88 89       	ldd	r24, Y+16	; 0x10
    1efe:	88 2f       	mov	r24, r24
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	fc 01       	movw	r30, r24
    1f04:	eb 52       	subi	r30, 0x2B	; 43
    1f06:	fe 4f       	sbci	r31, 0xFE	; 254
    1f08:	90 81       	ld	r25, Z
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	69 2f       	mov	r22, r25
    1f0e:	40 e0       	ldi	r20, 0x00	; 0
    1f10:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
		
		for (Local_u8RowIdx = 0; Local_u8RowIdx < ROWS_NUM; Local_u8RowIdx++)
    1f14:	1f 86       	std	Y+15, r1	; 0x0f
    1f16:	ba c0       	rjmp	.+372    	; 0x208c <KPD_u8GetPressedKey+0x1ac>
		{
			DIO_u8_GetPinValue(KPD_PORT, Local_u8RowArr[Local_u8RowIdx], &Local_u8PinState);
    1f18:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f1a:	88 2f       	mov	r24, r24
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	fc 01       	movw	r30, r24
    1f20:	ed 52       	subi	r30, 0x2D	; 45
    1f22:	fe 4f       	sbci	r31, 0xFE	; 254
    1f24:	90 81       	ld	r25, Z
    1f26:	9e 01       	movw	r18, r28
    1f28:	2e 5e       	subi	r18, 0xEE	; 238
    1f2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	69 2f       	mov	r22, r25
    1f30:	a9 01       	movw	r20, r18
    1f32:	0e 94 42 0c 	call	0x1884	; 0x1884 <DIO_u8_GetPinValue>
			
			if (DIO_u8PIN_LOW == Local_u8PinState)
    1f36:	8a 89       	ldd	r24, Y+18	; 0x12
    1f38:	88 23       	and	r24, r24
    1f3a:	09 f0       	breq	.+2      	; 0x1f3e <KPD_u8GetPressedKey+0x5e>
    1f3c:	a4 c0       	rjmp	.+328    	; 0x2086 <KPD_u8GetPressedKey+0x1a6>
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    1f3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f40:	48 2f       	mov	r20, r24
    1f42:	50 e0       	ldi	r21, 0x00	; 0
    1f44:	88 89       	ldd	r24, Y+16	; 0x10
    1f46:	28 2f       	mov	r18, r24
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	ca 01       	movw	r24, r20
    1f4c:	88 0f       	add	r24, r24
    1f4e:	99 1f       	adc	r25, r25
    1f50:	82 0f       	add	r24, r18
    1f52:	93 1f       	adc	r25, r19
    1f54:	fc 01       	movw	r30, r24
    1f56:	e9 52       	subi	r30, 0x29	; 41
    1f58:	fe 4f       	sbci	r31, 0xFE	; 254
    1f5a:	80 81       	ld	r24, Z
    1f5c:	89 8b       	std	Y+17, r24	; 0x11
    1f5e:	0f c0       	rjmp	.+30     	; 0x1f7e <KPD_u8GetPressedKey+0x9e>
				
				while (DIO_u8PIN_LOW == Local_u8PinState)
				{
					DIO_u8_GetPinValue(KPD_PORT, Local_u8RowArr[Local_u8RowIdx], &Local_u8PinState);
    1f60:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f62:	88 2f       	mov	r24, r24
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	fc 01       	movw	r30, r24
    1f68:	ed 52       	subi	r30, 0x2D	; 45
    1f6a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f6c:	90 81       	ld	r25, Z
    1f6e:	9e 01       	movw	r18, r28
    1f70:	2e 5e       	subi	r18, 0xEE	; 238
    1f72:	3f 4f       	sbci	r19, 0xFF	; 255
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	69 2f       	mov	r22, r25
    1f78:	a9 01       	movw	r20, r18
    1f7a:	0e 94 42 0c 	call	0x1884	; 0x1884 <DIO_u8_GetPinValue>
			
			if (DIO_u8PIN_LOW == Local_u8PinState)
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
				
				while (DIO_u8PIN_LOW == Local_u8PinState)
    1f7e:	8a 89       	ldd	r24, Y+18	; 0x12
    1f80:	88 23       	and	r24, r24
    1f82:	71 f3       	breq	.-36     	; 0x1f60 <KPD_u8GetPressedKey+0x80>
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	a0 e2       	ldi	r26, 0x20	; 32
    1f8a:	b1 e4       	ldi	r27, 0x41	; 65
    1f8c:	8b 87       	std	Y+11, r24	; 0x0b
    1f8e:	9c 87       	std	Y+12, r25	; 0x0c
    1f90:	ad 87       	std	Y+13, r26	; 0x0d
    1f92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	4a e7       	ldi	r20, 0x7A	; 122
    1fa2:	55 e4       	ldi	r21, 0x45	; 69
    1fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	8f 83       	std	Y+7, r24	; 0x07
    1fae:	98 87       	std	Y+8, r25	; 0x08
    1fb0:	a9 87       	std	Y+9, r26	; 0x09
    1fb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb6:	78 85       	ldd	r23, Y+8	; 0x08
    1fb8:	89 85       	ldd	r24, Y+9	; 0x09
    1fba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	40 e8       	ldi	r20, 0x80	; 128
    1fc2:	5f e3       	ldi	r21, 0x3F	; 63
    1fc4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fc8:	88 23       	and	r24, r24
    1fca:	2c f4       	brge	.+10     	; 0x1fd6 <KPD_u8GetPressedKey+0xf6>
		__ticks = 1;
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	9e 83       	std	Y+6, r25	; 0x06
    1fd2:	8d 83       	std	Y+5, r24	; 0x05
    1fd4:	3f c0       	rjmp	.+126    	; 0x2054 <KPD_u8GetPressedKey+0x174>
	else if (__tmp > 65535)
    1fd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd8:	78 85       	ldd	r23, Y+8	; 0x08
    1fda:	89 85       	ldd	r24, Y+9	; 0x09
    1fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	3f ef       	ldi	r19, 0xFF	; 255
    1fe2:	4f e7       	ldi	r20, 0x7F	; 127
    1fe4:	57 e4       	ldi	r21, 0x47	; 71
    1fe6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fea:	18 16       	cp	r1, r24
    1fec:	4c f5       	brge	.+82     	; 0x2040 <KPD_u8GetPressedKey+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ff0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ff2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	40 e2       	ldi	r20, 0x20	; 32
    1ffc:	51 e4       	ldi	r21, 0x41	; 65
    1ffe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	bc 01       	movw	r22, r24
    2008:	cd 01       	movw	r24, r26
    200a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	9e 83       	std	Y+6, r25	; 0x06
    2014:	8d 83       	std	Y+5, r24	; 0x05
    2016:	0f c0       	rjmp	.+30     	; 0x2036 <KPD_u8GetPressedKey+0x156>
    2018:	80 e9       	ldi	r24, 0x90	; 144
    201a:	91 e0       	ldi	r25, 0x01	; 1
    201c:	9c 83       	std	Y+4, r25	; 0x04
    201e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	9c 81       	ldd	r25, Y+4	; 0x04
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	f1 f7       	brne	.-4      	; 0x2024 <KPD_u8GetPressedKey+0x144>
    2028:	9c 83       	std	Y+4, r25	; 0x04
    202a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    202c:	8d 81       	ldd	r24, Y+5	; 0x05
    202e:	9e 81       	ldd	r25, Y+6	; 0x06
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	9e 83       	std	Y+6, r25	; 0x06
    2034:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2036:	8d 81       	ldd	r24, Y+5	; 0x05
    2038:	9e 81       	ldd	r25, Y+6	; 0x06
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	69 f7       	brne	.-38     	; 0x2018 <KPD_u8GetPressedKey+0x138>
    203e:	14 c0       	rjmp	.+40     	; 0x2068 <KPD_u8GetPressedKey+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2040:	6f 81       	ldd	r22, Y+7	; 0x07
    2042:	78 85       	ldd	r23, Y+8	; 0x08
    2044:	89 85       	ldd	r24, Y+9	; 0x09
    2046:	9a 85       	ldd	r25, Y+10	; 0x0a
    2048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	9e 83       	std	Y+6, r25	; 0x06
    2052:	8d 83       	std	Y+5, r24	; 0x05
    2054:	8d 81       	ldd	r24, Y+5	; 0x05
    2056:	9e 81       	ldd	r25, Y+6	; 0x06
    2058:	9a 83       	std	Y+2, r25	; 0x02
    205a:	89 83       	std	Y+1, r24	; 0x01
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	9a 81       	ldd	r25, Y+2	; 0x02
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	f1 f7       	brne	.-4      	; 0x2060 <KPD_u8GetPressedKey+0x180>
    2064:	9a 83       	std	Y+2, r25	; 0x02
    2066:	89 83       	std	Y+1, r24	; 0x01
				{
					DIO_u8_GetPinValue(KPD_PORT, Local_u8RowArr[Local_u8RowIdx], &Local_u8PinState);
				}
				
				_delay_ms(10);  
				DIO_u8_SetPinValue(KPD_PORT, Local_u8ColumnArr[Local_u8ColumnIdx], DIO_u8PIN_HIGH);
    2068:	88 89       	ldd	r24, Y+16	; 0x10
    206a:	88 2f       	mov	r24, r24
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	fc 01       	movw	r30, r24
    2070:	eb 52       	subi	r30, 0x2B	; 43
    2072:	fe 4f       	sbci	r31, 0xFE	; 254
    2074:	90 81       	ld	r25, Z
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	69 2f       	mov	r22, r25
    207a:	41 e0       	ldi	r20, 0x01	; 1
    207c:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				return Local_u8PressedKey;
    2080:	89 89       	ldd	r24, Y+17	; 0x11
    2082:	8b 8b       	std	Y+19, r24	; 0x13
    2084:	1c c0       	rjmp	.+56     	; 0x20be <KPD_u8GetPressedKey+0x1de>
	
	for (Local_u8ColumnIdx = 0; Local_u8ColumnIdx < COLUMNS_NUM; Local_u8ColumnIdx++)
	{
		DIO_u8_SetPinValue(KPD_PORT, Local_u8ColumnArr[Local_u8ColumnIdx], DIO_u8PIN_LOW);
		
		for (Local_u8RowIdx = 0; Local_u8RowIdx < ROWS_NUM; Local_u8RowIdx++)
    2086:	8f 85       	ldd	r24, Y+15	; 0x0f
    2088:	8f 5f       	subi	r24, 0xFF	; 255
    208a:	8f 87       	std	Y+15, r24	; 0x0f
    208c:	8f 85       	ldd	r24, Y+15	; 0x0f
    208e:	82 30       	cpi	r24, 0x02	; 2
    2090:	08 f4       	brcc	.+2      	; 0x2094 <KPD_u8GetPressedKey+0x1b4>
    2092:	42 cf       	rjmp	.-380    	; 0x1f18 <KPD_u8GetPressedKey+0x38>
				DIO_u8_SetPinValue(KPD_PORT, Local_u8ColumnArr[Local_u8ColumnIdx], DIO_u8PIN_HIGH);
				return Local_u8PressedKey;
			}
		}
		
		DIO_u8_SetPinValue(KPD_PORT, Local_u8ColumnArr[Local_u8ColumnIdx], DIO_u8PIN_HIGH);
    2094:	88 89       	ldd	r24, Y+16	; 0x10
    2096:	88 2f       	mov	r24, r24
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	fc 01       	movw	r30, r24
    209c:	eb 52       	subi	r30, 0x2B	; 43
    209e:	fe 4f       	sbci	r31, 0xFE	; 254
    20a0:	90 81       	ld	r25, Z
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	69 2f       	mov	r22, r25
    20a6:	41 e0       	ldi	r20, 0x01	; 1
    20a8:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY, Local_u8ColumnIdx, Local_u8RowIdx, Local_u8PinState;
	static u8 Local_u8KPDArr[ROWS_NUM][COLUMNS_NUM] = KPD_ARR_VAL;
	static u8 Local_u8ColumnArr[COLUMNS_NUM] = {KPD_COLUMN0_PIN, KPD_COLUMN1_PIN};
	static u8 Local_u8RowArr[ROWS_NUM] = {KPD_ROW0_PIN, KPD_ROW1_PIN};
	
	for (Local_u8ColumnIdx = 0; Local_u8ColumnIdx < COLUMNS_NUM; Local_u8ColumnIdx++)
    20ac:	88 89       	ldd	r24, Y+16	; 0x10
    20ae:	8f 5f       	subi	r24, 0xFF	; 255
    20b0:	88 8b       	std	Y+16, r24	; 0x10
    20b2:	88 89       	ldd	r24, Y+16	; 0x10
    20b4:	82 30       	cpi	r24, 0x02	; 2
    20b6:	08 f4       	brcc	.+2      	; 0x20ba <KPD_u8GetPressedKey+0x1da>
    20b8:	21 cf       	rjmp	.-446    	; 0x1efc <KPD_u8GetPressedKey+0x1c>
		}
		
		DIO_u8_SetPinValue(KPD_PORT, Local_u8ColumnArr[Local_u8ColumnIdx], DIO_u8PIN_HIGH);
	}
	
	return Local_u8PressedKey;
    20ba:	89 89       	ldd	r24, Y+17	; 0x11
    20bc:	8b 8b       	std	Y+19, r24	; 0x13
    20be:	8b 89       	ldd	r24, Y+19	; 0x13
}
    20c0:	63 96       	adiw	r28, 0x13	; 19
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	f8 94       	cli
    20c6:	de bf       	out	0x3e, r29	; 62
    20c8:	0f be       	out	0x3f, r0	; 63
    20ca:	cd bf       	out	0x3d, r28	; 61
    20cc:	cf 91       	pop	r28
    20ce:	df 91       	pop	r29
    20d0:	08 95       	ret

000020d2 <CLCD_voidSendCommand>:
/**
 * @brief  Sends a command to the LCD.
 * @param  copy_u8command: The command to be sent to the LCD.
 */

void CLCD_voidSendCommand   (u8 copy_u8command){
    20d2:	df 93       	push	r29
    20d4:	cf 93       	push	r28
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
    20da:	2f 97       	sbiw	r28, 0x0f	; 15
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	f8 94       	cli
    20e0:	de bf       	out	0x3e, r29	; 62
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	cd bf       	out	0x3d, r28	; 61
    20e6:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_u8_SetPinValue(LCD_u8CLR_PORT,LCD_u8RW_PIN,DIO_u8PIN_LOW);  // Set RW pin to LOW (Write mode)
    20e8:	82 e0       	ldi	r24, 0x02	; 2
    20ea:	61 e0       	ldi	r22, 0x01	; 1
    20ec:	40 e0       	ldi	r20, 0x00	; 0
    20ee:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>

	DIO_u8_SetPinValue(LCD_u8CLR_PORT,LCD_u8RS_PIN,DIO_u8PIN_LOW);  // Set RS pin to LOW (Command mode)
    20f2:	82 e0       	ldi	r24, 0x02	; 2
    20f4:	60 e0       	ldi	r22, 0x00	; 0
    20f6:	40 e0       	ldi	r20, 0x00	; 0
    20f8:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>

	DIO_u8_SetPortValue(LCD_u8Data_PORT,copy_u8command);            // Send the command to the data port
    20fc:	83 e0       	ldi	r24, 0x03	; 3
    20fe:	6f 85       	ldd	r22, Y+15	; 0x0f
    2100:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <DIO_u8_SetPortValue>

	DIO_u8_SetPinValue(LCD_u8CLR_PORT,LCD_u8E_PIN,DIO_u8PIN_HIGH);  // Enable the E pin
    2104:	82 e0       	ldi	r24, 0x02	; 2
    2106:	62 e0       	ldi	r22, 0x02	; 2
    2108:	41 e0       	ldi	r20, 0x01	; 1
    210a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	a0 e0       	ldi	r26, 0x00	; 0
    2114:	b0 e4       	ldi	r27, 0x40	; 64
    2116:	8b 87       	std	Y+11, r24	; 0x0b
    2118:	9c 87       	std	Y+12, r25	; 0x0c
    211a:	ad 87       	std	Y+13, r26	; 0x0d
    211c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    211e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2120:	7c 85       	ldd	r23, Y+12	; 0x0c
    2122:	8d 85       	ldd	r24, Y+13	; 0x0d
    2124:	9e 85       	ldd	r25, Y+14	; 0x0e
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	4a e7       	ldi	r20, 0x7A	; 122
    212c:	55 e4       	ldi	r21, 0x45	; 69
    212e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	8f 83       	std	Y+7, r24	; 0x07
    2138:	98 87       	std	Y+8, r25	; 0x08
    213a:	a9 87       	std	Y+9, r26	; 0x09
    213c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    213e:	6f 81       	ldd	r22, Y+7	; 0x07
    2140:	78 85       	ldd	r23, Y+8	; 0x08
    2142:	89 85       	ldd	r24, Y+9	; 0x09
    2144:	9a 85       	ldd	r25, Y+10	; 0x0a
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	40 e8       	ldi	r20, 0x80	; 128
    214c:	5f e3       	ldi	r21, 0x3F	; 63
    214e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2152:	88 23       	and	r24, r24
    2154:	2c f4       	brge	.+10     	; 0x2160 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	9e 83       	std	Y+6, r25	; 0x06
    215c:	8d 83       	std	Y+5, r24	; 0x05
    215e:	3f c0       	rjmp	.+126    	; 0x21de <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    2160:	6f 81       	ldd	r22, Y+7	; 0x07
    2162:	78 85       	ldd	r23, Y+8	; 0x08
    2164:	89 85       	ldd	r24, Y+9	; 0x09
    2166:	9a 85       	ldd	r25, Y+10	; 0x0a
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	3f ef       	ldi	r19, 0xFF	; 255
    216c:	4f e7       	ldi	r20, 0x7F	; 127
    216e:	57 e4       	ldi	r21, 0x47	; 71
    2170:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2174:	18 16       	cp	r1, r24
    2176:	4c f5       	brge	.+82     	; 0x21ca <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2178:	6b 85       	ldd	r22, Y+11	; 0x0b
    217a:	7c 85       	ldd	r23, Y+12	; 0x0c
    217c:	8d 85       	ldd	r24, Y+13	; 0x0d
    217e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e2       	ldi	r20, 0x20	; 32
    2186:	51 e4       	ldi	r21, 0x41	; 65
    2188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	bc 01       	movw	r22, r24
    2192:	cd 01       	movw	r24, r26
    2194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	9e 83       	std	Y+6, r25	; 0x06
    219e:	8d 83       	std	Y+5, r24	; 0x05
    21a0:	0f c0       	rjmp	.+30     	; 0x21c0 <CLCD_voidSendCommand+0xee>
    21a2:	80 e9       	ldi	r24, 0x90	; 144
    21a4:	91 e0       	ldi	r25, 0x01	; 1
    21a6:	9c 83       	std	Y+4, r25	; 0x04
    21a8:	8b 83       	std	Y+3, r24	; 0x03
    21aa:	8b 81       	ldd	r24, Y+3	; 0x03
    21ac:	9c 81       	ldd	r25, Y+4	; 0x04
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	f1 f7       	brne	.-4      	; 0x21ae <CLCD_voidSendCommand+0xdc>
    21b2:	9c 83       	std	Y+4, r25	; 0x04
    21b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b6:	8d 81       	ldd	r24, Y+5	; 0x05
    21b8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ba:	01 97       	sbiw	r24, 0x01	; 1
    21bc:	9e 83       	std	Y+6, r25	; 0x06
    21be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c0:	8d 81       	ldd	r24, Y+5	; 0x05
    21c2:	9e 81       	ldd	r25, Y+6	; 0x06
    21c4:	00 97       	sbiw	r24, 0x00	; 0
    21c6:	69 f7       	brne	.-38     	; 0x21a2 <CLCD_voidSendCommand+0xd0>
    21c8:	14 c0       	rjmp	.+40     	; 0x21f2 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ca:	6f 81       	ldd	r22, Y+7	; 0x07
    21cc:	78 85       	ldd	r23, Y+8	; 0x08
    21ce:	89 85       	ldd	r24, Y+9	; 0x09
    21d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	9e 83       	std	Y+6, r25	; 0x06
    21dc:	8d 83       	std	Y+5, r24	; 0x05
    21de:	8d 81       	ldd	r24, Y+5	; 0x05
    21e0:	9e 81       	ldd	r25, Y+6	; 0x06
    21e2:	9a 83       	std	Y+2, r25	; 0x02
    21e4:	89 83       	std	Y+1, r24	; 0x01
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	f1 f7       	brne	.-4      	; 0x21ea <CLCD_voidSendCommand+0x118>
    21ee:	9a 83       	std	Y+2, r25	; 0x02
    21f0:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);                                                   // Delay to ensure command is processed

	DIO_u8_SetPinValue(LCD_u8CLR_PORT,LCD_u8E_PIN,DIO_u8PIN_LOW);    // Disable the E pin
    21f2:	82 e0       	ldi	r24, 0x02	; 2
    21f4:	62 e0       	ldi	r22, 0x02	; 2
    21f6:	40 e0       	ldi	r20, 0x00	; 0
    21f8:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
}
    21fc:	2f 96       	adiw	r28, 0x0f	; 15
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	f8 94       	cli
    2202:	de bf       	out	0x3e, r29	; 62
    2204:	0f be       	out	0x3f, r0	; 63
    2206:	cd bf       	out	0x3d, r28	; 61
    2208:	cf 91       	pop	r28
    220a:	df 91       	pop	r29
    220c:	08 95       	ret

0000220e <CLCD_voidSendData>:
/**
 * @brief  Sends data (a character) to the LCD.
 * @param  copy_u8data: The data (character) to be sent to the LCD.
 */

void CLCD_voidSendData  (u8 copy_u8data){
    220e:	df 93       	push	r29
    2210:	cf 93       	push	r28
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	2f 97       	sbiw	r28, 0x0f	; 15
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	f8 94       	cli
    221c:	de bf       	out	0x3e, r29	; 62
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	cd bf       	out	0x3d, r28	; 61
    2222:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_u8_SetPinValue(LCD_u8CLR_PORT,LCD_u8RW_PIN,DIO_u8PIN_LOW);   // Set RW pin to LOW (Write mode)
    2224:	82 e0       	ldi	r24, 0x02	; 2
    2226:	61 e0       	ldi	r22, 0x01	; 1
    2228:	40 e0       	ldi	r20, 0x00	; 0
    222a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>

	DIO_u8_SetPinValue(LCD_u8CLR_PORT,LCD_u8RS_PIN,DIO_u8PIN_HIGH);  // Set RS pin to HIGH (Data mode)
    222e:	82 e0       	ldi	r24, 0x02	; 2
    2230:	60 e0       	ldi	r22, 0x00	; 0
    2232:	41 e0       	ldi	r20, 0x01	; 1
    2234:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>

	DIO_u8_SetPortValue(LCD_u8Data_PORT,copy_u8data);                // Send the data to the data port
    2238:	83 e0       	ldi	r24, 0x03	; 3
    223a:	6f 85       	ldd	r22, Y+15	; 0x0f
    223c:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <DIO_u8_SetPortValue>

	DIO_u8_SetPinValue(LCD_u8CLR_PORT,LCD_u8E_PIN,DIO_u8PIN_HIGH);   // Enable the E pin
    2240:	82 e0       	ldi	r24, 0x02	; 2
    2242:	62 e0       	ldi	r22, 0x02	; 2
    2244:	41 e0       	ldi	r20, 0x01	; 1
    2246:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	a0 e0       	ldi	r26, 0x00	; 0
    2250:	b0 e4       	ldi	r27, 0x40	; 64
    2252:	8b 87       	std	Y+11, r24	; 0x0b
    2254:	9c 87       	std	Y+12, r25	; 0x0c
    2256:	ad 87       	std	Y+13, r26	; 0x0d
    2258:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    225a:	6b 85       	ldd	r22, Y+11	; 0x0b
    225c:	7c 85       	ldd	r23, Y+12	; 0x0c
    225e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2260:	9e 85       	ldd	r25, Y+14	; 0x0e
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	4a e7       	ldi	r20, 0x7A	; 122
    2268:	55 e4       	ldi	r21, 0x45	; 69
    226a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	8f 83       	std	Y+7, r24	; 0x07
    2274:	98 87       	std	Y+8, r25	; 0x08
    2276:	a9 87       	std	Y+9, r26	; 0x09
    2278:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    227a:	6f 81       	ldd	r22, Y+7	; 0x07
    227c:	78 85       	ldd	r23, Y+8	; 0x08
    227e:	89 85       	ldd	r24, Y+9	; 0x09
    2280:	9a 85       	ldd	r25, Y+10	; 0x0a
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	40 e8       	ldi	r20, 0x80	; 128
    2288:	5f e3       	ldi	r21, 0x3F	; 63
    228a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    228e:	88 23       	and	r24, r24
    2290:	2c f4       	brge	.+10     	; 0x229c <CLCD_voidSendData+0x8e>
		__ticks = 1;
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	9e 83       	std	Y+6, r25	; 0x06
    2298:	8d 83       	std	Y+5, r24	; 0x05
    229a:	3f c0       	rjmp	.+126    	; 0x231a <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    229c:	6f 81       	ldd	r22, Y+7	; 0x07
    229e:	78 85       	ldd	r23, Y+8	; 0x08
    22a0:	89 85       	ldd	r24, Y+9	; 0x09
    22a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	3f ef       	ldi	r19, 0xFF	; 255
    22a8:	4f e7       	ldi	r20, 0x7F	; 127
    22aa:	57 e4       	ldi	r21, 0x47	; 71
    22ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22b0:	18 16       	cp	r1, r24
    22b2:	4c f5       	brge	.+82     	; 0x2306 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	40 e2       	ldi	r20, 0x20	; 32
    22c2:	51 e4       	ldi	r21, 0x41	; 65
    22c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	bc 01       	movw	r22, r24
    22ce:	cd 01       	movw	r24, r26
    22d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	9e 83       	std	Y+6, r25	; 0x06
    22da:	8d 83       	std	Y+5, r24	; 0x05
    22dc:	0f c0       	rjmp	.+30     	; 0x22fc <CLCD_voidSendData+0xee>
    22de:	80 e9       	ldi	r24, 0x90	; 144
    22e0:	91 e0       	ldi	r25, 0x01	; 1
    22e2:	9c 83       	std	Y+4, r25	; 0x04
    22e4:	8b 83       	std	Y+3, r24	; 0x03
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	f1 f7       	brne	.-4      	; 0x22ea <CLCD_voidSendData+0xdc>
    22ee:	9c 83       	std	Y+4, r25	; 0x04
    22f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f2:	8d 81       	ldd	r24, Y+5	; 0x05
    22f4:	9e 81       	ldd	r25, Y+6	; 0x06
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	9e 83       	std	Y+6, r25	; 0x06
    22fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22fc:	8d 81       	ldd	r24, Y+5	; 0x05
    22fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	69 f7       	brne	.-38     	; 0x22de <CLCD_voidSendData+0xd0>
    2304:	14 c0       	rjmp	.+40     	; 0x232e <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2306:	6f 81       	ldd	r22, Y+7	; 0x07
    2308:	78 85       	ldd	r23, Y+8	; 0x08
    230a:	89 85       	ldd	r24, Y+9	; 0x09
    230c:	9a 85       	ldd	r25, Y+10	; 0x0a
    230e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	9e 83       	std	Y+6, r25	; 0x06
    2318:	8d 83       	std	Y+5, r24	; 0x05
    231a:	8d 81       	ldd	r24, Y+5	; 0x05
    231c:	9e 81       	ldd	r25, Y+6	; 0x06
    231e:	9a 83       	std	Y+2, r25	; 0x02
    2320:	89 83       	std	Y+1, r24	; 0x01
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	9a 81       	ldd	r25, Y+2	; 0x02
    2326:	01 97       	sbiw	r24, 0x01	; 1
    2328:	f1 f7       	brne	.-4      	; 0x2326 <CLCD_voidSendData+0x118>
    232a:	9a 83       	std	Y+2, r25	; 0x02
    232c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);                                                    // Delay to ensure command is processed

	DIO_u8_SetPinValue(LCD_u8CLR_PORT,LCD_u8E_PIN,DIO_u8PIN_LOW);    // Disable the E pin
    232e:	82 e0       	ldi	r24, 0x02	; 2
    2330:	62 e0       	ldi	r22, 0x02	; 2
    2332:	40 e0       	ldi	r20, 0x00	; 0
    2334:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
}
    2338:	2f 96       	adiw	r28, 0x0f	; 15
    233a:	0f b6       	in	r0, 0x3f	; 63
    233c:	f8 94       	cli
    233e:	de bf       	out	0x3e, r29	; 62
    2340:	0f be       	out	0x3f, r0	; 63
    2342:	cd bf       	out	0x3d, r28	; 61
    2344:	cf 91       	pop	r28
    2346:	df 91       	pop	r29
    2348:	08 95       	ret

0000234a <CLCD_voidInit>:
/**
 * @brief  Initializes the LCD.
 */


void CLCD_voidInit (void){
    234a:	df 93       	push	r29
    234c:	cf 93       	push	r28
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
    2352:	2e 97       	sbiw	r28, 0x0e	; 14
    2354:	0f b6       	in	r0, 0x3f	; 63
    2356:	f8 94       	cli
    2358:	de bf       	out	0x3e, r29	; 62
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	cd bf       	out	0x3d, r28	; 61

	DIO_u8_SetPortDirection(LCD_u8Data_PORT, DIO_u8PORT_OUTPUT);   // Set data port direction to output
    235e:	83 e0       	ldi	r24, 0x03	; 3
    2360:	6f ef       	ldi	r22, 0xFF	; 255
    2362:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_u8_SetPortDirection>
	DIO_u8_SetPortDirection(LCD_u8CLR_PORT, DIO_u8PORT_OUTPUT);   // Set control port direction to output
    2366:	82 e0       	ldi	r24, 0x02	; 2
    2368:	6f ef       	ldi	r22, 0xFF	; 255
    236a:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_u8_SetPortDirection>
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	a0 e2       	ldi	r26, 0x20	; 32
    2374:	b2 e4       	ldi	r27, 0x42	; 66
    2376:	8b 87       	std	Y+11, r24	; 0x0b
    2378:	9c 87       	std	Y+12, r25	; 0x0c
    237a:	ad 87       	std	Y+13, r26	; 0x0d
    237c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2380:	7c 85       	ldd	r23, Y+12	; 0x0c
    2382:	8d 85       	ldd	r24, Y+13	; 0x0d
    2384:	9e 85       	ldd	r25, Y+14	; 0x0e
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	4a e7       	ldi	r20, 0x7A	; 122
    238c:	55 e4       	ldi	r21, 0x45	; 69
    238e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	8f 83       	std	Y+7, r24	; 0x07
    2398:	98 87       	std	Y+8, r25	; 0x08
    239a:	a9 87       	std	Y+9, r26	; 0x09
    239c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    239e:	6f 81       	ldd	r22, Y+7	; 0x07
    23a0:	78 85       	ldd	r23, Y+8	; 0x08
    23a2:	89 85       	ldd	r24, Y+9	; 0x09
    23a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	40 e8       	ldi	r20, 0x80	; 128
    23ac:	5f e3       	ldi	r21, 0x3F	; 63
    23ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23b2:	88 23       	and	r24, r24
    23b4:	2c f4       	brge	.+10     	; 0x23c0 <CLCD_voidInit+0x76>
		__ticks = 1;
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	9e 83       	std	Y+6, r25	; 0x06
    23bc:	8d 83       	std	Y+5, r24	; 0x05
    23be:	3f c0       	rjmp	.+126    	; 0x243e <CLCD_voidInit+0xf4>
	else if (__tmp > 65535)
    23c0:	6f 81       	ldd	r22, Y+7	; 0x07
    23c2:	78 85       	ldd	r23, Y+8	; 0x08
    23c4:	89 85       	ldd	r24, Y+9	; 0x09
    23c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	3f ef       	ldi	r19, 0xFF	; 255
    23cc:	4f e7       	ldi	r20, 0x7F	; 127
    23ce:	57 e4       	ldi	r21, 0x47	; 71
    23d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23d4:	18 16       	cp	r1, r24
    23d6:	4c f5       	brge	.+82     	; 0x242a <CLCD_voidInit+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23da:	7c 85       	ldd	r23, Y+12	; 0x0c
    23dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23de:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e2       	ldi	r20, 0x20	; 32
    23e6:	51 e4       	ldi	r21, 0x41	; 65
    23e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	bc 01       	movw	r22, r24
    23f2:	cd 01       	movw	r24, r26
    23f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	9e 83       	std	Y+6, r25	; 0x06
    23fe:	8d 83       	std	Y+5, r24	; 0x05
    2400:	0f c0       	rjmp	.+30     	; 0x2420 <CLCD_voidInit+0xd6>
    2402:	80 e9       	ldi	r24, 0x90	; 144
    2404:	91 e0       	ldi	r25, 0x01	; 1
    2406:	9c 83       	std	Y+4, r25	; 0x04
    2408:	8b 83       	std	Y+3, r24	; 0x03
    240a:	8b 81       	ldd	r24, Y+3	; 0x03
    240c:	9c 81       	ldd	r25, Y+4	; 0x04
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	f1 f7       	brne	.-4      	; 0x240e <CLCD_voidInit+0xc4>
    2412:	9c 83       	std	Y+4, r25	; 0x04
    2414:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2416:	8d 81       	ldd	r24, Y+5	; 0x05
    2418:	9e 81       	ldd	r25, Y+6	; 0x06
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	9e 83       	std	Y+6, r25	; 0x06
    241e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2420:	8d 81       	ldd	r24, Y+5	; 0x05
    2422:	9e 81       	ldd	r25, Y+6	; 0x06
    2424:	00 97       	sbiw	r24, 0x00	; 0
    2426:	69 f7       	brne	.-38     	; 0x2402 <CLCD_voidInit+0xb8>
    2428:	14 c0       	rjmp	.+40     	; 0x2452 <CLCD_voidInit+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242a:	6f 81       	ldd	r22, Y+7	; 0x07
    242c:	78 85       	ldd	r23, Y+8	; 0x08
    242e:	89 85       	ldd	r24, Y+9	; 0x09
    2430:	9a 85       	ldd	r25, Y+10	; 0x0a
    2432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	9e 83       	std	Y+6, r25	; 0x06
    243c:	8d 83       	std	Y+5, r24	; 0x05
    243e:	8d 81       	ldd	r24, Y+5	; 0x05
    2440:	9e 81       	ldd	r25, Y+6	; 0x06
    2442:	9a 83       	std	Y+2, r25	; 0x02
    2444:	89 83       	std	Y+1, r24	; 0x01
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	9a 81       	ldd	r25, Y+2	; 0x02
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	f1 f7       	brne	.-4      	; 0x244a <CLCD_voidInit+0x100>
    244e:	9a 83       	std	Y+2, r25	; 0x02
    2450:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(40);  // Delay to allow LCD to stabilize after power on

	CLCD_voidSendCommand(0x38);      // Set LCD to 8-bit mode
    2452:	88 e3       	ldi	r24, 0x38	; 56
    2454:	0e 94 69 10 	call	0x20d2	; 0x20d2 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0x0C);     // Turn on the display and hide the cursor
    2458:	8c e0       	ldi	r24, 0x0C	; 12
    245a:	0e 94 69 10 	call	0x20d2	; 0x20d2 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0x01);    // Clear the display
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	0e 94 69 10 	call	0x20d2	; 0x20d2 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0x06);   // Set entry mode (increment address, no shift)
    2464:	86 e0       	ldi	r24, 0x06	; 6
    2466:	0e 94 69 10 	call	0x20d2	; 0x20d2 <CLCD_voidSendCommand>
}
    246a:	2e 96       	adiw	r28, 0x0e	; 14
    246c:	0f b6       	in	r0, 0x3f	; 63
    246e:	f8 94       	cli
    2470:	de bf       	out	0x3e, r29	; 62
    2472:	0f be       	out	0x3f, r0	; 63
    2474:	cd bf       	out	0x3d, r28	; 61
    2476:	cf 91       	pop	r28
    2478:	df 91       	pop	r29
    247a:	08 95       	ret

0000247c <CLCD_voidSendString>:
 * @brief  Displays a string on the LCD.
 * @param  Copy_pcString: Pointer to the string to be displayed.
 */


void CLCD_voidSendString   (const char* Copy_pcString){
    247c:	df 93       	push	r29
    247e:	cf 93       	push	r28
    2480:	00 d0       	rcall	.+0      	; 0x2482 <CLCD_voidSendString+0x6>
    2482:	0f 92       	push	r0
    2484:	cd b7       	in	r28, 0x3d	; 61
    2486:	de b7       	in	r29, 0x3e	; 62
    2488:	9b 83       	std	Y+3, r25	; 0x03
    248a:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter=0;
    248c:	19 82       	std	Y+1, r1	; 0x01
    248e:	0f c0       	rjmp	.+30     	; 0x24ae <CLCD_voidSendString+0x32>
	while(Copy_pcString[counter] != '\0'){
		CLCD_voidSendData(Copy_pcString[counter++]);
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	28 2f       	mov	r18, r24
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	8a 81       	ldd	r24, Y+2	; 0x02
    2498:	9b 81       	ldd	r25, Y+3	; 0x03
    249a:	fc 01       	movw	r30, r24
    249c:	e2 0f       	add	r30, r18
    249e:	f3 1f       	adc	r31, r19
    24a0:	90 81       	ld	r25, Z
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
    24a4:	8f 5f       	subi	r24, 0xFF	; 255
    24a6:	89 83       	std	Y+1, r24	; 0x01
    24a8:	89 2f       	mov	r24, r25
    24aa:	0e 94 07 11 	call	0x220e	; 0x220e <CLCD_voidSendData>
 */


void CLCD_voidSendString   (const char* Copy_pcString){
	u8 counter=0;
	while(Copy_pcString[counter] != '\0'){
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	28 2f       	mov	r18, r24
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	8a 81       	ldd	r24, Y+2	; 0x02
    24b6:	9b 81       	ldd	r25, Y+3	; 0x03
    24b8:	fc 01       	movw	r30, r24
    24ba:	e2 0f       	add	r30, r18
    24bc:	f3 1f       	adc	r31, r19
    24be:	80 81       	ld	r24, Z
    24c0:	88 23       	and	r24, r24
    24c2:	31 f7       	brne	.-52     	; 0x2490 <CLCD_voidSendString+0x14>
		CLCD_voidSendData(Copy_pcString[counter++]);
	}
}
    24c4:	0f 90       	pop	r0
    24c6:	0f 90       	pop	r0
    24c8:	0f 90       	pop	r0
    24ca:	cf 91       	pop	r28
    24cc:	df 91       	pop	r29
    24ce:	08 95       	ret

000024d0 <CLCD_voidGoToXY>:
 * @param  Xpos: The row position of the cursor.
 * @param  Ypos: The column position of the cursor.
 */


void CLCD_voidGoToXY       (u8 Xpos  , u8 Ypos ){
    24d0:	df 93       	push	r29
    24d2:	cf 93       	push	r28
    24d4:	00 d0       	rcall	.+0      	; 0x24d6 <CLCD_voidGoToXY+0x6>
    24d6:	0f 92       	push	r0
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	8a 83       	std	Y+2, r24	; 0x02
    24de:	6b 83       	std	Y+3, r22	; 0x03
	u8 add=0;
    24e0:	19 82       	std	Y+1, r1	; 0x01
	if(Xpos==0)
    24e2:	8a 81       	ldd	r24, Y+2	; 0x02
    24e4:	88 23       	and	r24, r24
    24e6:	19 f4       	brne	.+6      	; 0x24ee <CLCD_voidGoToXY+0x1e>
		add=Ypos;
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	89 83       	std	Y+1, r24	; 0x01
    24ec:	06 c0       	rjmp	.+12     	; 0x24fa <CLCD_voidGoToXY+0x2a>


	else if(Xpos==1)
    24ee:	8a 81       	ldd	r24, Y+2	; 0x02
    24f0:	81 30       	cpi	r24, 0x01	; 1
    24f2:	19 f4       	brne	.+6      	; 0x24fa <CLCD_voidGoToXY+0x2a>
		add=Ypos+ 0x40;
    24f4:	8b 81       	ldd	r24, Y+3	; 0x03
    24f6:	80 5c       	subi	r24, 0xC0	; 192
    24f8:	89 83       	std	Y+1, r24	; 0x01

	CLCD_voidSendCommand(add+128);   // Send command to move the cursor
    24fa:	89 81       	ldd	r24, Y+1	; 0x01
    24fc:	80 58       	subi	r24, 0x80	; 128
    24fe:	0e 94 69 10 	call	0x20d2	; 0x20d2 <CLCD_voidSendCommand>

}
    2502:	0f 90       	pop	r0
    2504:	0f 90       	pop	r0
    2506:	0f 90       	pop	r0
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	08 95       	ret

0000250e <CLCD_voidDisplaySpecialCharacter>:
 * @param  Copy_XPos: The row position to display the character.
 * @param  Copy_YPos: The column position to display the character.
 */


void CLCD_voidDisplaySpecialCharacter(u8* Copy_u8ArrayPtr, u8 Copy_u8BlockNum, u8 Copy_XPos, u8 Copy_YPos){
    250e:	df 93       	push	r29
    2510:	cf 93       	push	r28
    2512:	cd b7       	in	r28, 0x3d	; 61
    2514:	de b7       	in	r29, 0x3e	; 62
    2516:	27 97       	sbiw	r28, 0x07	; 7
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	f8 94       	cli
    251c:	de bf       	out	0x3e, r29	; 62
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	cd bf       	out	0x3d, r28	; 61
    2522:	9c 83       	std	Y+4, r25	; 0x04
    2524:	8b 83       	std	Y+3, r24	; 0x03
    2526:	6d 83       	std	Y+5, r22	; 0x05
    2528:	4e 83       	std	Y+6, r20	; 0x06
    252a:	2f 83       	std	Y+7, r18	; 0x07
	u8 add = 0;
    252c:	1a 82       	std	Y+2, r1	; 0x02
	add = 8 * Copy_u8BlockNum;           // Calculate address in CGRAM
    252e:	8d 81       	ldd	r24, Y+5	; 0x05
    2530:	88 2f       	mov	r24, r24
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	88 0f       	add	r24, r24
    2536:	99 1f       	adc	r25, r25
    2538:	88 0f       	add	r24, r24
    253a:	99 1f       	adc	r25, r25
    253c:	88 0f       	add	r24, r24
    253e:	99 1f       	adc	r25, r25
    2540:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendCommand(add + 64);      // Send command to set CGRAM address
    2542:	8a 81       	ldd	r24, Y+2	; 0x02
    2544:	80 5c       	subi	r24, 0xC0	; 192
    2546:	0e 94 69 10 	call	0x20d2	; 0x20d2 <CLCD_voidSendCommand>
	for (u8 Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++) {
    254a:	19 82       	std	Y+1, r1	; 0x01
    254c:	0e c0       	rjmp	.+28     	; 0x256a <CLCD_voidDisplaySpecialCharacter+0x5c>
		CLCD_voidSendData(Copy_u8ArrayPtr[Local_u8Counter]); // Send custom character data
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	28 2f       	mov	r18, r24
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	8b 81       	ldd	r24, Y+3	; 0x03
    2556:	9c 81       	ldd	r25, Y+4	; 0x04
    2558:	fc 01       	movw	r30, r24
    255a:	e2 0f       	add	r30, r18
    255c:	f3 1f       	adc	r31, r19
    255e:	80 81       	ld	r24, Z
    2560:	0e 94 07 11 	call	0x220e	; 0x220e <CLCD_voidSendData>

void CLCD_voidDisplaySpecialCharacter(u8* Copy_u8ArrayPtr, u8 Copy_u8BlockNum, u8 Copy_XPos, u8 Copy_YPos){
	u8 add = 0;
	add = 8 * Copy_u8BlockNum;           // Calculate address in CGRAM
	CLCD_voidSendCommand(add + 64);      // Send command to set CGRAM address
	for (u8 Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++) {
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	8f 5f       	subi	r24, 0xFF	; 255
    2568:	89 83       	std	Y+1, r24	; 0x01
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	88 30       	cpi	r24, 0x08	; 8
    256e:	78 f3       	brcs	.-34     	; 0x254e <CLCD_voidDisplaySpecialCharacter+0x40>
		CLCD_voidSendData(Copy_u8ArrayPtr[Local_u8Counter]); // Send custom character data
	}
	CLCD_voidGoToXY(Copy_XPos, Copy_YPos);  // Move cursor to specified position
    2570:	8e 81       	ldd	r24, Y+6	; 0x06
    2572:	6f 81       	ldd	r22, Y+7	; 0x07
    2574:	0e 94 68 12 	call	0x24d0	; 0x24d0 <CLCD_voidGoToXY>
	CLCD_voidSendData(Copy_u8BlockNum);     // Display the custom character
    2578:	8d 81       	ldd	r24, Y+5	; 0x05
    257a:	0e 94 07 11 	call	0x220e	; 0x220e <CLCD_voidSendData>

}
    257e:	27 96       	adiw	r28, 0x07	; 7
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	f8 94       	cli
    2584:	de bf       	out	0x3e, r29	; 62
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	cd bf       	out	0x3d, r28	; 61
    258a:	cf 91       	pop	r28
    258c:	df 91       	pop	r29
    258e:	08 95       	ret

00002590 <CLCD_voidDisplayNumber>:
 * @brief  Displays a number on the LCD.
 * @param  Copy_u32Number: The number to be displayed.
 */


void CLCD_voidDisplayNumber(u32 Copy_u32Number) {
    2590:	0f 93       	push	r16
    2592:	1f 93       	push	r17
    2594:	df 93       	push	r29
    2596:	cf 93       	push	r28
    2598:	cd b7       	in	r28, 0x3d	; 61
    259a:	de b7       	in	r29, 0x3e	; 62
    259c:	61 97       	sbiw	r28, 0x11	; 17
    259e:	0f b6       	in	r0, 0x3f	; 63
    25a0:	f8 94       	cli
    25a2:	de bf       	out	0x3e, r29	; 62
    25a4:	0f be       	out	0x3f, r0	; 63
    25a6:	cd bf       	out	0x3d, r28	; 61
    25a8:	6e 87       	std	Y+14, r22	; 0x0e
    25aa:	7f 87       	std	Y+15, r23	; 0x0f
    25ac:	88 8b       	std	Y+16, r24	; 0x10
    25ae:	99 8b       	std	Y+17, r25	; 0x11
    char str[11];  // Max 10 digits for 32-bit number + 1 for null terminator
    u8 i = 0;
    25b0:	1a 82       	std	Y+2, r1	; 0x02

    // Special case for 0
    if (Copy_u32Number == 0) {
    25b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    25b4:	9f 85       	ldd	r25, Y+15	; 0x0f
    25b6:	a8 89       	ldd	r26, Y+16	; 0x10
    25b8:	b9 89       	ldd	r27, Y+17	; 0x11
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	a1 05       	cpc	r26, r1
    25be:	b1 05       	cpc	r27, r1
    25c0:	91 f5       	brne	.+100    	; 0x2626 <CLCD_voidDisplayNumber+0x96>
        CLCD_voidSendData('0');
    25c2:	80 e3       	ldi	r24, 0x30	; 48
    25c4:	0e 94 07 11 	call	0x220e	; 0x220e <CLCD_voidSendData>
    25c8:	4d c0       	rjmp	.+154    	; 0x2664 <CLCD_voidDisplayNumber+0xd4>
        return;
    }

    // Convert number to characters by extracting digits
    while (Copy_u32Number > 0) {
        str[i++] = (Copy_u32Number % 10) + '0';  // Get last digit, convert to char
    25ca:	8a 81       	ldd	r24, Y+2	; 0x02
    25cc:	08 2f       	mov	r16, r24
    25ce:	10 e0       	ldi	r17, 0x00	; 0
    25d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    25d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    25d4:	a8 89       	ldd	r26, Y+16	; 0x10
    25d6:	b9 89       	ldd	r27, Y+17	; 0x11
    25d8:	2a e0       	ldi	r18, 0x0A	; 10
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	40 e0       	ldi	r20, 0x00	; 0
    25de:	50 e0       	ldi	r21, 0x00	; 0
    25e0:	bc 01       	movw	r22, r24
    25e2:	cd 01       	movw	r24, r26
    25e4:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <__udivmodsi4>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	28 2f       	mov	r18, r24
    25ee:	20 5d       	subi	r18, 0xD0	; 208
    25f0:	ce 01       	movw	r24, r28
    25f2:	03 96       	adiw	r24, 0x03	; 3
    25f4:	fc 01       	movw	r30, r24
    25f6:	e0 0f       	add	r30, r16
    25f8:	f1 1f       	adc	r31, r17
    25fa:	20 83       	st	Z, r18
    25fc:	8a 81       	ldd	r24, Y+2	; 0x02
    25fe:	8f 5f       	subi	r24, 0xFF	; 255
    2600:	8a 83       	std	Y+2, r24	; 0x02
        Copy_u32Number /= 10;  // Remove last digit
    2602:	8e 85       	ldd	r24, Y+14	; 0x0e
    2604:	9f 85       	ldd	r25, Y+15	; 0x0f
    2606:	a8 89       	ldd	r26, Y+16	; 0x10
    2608:	b9 89       	ldd	r27, Y+17	; 0x11
    260a:	2a e0       	ldi	r18, 0x0A	; 10
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	40 e0       	ldi	r20, 0x00	; 0
    2610:	50 e0       	ldi	r21, 0x00	; 0
    2612:	bc 01       	movw	r22, r24
    2614:	cd 01       	movw	r24, r26
    2616:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <__udivmodsi4>
    261a:	da 01       	movw	r26, r20
    261c:	c9 01       	movw	r24, r18
    261e:	8e 87       	std	Y+14, r24	; 0x0e
    2620:	9f 87       	std	Y+15, r25	; 0x0f
    2622:	a8 8b       	std	Y+16, r26	; 0x10
    2624:	b9 8b       	std	Y+17, r27	; 0x11
        CLCD_voidSendData('0');
        return;
    }

    // Convert number to characters by extracting digits
    while (Copy_u32Number > 0) {
    2626:	8e 85       	ldd	r24, Y+14	; 0x0e
    2628:	9f 85       	ldd	r25, Y+15	; 0x0f
    262a:	a8 89       	ldd	r26, Y+16	; 0x10
    262c:	b9 89       	ldd	r27, Y+17	; 0x11
    262e:	00 97       	sbiw	r24, 0x00	; 0
    2630:	a1 05       	cpc	r26, r1
    2632:	b1 05       	cpc	r27, r1
    2634:	51 f6       	brne	.-108    	; 0x25ca <CLCD_voidDisplayNumber+0x3a>
        str[i++] = (Copy_u32Number % 10) + '0';  // Get last digit, convert to char
        Copy_u32Number /= 10;  // Remove last digit
    }

    // Display the digits in reverse order
    for (u8 j = i; j > 0; j--) {
    2636:	8a 81       	ldd	r24, Y+2	; 0x02
    2638:	89 83       	std	Y+1, r24	; 0x01
    263a:	11 c0       	rjmp	.+34     	; 0x265e <CLCD_voidDisplayNumber+0xce>
        CLCD_voidSendData(str[j - 1]);  // Send each digit to LCD
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	88 2f       	mov	r24, r24
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	9c 01       	movw	r18, r24
    2644:	21 50       	subi	r18, 0x01	; 1
    2646:	30 40       	sbci	r19, 0x00	; 0
    2648:	ce 01       	movw	r24, r28
    264a:	03 96       	adiw	r24, 0x03	; 3
    264c:	fc 01       	movw	r30, r24
    264e:	e2 0f       	add	r30, r18
    2650:	f3 1f       	adc	r31, r19
    2652:	80 81       	ld	r24, Z
    2654:	0e 94 07 11 	call	0x220e	; 0x220e <CLCD_voidSendData>
        str[i++] = (Copy_u32Number % 10) + '0';  // Get last digit, convert to char
        Copy_u32Number /= 10;  // Remove last digit
    }

    // Display the digits in reverse order
    for (u8 j = i; j > 0; j--) {
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	81 50       	subi	r24, 0x01	; 1
    265c:	89 83       	std	Y+1, r24	; 0x01
    265e:	89 81       	ldd	r24, Y+1	; 0x01
    2660:	88 23       	and	r24, r24
    2662:	61 f7       	brne	.-40     	; 0x263c <CLCD_voidDisplayNumber+0xac>
        CLCD_voidSendData(str[j - 1]);  // Send each digit to LCD
    }
}
    2664:	61 96       	adiw	r28, 0x11	; 17
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	f8 94       	cli
    266a:	de bf       	out	0x3e, r29	; 62
    266c:	0f be       	out	0x3f, r0	; 63
    266e:	cd bf       	out	0x3d, r28	; 61
    2670:	cf 91       	pop	r28
    2672:	df 91       	pop	r29
    2674:	1f 91       	pop	r17
    2676:	0f 91       	pop	r16
    2678:	08 95       	ret

0000267a <CLCD_voidClearScreen>:


void CLCD_voidClearScreen(void)
{
    267a:	df 93       	push	r29
    267c:	cf 93       	push	r28
    267e:	cd b7       	in	r28, 0x3d	; 61
    2680:	de b7       	in	r29, 0x3e	; 62
	/*clear the first row*/
	CLCD_voidGoToXY(0,0);
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	60 e0       	ldi	r22, 0x00	; 0
    2686:	0e 94 68 12 	call	0x24d0	; 0x24d0 <CLCD_voidGoToXY>
	CLCD_voidSendString("                ");
    268a:	80 e6       	ldi	r24, 0x60	; 96
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	0e 94 3e 12 	call	0x247c	; 0x247c <CLCD_voidSendString>
	/*clear the second row*/
	CLCD_voidGoToXY(1,0);
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	60 e0       	ldi	r22, 0x00	; 0
    2696:	0e 94 68 12 	call	0x24d0	; 0x24d0 <CLCD_voidGoToXY>
	CLCD_voidSendString("                ");
    269a:	80 e6       	ldi	r24, 0x60	; 96
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	0e 94 3e 12 	call	0x247c	; 0x247c <CLCD_voidSendString>
	/*Return to the start*/
	CLCD_voidGoToXY(0,0);
    26a2:	80 e0       	ldi	r24, 0x00	; 0
    26a4:	60 e0       	ldi	r22, 0x00	; 0
    26a6:	0e 94 68 12 	call	0x24d0	; 0x24d0 <CLCD_voidGoToXY>
}
    26aa:	cf 91       	pop	r28
    26ac:	df 91       	pop	r29
    26ae:	08 95       	ret

000026b0 <LDR_VoidInit>:
#include "LDR_cfg.h"
#include "LDR_prv.h"


void LDR_VoidInit(void)
{
    26b0:	df 93       	push	r29
    26b2:	cf 93       	push	r28
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
	ADC_voidInit();
    26b8:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_voidInit>
}
    26bc:	cf 91       	pop	r28
    26be:	df 91       	pop	r29
    26c0:	08 95       	ret

000026c2 <LDR_u16GetResistanceFrom8BitADC>:


u16 LDR_u16GetResistanceFrom8BitADC(u16 Copy_u16Adc_Res)
{
    26c2:	df 93       	push	r29
    26c4:	cf 93       	push	r28
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
    26ca:	28 97       	sbiw	r28, 0x08	; 8
    26cc:	0f b6       	in	r0, 0x3f	; 63
    26ce:	f8 94       	cli
    26d0:	de bf       	out	0x3e, r29	; 62
    26d2:	0f be       	out	0x3f, r0	; 63
    26d4:	cd bf       	out	0x3d, r28	; 61
    26d6:	98 87       	std	Y+8, r25	; 0x08
    26d8:	8f 83       	std	Y+7, r24	; 0x07
	f32 Local_f32Get_Voltage = 0;
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	a0 e0       	ldi	r26, 0x00	; 0
    26e0:	b0 e0       	ldi	r27, 0x00	; 0
    26e2:	8b 83       	std	Y+3, r24	; 0x03
    26e4:	9c 83       	std	Y+4, r25	; 0x04
    26e6:	ad 83       	std	Y+5, r26	; 0x05
    26e8:	be 83       	std	Y+6, r27	; 0x06
	u16 Local_u16Ldr_Res  = 0;
    26ea:	1a 82       	std	Y+2, r1	; 0x02
    26ec:	19 82       	std	Y+1, r1	; 0x01


	// Convert ADC digital result to voltage (assuming an 8-bit ADC, max value = 255)
	Local_f32Get_Voltage = ((float)Copy_u16Adc_Res / 255.0) * VREF;
    26ee:	8f 81       	ldd	r24, Y+7	; 0x07
    26f0:	98 85       	ldd	r25, Y+8	; 0x08
    26f2:	cc 01       	movw	r24, r24
    26f4:	a0 e0       	ldi	r26, 0x00	; 0
    26f6:	b0 e0       	ldi	r27, 0x00	; 0
    26f8:	bc 01       	movw	r22, r24
    26fa:	cd 01       	movw	r24, r26
    26fc:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	bc 01       	movw	r22, r24
    2706:	cd 01       	movw	r24, r26
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	4f e7       	ldi	r20, 0x7F	; 127
    270e:	53 e4       	ldi	r21, 0x43	; 67
    2710:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	bc 01       	movw	r22, r24
    271a:	cd 01       	movw	r24, r26
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 ea       	ldi	r20, 0xA0	; 160
    2722:	50 e4       	ldi	r21, 0x40	; 64
    2724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	8b 83       	std	Y+3, r24	; 0x03
    272e:	9c 83       	std	Y+4, r25	; 0x04
    2730:	ad 83       	std	Y+5, r26	; 0x05
    2732:	be 83       	std	Y+6, r27	; 0x06

	if (Local_f32Get_Voltage > 0 && Local_f32Get_Voltage < VREF)
    2734:	6b 81       	ldd	r22, Y+3	; 0x03
    2736:	7c 81       	ldd	r23, Y+4	; 0x04
    2738:	8d 81       	ldd	r24, Y+5	; 0x05
    273a:	9e 81       	ldd	r25, Y+6	; 0x06
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	40 e0       	ldi	r20, 0x00	; 0
    2742:	50 e0       	ldi	r21, 0x00	; 0
    2744:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2748:	18 16       	cp	r1, r24
    274a:	a4 f5       	brge	.+104    	; 0x27b4 <LDR_u16GetResistanceFrom8BitADC+0xf2>
    274c:	6b 81       	ldd	r22, Y+3	; 0x03
    274e:	7c 81       	ldd	r23, Y+4	; 0x04
    2750:	8d 81       	ldd	r24, Y+5	; 0x05
    2752:	9e 81       	ldd	r25, Y+6	; 0x06
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 ea       	ldi	r20, 0xA0	; 160
    275a:	50 e4       	ldi	r21, 0x40	; 64
    275c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2760:	88 23       	and	r24, r24
    2762:	44 f5       	brge	.+80     	; 0x27b4 <LDR_u16GetResistanceFrom8BitADC+0xf2>
	{
		// Use voltage divider formula to calculate LDR resistance
		Local_u16Ldr_Res = (u16)((R_FIXED * (VREF - Local_f32Get_Voltage)) / Local_f32Get_Voltage);
    2764:	60 e0       	ldi	r22, 0x00	; 0
    2766:	70 e0       	ldi	r23, 0x00	; 0
    2768:	80 ea       	ldi	r24, 0xA0	; 160
    276a:	90 e4       	ldi	r25, 0x40	; 64
    276c:	2b 81       	ldd	r18, Y+3	; 0x03
    276e:	3c 81       	ldd	r19, Y+4	; 0x04
    2770:	4d 81       	ldd	r20, Y+5	; 0x05
    2772:	5e 81       	ldd	r21, Y+6	; 0x06
    2774:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	bc 01       	movw	r22, r24
    277e:	cd 01       	movw	r24, r26
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	45 ea       	ldi	r20, 0xA5	; 165
    2786:	53 e4       	ldi	r21, 0x43	; 67
    2788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	bc 01       	movw	r22, r24
    2792:	cd 01       	movw	r24, r26
    2794:	2b 81       	ldd	r18, Y+3	; 0x03
    2796:	3c 81       	ldd	r19, Y+4	; 0x04
    2798:	4d 81       	ldd	r20, Y+5	; 0x05
    279a:	5e 81       	ldd	r21, Y+6	; 0x06
    279c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	bc 01       	movw	r22, r24
    27a6:	cd 01       	movw	r24, r26
    27a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	9a 83       	std	Y+2, r25	; 0x02
    27b2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u16Ldr_Res;
    27b4:	89 81       	ldd	r24, Y+1	; 0x01
    27b6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    27b8:	28 96       	adiw	r28, 0x08	; 8
    27ba:	0f b6       	in	r0, 0x3f	; 63
    27bc:	f8 94       	cli
    27be:	de bf       	out	0x3e, r29	; 62
    27c0:	0f be       	out	0x3f, r0	; 63
    27c2:	cd bf       	out	0x3d, r28	; 61
    27c4:	cf 91       	pop	r28
    27c6:	df 91       	pop	r29
    27c8:	08 95       	ret

000027ca <LDR_u16GetResistanceFrom10BitADC>:


u16 LDR_u16GetResistanceFrom10BitADC(u16 Copy_u16Adc_Res)
{
    27ca:	df 93       	push	r29
    27cc:	cf 93       	push	r28
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
    27d2:	28 97       	sbiw	r28, 0x08	; 8
    27d4:	0f b6       	in	r0, 0x3f	; 63
    27d6:	f8 94       	cli
    27d8:	de bf       	out	0x3e, r29	; 62
    27da:	0f be       	out	0x3f, r0	; 63
    27dc:	cd bf       	out	0x3d, r28	; 61
    27de:	98 87       	std	Y+8, r25	; 0x08
    27e0:	8f 83       	std	Y+7, r24	; 0x07
	f32 Local_f32Get_Voltage = 0;
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	a0 e0       	ldi	r26, 0x00	; 0
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	8b 83       	std	Y+3, r24	; 0x03
    27ec:	9c 83       	std	Y+4, r25	; 0x04
    27ee:	ad 83       	std	Y+5, r26	; 0x05
    27f0:	be 83       	std	Y+6, r27	; 0x06
	u16 Local_u16Ldr_Res  = 0;
    27f2:	1a 82       	std	Y+2, r1	; 0x02
    27f4:	19 82       	std	Y+1, r1	; 0x01


	// Convert ADC digital result to voltage (assuming a 10-bit ADC, max value = 1023)
	Local_f32Get_Voltage = ((float)Copy_u16Adc_Res / 1023.0) * VREF;
    27f6:	8f 81       	ldd	r24, Y+7	; 0x07
    27f8:	98 85       	ldd	r25, Y+8	; 0x08
    27fa:	cc 01       	movw	r24, r24
    27fc:	a0 e0       	ldi	r26, 0x00	; 0
    27fe:	b0 e0       	ldi	r27, 0x00	; 0
    2800:	bc 01       	movw	r22, r24
    2802:	cd 01       	movw	r24, r26
    2804:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	bc 01       	movw	r22, r24
    280e:	cd 01       	movw	r24, r26
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 ec       	ldi	r19, 0xC0	; 192
    2814:	4f e7       	ldi	r20, 0x7F	; 127
    2816:	54 e4       	ldi	r21, 0x44	; 68
    2818:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	bc 01       	movw	r22, r24
    2822:	cd 01       	movw	r24, r26
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	40 ea       	ldi	r20, 0xA0	; 160
    282a:	50 e4       	ldi	r21, 0x40	; 64
    282c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	8b 83       	std	Y+3, r24	; 0x03
    2836:	9c 83       	std	Y+4, r25	; 0x04
    2838:	ad 83       	std	Y+5, r26	; 0x05
    283a:	be 83       	std	Y+6, r27	; 0x06

	// Ensure voltage is not zero to avoid division by zero
	if (Local_f32Get_Voltage > 0 && Local_f32Get_Voltage < VREF)
    283c:	6b 81       	ldd	r22, Y+3	; 0x03
    283e:	7c 81       	ldd	r23, Y+4	; 0x04
    2840:	8d 81       	ldd	r24, Y+5	; 0x05
    2842:	9e 81       	ldd	r25, Y+6	; 0x06
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	40 e0       	ldi	r20, 0x00	; 0
    284a:	50 e0       	ldi	r21, 0x00	; 0
    284c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2850:	18 16       	cp	r1, r24
    2852:	a4 f5       	brge	.+104    	; 0x28bc <LDR_u16GetResistanceFrom10BitADC+0xf2>
    2854:	6b 81       	ldd	r22, Y+3	; 0x03
    2856:	7c 81       	ldd	r23, Y+4	; 0x04
    2858:	8d 81       	ldd	r24, Y+5	; 0x05
    285a:	9e 81       	ldd	r25, Y+6	; 0x06
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	40 ea       	ldi	r20, 0xA0	; 160
    2862:	50 e4       	ldi	r21, 0x40	; 64
    2864:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2868:	88 23       	and	r24, r24
    286a:	44 f5       	brge	.+80     	; 0x28bc <LDR_u16GetResistanceFrom10BitADC+0xf2>
	{
		// Use voltage divider formula to calculate LDR resistance
		Local_u16Ldr_Res = (u16)((R_FIXED * (VREF - Local_f32Get_Voltage)) / Local_f32Get_Voltage);
    286c:	60 e0       	ldi	r22, 0x00	; 0
    286e:	70 e0       	ldi	r23, 0x00	; 0
    2870:	80 ea       	ldi	r24, 0xA0	; 160
    2872:	90 e4       	ldi	r25, 0x40	; 64
    2874:	2b 81       	ldd	r18, Y+3	; 0x03
    2876:	3c 81       	ldd	r19, Y+4	; 0x04
    2878:	4d 81       	ldd	r20, Y+5	; 0x05
    287a:	5e 81       	ldd	r21, Y+6	; 0x06
    287c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	bc 01       	movw	r22, r24
    2886:	cd 01       	movw	r24, r26
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	45 ea       	ldi	r20, 0xA5	; 165
    288e:	53 e4       	ldi	r21, 0x43	; 67
    2890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	bc 01       	movw	r22, r24
    289a:	cd 01       	movw	r24, r26
    289c:	2b 81       	ldd	r18, Y+3	; 0x03
    289e:	3c 81       	ldd	r19, Y+4	; 0x04
    28a0:	4d 81       	ldd	r20, Y+5	; 0x05
    28a2:	5e 81       	ldd	r21, Y+6	; 0x06
    28a4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	bc 01       	movw	r22, r24
    28ae:	cd 01       	movw	r24, r26
    28b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	9a 83       	std	Y+2, r25	; 0x02
    28ba:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u16Ldr_Res;
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	9a 81       	ldd	r25, Y+2	; 0x02
}
    28c0:	28 96       	adiw	r28, 0x08	; 8
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	f8 94       	cli
    28c6:	de bf       	out	0x3e, r29	; 62
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	cd bf       	out	0x3d, r28	; 61
    28cc:	cf 91       	pop	r28
    28ce:	df 91       	pop	r29
    28d0:	08 95       	ret

000028d2 <LED_voidInit>:
#include "DIO_interface.h"
#include  "BIT_math.h"
#include  "STD_types.h"
#include  "LED_interface.h"

void LED_voidInit   (LED_T led )   {
    28d2:	df 93       	push	r29
    28d4:	cf 93       	push	r28
    28d6:	00 d0       	rcall	.+0      	; 0x28d8 <LED_voidInit+0x6>
    28d8:	0f 92       	push	r0
    28da:	cd b7       	in	r28, 0x3d	; 61
    28dc:	de b7       	in	r29, 0x3e	; 62
    28de:	69 83       	std	Y+1, r22	; 0x01
    28e0:	7a 83       	std	Y+2, r23	; 0x02
    28e2:	8b 83       	std	Y+3, r24	; 0x03
	 DIO_u8_SetPinDirection(led.port, led.pin, DIO_u8PIN_OUTPUT);
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	9a 81       	ldd	r25, Y+2	; 0x02
    28e8:	69 2f       	mov	r22, r25
    28ea:	41 e0       	ldi	r20, 0x01	; 1
    28ec:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8_SetPinDirection>
}
    28f0:	0f 90       	pop	r0
    28f2:	0f 90       	pop	r0
    28f4:	0f 90       	pop	r0
    28f6:	cf 91       	pop	r28
    28f8:	df 91       	pop	r29
    28fa:	08 95       	ret

000028fc <LED_voidOn>:
void LED_voidOn (LED_T led )  {
    28fc:	df 93       	push	r29
    28fe:	cf 93       	push	r28
    2900:	00 d0       	rcall	.+0      	; 0x2902 <LED_voidOn+0x6>
    2902:	0f 92       	push	r0
    2904:	cd b7       	in	r28, 0x3d	; 61
    2906:	de b7       	in	r29, 0x3e	; 62
    2908:	69 83       	std	Y+1, r22	; 0x01
    290a:	7a 83       	std	Y+2, r23	; 0x02
    290c:	8b 83       	std	Y+3, r24	; 0x03
	if(led.Active_State==Active_High){
    290e:	8b 81       	ldd	r24, Y+3	; 0x03
    2910:	81 30       	cpi	r24, 0x01	; 1
    2912:	39 f4       	brne	.+14     	; 0x2922 <LED_voidOn+0x26>
		 DIO_u8_SetPinValue(led.port, led.pin, DIO_u8PIN_HIGH);
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	9a 81       	ldd	r25, Y+2	; 0x02
    2918:	69 2f       	mov	r22, r25
    291a:	41 e0       	ldi	r20, 0x01	; 1
    291c:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    2920:	09 c0       	rjmp	.+18     	; 0x2934 <LED_voidOn+0x38>
	}
	else if(led.Active_State==Active_LOW){
    2922:	8b 81       	ldd	r24, Y+3	; 0x03
    2924:	88 23       	and	r24, r24
    2926:	31 f4       	brne	.+12     	; 0x2934 <LED_voidOn+0x38>
		DIO_u8_SetPinValue(led.port,led.pin,DIO_u8PIN_LOW);
    2928:	89 81       	ldd	r24, Y+1	; 0x01
    292a:	9a 81       	ldd	r25, Y+2	; 0x02
    292c:	69 2f       	mov	r22, r25
    292e:	40 e0       	ldi	r20, 0x00	; 0
    2930:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
	}
	
}
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	cf 91       	pop	r28
    293c:	df 91       	pop	r29
    293e:	08 95       	ret

00002940 <LED_voidOff>:
void LED_voidOff (LED_T led )  {
    2940:	df 93       	push	r29
    2942:	cf 93       	push	r28
    2944:	00 d0       	rcall	.+0      	; 0x2946 <LED_voidOff+0x6>
    2946:	0f 92       	push	r0
    2948:	cd b7       	in	r28, 0x3d	; 61
    294a:	de b7       	in	r29, 0x3e	; 62
    294c:	69 83       	std	Y+1, r22	; 0x01
    294e:	7a 83       	std	Y+2, r23	; 0x02
    2950:	8b 83       	std	Y+3, r24	; 0x03
	if(led.Active_State==Active_High){
    2952:	8b 81       	ldd	r24, Y+3	; 0x03
    2954:	81 30       	cpi	r24, 0x01	; 1
    2956:	39 f4       	brne	.+14     	; 0x2966 <LED_voidOff+0x26>
		DIO_u8_SetPinValue(led.port,led.pin,DIO_u8PIN_LOW);
    2958:	89 81       	ldd	r24, Y+1	; 0x01
    295a:	9a 81       	ldd	r25, Y+2	; 0x02
    295c:	69 2f       	mov	r22, r25
    295e:	40 e0       	ldi	r20, 0x00	; 0
    2960:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    2964:	09 c0       	rjmp	.+18     	; 0x2978 <LED_voidOff+0x38>
	}
	else if(led.Active_State==Active_LOW){
    2966:	8b 81       	ldd	r24, Y+3	; 0x03
    2968:	88 23       	and	r24, r24
    296a:	31 f4       	brne	.+12     	; 0x2978 <LED_voidOff+0x38>
		DIO_u8_SetPinValue(led.port,led.pin,DIO_u8PIN_HIGH);
    296c:	89 81       	ldd	r24, Y+1	; 0x01
    296e:	9a 81       	ldd	r25, Y+2	; 0x02
    2970:	69 2f       	mov	r22, r25
    2972:	41 e0       	ldi	r20, 0x01	; 1
    2974:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
	}
	
}
    2978:	0f 90       	pop	r0
    297a:	0f 90       	pop	r0
    297c:	0f 90       	pop	r0
    297e:	cf 91       	pop	r28
    2980:	df 91       	pop	r29
    2982:	08 95       	ret

00002984 <LM35_getTemperature>:
#include "LM35_interface.h"
#include "ADC_interface.h"
#include "map.h"

u8 LM35_getTemperature(ADC_info* Copy_component , u16 Dig_Temp , u16* Result)
{
    2984:	af 92       	push	r10
    2986:	bf 92       	push	r11
    2988:	cf 92       	push	r12
    298a:	df 92       	push	r13
    298c:	ef 92       	push	r14
    298e:	ff 92       	push	r15
    2990:	0f 93       	push	r16
    2992:	1f 93       	push	r17
    2994:	df 93       	push	r29
    2996:	cf 93       	push	r28
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
    299c:	27 97       	sbiw	r28, 0x07	; 7
    299e:	0f b6       	in	r0, 0x3f	; 63
    29a0:	f8 94       	cli
    29a2:	de bf       	out	0x3e, r29	; 62
    29a4:	0f be       	out	0x3f, r0	; 63
    29a6:	cd bf       	out	0x3d, r28	; 61
    29a8:	9b 83       	std	Y+3, r25	; 0x03
    29aa:	8a 83       	std	Y+2, r24	; 0x02
    29ac:	7d 83       	std	Y+5, r23	; 0x05
    29ae:	6c 83       	std	Y+4, r22	; 0x04
    29b0:	5f 83       	std	Y+7, r21	; 0x07
    29b2:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_u8ErrState = NO_ERROR;
    29b4:	19 82       	std	Y+1, r1	; 0x01
	
	if(Copy_component != NULL)
    29b6:	8a 81       	ldd	r24, Y+2	; 0x02
    29b8:	9b 81       	ldd	r25, Y+3	; 0x03
    29ba:	00 97       	sbiw	r24, 0x00	; 0
    29bc:	09 f4       	brne	.+2      	; 0x29c0 <LM35_getTemperature+0x3c>
    29be:	bc c0       	rjmp	.+376    	; 0x2b38 <LM35_getTemperature+0x1b4>
	{

		if(Copy_component -> resolution == 8)
    29c0:	ea 81       	ldd	r30, Y+2	; 0x02
    29c2:	fb 81       	ldd	r31, Y+3	; 0x03
    29c4:	81 81       	ldd	r24, Z+1	; 0x01
    29c6:	88 30       	cpi	r24, 0x08	; 8
    29c8:	09 f0       	breq	.+2      	; 0x29cc <LM35_getTemperature+0x48>
    29ca:	55 c0       	rjmp	.+170    	; 0x2a76 <LM35_getTemperature+0xf2>
		{
			Dig_Temp = (u16) Map(0 , 5 , 0 , Copy_component -> Vref ,Dig_Temp);
    29cc:	ea 81       	ldd	r30, Y+2	; 0x02
    29ce:	fb 81       	ldd	r31, Y+3	; 0x03
    29d0:	80 81       	ld	r24, Z
    29d2:	a8 2e       	mov	r10, r24
    29d4:	bb 24       	eor	r11, r11
    29d6:	cc 24       	eor	r12, r12
    29d8:	dd 24       	eor	r13, r13
    29da:	8c 81       	ldd	r24, Y+4	; 0x04
    29dc:	9d 81       	ldd	r25, Y+5	; 0x05
    29de:	cc 01       	movw	r24, r24
    29e0:	a0 e0       	ldi	r26, 0x00	; 0
    29e2:	b0 e0       	ldi	r27, 0x00	; 0
    29e4:	00 d0       	rcall	.+0      	; 0x29e6 <LM35_getTemperature+0x62>
    29e6:	00 d0       	rcall	.+0      	; 0x29e8 <LM35_getTemperature+0x64>
    29e8:	ed b7       	in	r30, 0x3d	; 61
    29ea:	fe b7       	in	r31, 0x3e	; 62
    29ec:	31 96       	adiw	r30, 0x01	; 1
    29ee:	80 83       	st	Z, r24
    29f0:	91 83       	std	Z+1, r25	; 0x01
    29f2:	a2 83       	std	Z+2, r26	; 0x02
    29f4:	b3 83       	std	Z+3, r27	; 0x03
    29f6:	60 e0       	ldi	r22, 0x00	; 0
    29f8:	70 e0       	ldi	r23, 0x00	; 0
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	25 e0       	ldi	r18, 0x05	; 5
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	40 e0       	ldi	r20, 0x00	; 0
    2a04:	50 e0       	ldi	r21, 0x00	; 0
    2a06:	ee 24       	eor	r14, r14
    2a08:	ff 24       	eor	r15, r15
    2a0a:	87 01       	movw	r16, r14
    2a0c:	0e 94 5c 2d 	call	0x5ab8	; 0x5ab8 <Map>
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	0f 90       	pop	r0
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	9d 83       	std	Y+5, r25	; 0x05
    2a1e:	8c 83       	std	Y+4, r24	; 0x04
			*Result  = (u16)( ((u32)Dig_Temp * ((u32)(Copy_component -> Vref) * 100UL) ) / 255UL);
    2a20:	8c 81       	ldd	r24, Y+4	; 0x04
    2a22:	9d 81       	ldd	r25, Y+5	; 0x05
    2a24:	cc 01       	movw	r24, r24
    2a26:	a0 e0       	ldi	r26, 0x00	; 0
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	ea 81       	ldd	r30, Y+2	; 0x02
    2a2c:	fb 81       	ldd	r31, Y+3	; 0x03
    2a2e:	20 81       	ld	r18, Z
    2a30:	22 2f       	mov	r18, r18
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	40 e0       	ldi	r20, 0x00	; 0
    2a36:	50 e0       	ldi	r21, 0x00	; 0
    2a38:	bc 01       	movw	r22, r24
    2a3a:	cd 01       	movw	r24, r26
    2a3c:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <__mulsi3>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	24 e6       	ldi	r18, 0x64	; 100
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	40 e0       	ldi	r20, 0x00	; 0
    2a4a:	50 e0       	ldi	r21, 0x00	; 0
    2a4c:	bc 01       	movw	r22, r24
    2a4e:	cd 01       	movw	r24, r26
    2a50:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <__mulsi3>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	2f ef       	ldi	r18, 0xFF	; 255
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e0       	ldi	r20, 0x00	; 0
    2a5e:	50 e0       	ldi	r21, 0x00	; 0
    2a60:	bc 01       	movw	r22, r24
    2a62:	cd 01       	movw	r24, r26
    2a64:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <__udivmodsi4>
    2a68:	da 01       	movw	r26, r20
    2a6a:	c9 01       	movw	r24, r18
    2a6c:	ee 81       	ldd	r30, Y+6	; 0x06
    2a6e:	ff 81       	ldd	r31, Y+7	; 0x07
    2a70:	91 83       	std	Z+1, r25	; 0x01
    2a72:	80 83       	st	Z, r24
    2a74:	63 c0       	rjmp	.+198    	; 0x2b3c <LM35_getTemperature+0x1b8>
		}
		else if(Copy_component -> resolution == 10)
    2a76:	ea 81       	ldd	r30, Y+2	; 0x02
    2a78:	fb 81       	ldd	r31, Y+3	; 0x03
    2a7a:	81 81       	ldd	r24, Z+1	; 0x01
    2a7c:	8a 30       	cpi	r24, 0x0A	; 10
    2a7e:	09 f0       	breq	.+2      	; 0x2a82 <LM35_getTemperature+0xfe>
    2a80:	58 c0       	rjmp	.+176    	; 0x2b32 <LM35_getTemperature+0x1ae>
		{
			//Local_u16ADC_Value = (u16) Map(0 , 5 , 0 , Copy_component -> Vref ,Local_u16ADC_Value);
			Dig_Temp = (u16) Map(0 , 1023 , 0 , 255 ,Dig_Temp);
    2a82:	8c 81       	ldd	r24, Y+4	; 0x04
    2a84:	9d 81       	ldd	r25, Y+5	; 0x05
    2a86:	cc 01       	movw	r24, r24
    2a88:	a0 e0       	ldi	r26, 0x00	; 0
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	00 d0       	rcall	.+0      	; 0x2a8e <LM35_getTemperature+0x10a>
    2a8e:	00 d0       	rcall	.+0      	; 0x2a90 <LM35_getTemperature+0x10c>
    2a90:	ed b7       	in	r30, 0x3d	; 61
    2a92:	fe b7       	in	r31, 0x3e	; 62
    2a94:	31 96       	adiw	r30, 0x01	; 1
    2a96:	80 83       	st	Z, r24
    2a98:	91 83       	std	Z+1, r25	; 0x01
    2a9a:	a2 83       	std	Z+2, r26	; 0x02
    2a9c:	b3 83       	std	Z+3, r27	; 0x03
    2a9e:	60 e0       	ldi	r22, 0x00	; 0
    2aa0:	70 e0       	ldi	r23, 0x00	; 0
    2aa2:	80 e0       	ldi	r24, 0x00	; 0
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	2f ef       	ldi	r18, 0xFF	; 255
    2aa8:	33 e0       	ldi	r19, 0x03	; 3
    2aaa:	40 e0       	ldi	r20, 0x00	; 0
    2aac:	50 e0       	ldi	r21, 0x00	; 0
    2aae:	ee 24       	eor	r14, r14
    2ab0:	ff 24       	eor	r15, r15
    2ab2:	87 01       	movw	r16, r14
    2ab4:	0f 2e       	mov	r0, r31
    2ab6:	ff ef       	ldi	r31, 0xFF	; 255
    2ab8:	af 2e       	mov	r10, r31
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	bf 2e       	mov	r11, r31
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	cf 2e       	mov	r12, r31
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	df 2e       	mov	r13, r31
    2ac6:	f0 2d       	mov	r31, r0
    2ac8:	0e 94 5c 2d 	call	0x5ab8	; 0x5ab8 <Map>
    2acc:	0f 90       	pop	r0
    2ace:	0f 90       	pop	r0
    2ad0:	0f 90       	pop	r0
    2ad2:	0f 90       	pop	r0
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	9d 83       	std	Y+5, r25	; 0x05
    2ada:	8c 83       	std	Y+4, r24	; 0x04
			*Result = (u16)(((u32)Dig_Temp * ((u32)(Copy_component -> Vref) * 100UL) ) / 1023UL);
    2adc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ade:	9d 81       	ldd	r25, Y+5	; 0x05
    2ae0:	cc 01       	movw	r24, r24
    2ae2:	a0 e0       	ldi	r26, 0x00	; 0
    2ae4:	b0 e0       	ldi	r27, 0x00	; 0
    2ae6:	ea 81       	ldd	r30, Y+2	; 0x02
    2ae8:	fb 81       	ldd	r31, Y+3	; 0x03
    2aea:	20 81       	ld	r18, Z
    2aec:	22 2f       	mov	r18, r18
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	40 e0       	ldi	r20, 0x00	; 0
    2af2:	50 e0       	ldi	r21, 0x00	; 0
    2af4:	bc 01       	movw	r22, r24
    2af6:	cd 01       	movw	r24, r26
    2af8:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <__mulsi3>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	24 e6       	ldi	r18, 0x64	; 100
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	40 e0       	ldi	r20, 0x00	; 0
    2b06:	50 e0       	ldi	r21, 0x00	; 0
    2b08:	bc 01       	movw	r22, r24
    2b0a:	cd 01       	movw	r24, r26
    2b0c:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <__mulsi3>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	2f ef       	ldi	r18, 0xFF	; 255
    2b16:	33 e0       	ldi	r19, 0x03	; 3
    2b18:	40 e0       	ldi	r20, 0x00	; 0
    2b1a:	50 e0       	ldi	r21, 0x00	; 0
    2b1c:	bc 01       	movw	r22, r24
    2b1e:	cd 01       	movw	r24, r26
    2b20:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <__udivmodsi4>
    2b24:	da 01       	movw	r26, r20
    2b26:	c9 01       	movw	r24, r18
    2b28:	ee 81       	ldd	r30, Y+6	; 0x06
    2b2a:	ff 81       	ldd	r31, Y+7	; 0x07
    2b2c:	91 83       	std	Z+1, r25	; 0x01
    2b2e:	80 83       	st	Z, r24
    2b30:	05 c0       	rjmp	.+10     	; 0x2b3c <LM35_getTemperature+0x1b8>
		}
		else
		{
			Local_u8ErrState = ERROR;
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	89 83       	std	Y+1, r24	; 0x01
    2b36:	02 c0       	rjmp	.+4      	; 0x2b3c <LM35_getTemperature+0x1b8>
		}
	}
	else
	{
		Local_u8ErrState = NULL_PTR_ERR;
    2b38:	82 e0       	ldi	r24, 0x02	; 2
    2b3a:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_u8ErrState;
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b3e:	27 96       	adiw	r28, 0x07	; 7
    2b40:	0f b6       	in	r0, 0x3f	; 63
    2b42:	f8 94       	cli
    2b44:	de bf       	out	0x3e, r29	; 62
    2b46:	0f be       	out	0x3f, r0	; 63
    2b48:	cd bf       	out	0x3d, r28	; 61
    2b4a:	cf 91       	pop	r28
    2b4c:	df 91       	pop	r29
    2b4e:	1f 91       	pop	r17
    2b50:	0f 91       	pop	r16
    2b52:	ff 90       	pop	r15
    2b54:	ef 90       	pop	r14
    2b56:	df 90       	pop	r13
    2b58:	cf 90       	pop	r12
    2b5a:	bf 90       	pop	r11
    2b5c:	af 90       	pop	r10
    2b5e:	08 95       	ret

00002b60 <PORT_voidInit>:
#include "PORT_config.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(void)
{
    2b60:	df 93       	push	r29
    2b62:	cf 93       	push	r28
    2b64:	cd b7       	in	r28, 0x3d	; 61
    2b66:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    2b68:	ea e3       	ldi	r30, 0x3A	; 58
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	83 e8       	ldi	r24, 0x83	; 131
    2b6e:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    2b70:	e7 e3       	ldi	r30, 0x37	; 55
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	8b ef       	ldi	r24, 0xFB	; 251
    2b76:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    2b78:	e4 e3       	ldi	r30, 0x34	; 52
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	8f e7       	ldi	r24, 0x7F	; 127
    2b7e:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    2b80:	e1 e3       	ldi	r30, 0x31	; 49
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	8f ef       	ldi	r24, 0xFF	; 255
    2b86:	80 83       	st	Z, r24
	
	PORTA = PORTA_INIT_VAL;
    2b88:	eb e3       	ldi	r30, 0x3B	; 59
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	8f e0       	ldi	r24, 0x0F	; 15
    2b8e:	80 83       	st	Z, r24
	PORTB = PORTB_INIT_VAL;
    2b90:	e8 e3       	ldi	r30, 0x38	; 56
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	10 82       	st	Z, r1
	PORTC = PORTC_INIT_VAL;
    2b96:	e5 e3       	ldi	r30, 0x35	; 53
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	10 82       	st	Z, r1
	PORTD = PORTD_INIT_VAL;
    2b9c:	e2 e3       	ldi	r30, 0x32	; 50
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	10 82       	st	Z, r1
    2ba2:	cf 91       	pop	r28
    2ba4:	df 91       	pop	r29
    2ba6:	08 95       	ret

00002ba8 <STEPPER_voidInit>:
/*
* Breif : This Function initialize the pins which connected to stepper motor as output pins
* Parameters : Nothing
* return : Nothing 
*/
void STEPPER_voidInit( void ){
    2ba8:	df 93       	push	r29
    2baa:	cf 93       	push	r28
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62

	DIO_u8_SetPinDirection( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_u8PORT_OUTPUT );
    2bb0:	82 e0       	ldi	r24, 0x02	; 2
    2bb2:	66 e0       	ldi	r22, 0x06	; 6
    2bb4:	4f ef       	ldi	r20, 0xFF	; 255
    2bb6:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8_SetPinDirection>
	DIO_u8_SetPinDirection( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_u8PORT_OUTPUT );
    2bba:	82 e0       	ldi	r24, 0x02	; 2
    2bbc:	65 e0       	ldi	r22, 0x05	; 5
    2bbe:	4f ef       	ldi	r20, 0xFF	; 255
    2bc0:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8_SetPinDirection>
	DIO_u8_SetPinDirection( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_u8PORT_OUTPUT );
    2bc4:	82 e0       	ldi	r24, 0x02	; 2
    2bc6:	63 e0       	ldi	r22, 0x03	; 3
    2bc8:	4f ef       	ldi	r20, 0xFF	; 255
    2bca:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8_SetPinDirection>
	DIO_u8_SetPinDirection( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_u8PORT_OUTPUT );
    2bce:	82 e0       	ldi	r24, 0x02	; 2
    2bd0:	64 e0       	ldi	r22, 0x04	; 4
    2bd2:	4f ef       	ldi	r20, 0xFF	; 255
    2bd4:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_u8_SetPinDirection>

	DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_u8PIN_LOW );
    2bd8:	82 e0       	ldi	r24, 0x02	; 2
    2bda:	63 e0       	ldi	r22, 0x03	; 3
    2bdc:	40 e0       	ldi	r20, 0x00	; 0
    2bde:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
	DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_u8PIN_LOW );
    2be2:	82 e0       	ldi	r24, 0x02	; 2
    2be4:	64 e0       	ldi	r22, 0x04	; 4
    2be6:	40 e0       	ldi	r20, 0x00	; 0
    2be8:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
	DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_u8PIN_LOW );
    2bec:	82 e0       	ldi	r24, 0x02	; 2
    2bee:	65 e0       	ldi	r22, 0x05	; 5
    2bf0:	40 e0       	ldi	r20, 0x00	; 0
    2bf2:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
	DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_u8PIN_LOW );
    2bf6:	82 e0       	ldi	r24, 0x02	; 2
    2bf8:	66 e0       	ldi	r22, 0x06	; 6
    2bfa:	40 e0       	ldi	r20, 0x00	; 0
    2bfc:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>

}
    2c00:	cf 91       	pop	r28
    2c02:	df 91       	pop	r29
    2c04:	08 95       	ret

00002c06 <STEPPER_voidOn>:
			=> Direction (STEPPER_CLOCK_WISE or STEPPER_ANTI_CLOCK_WISE)
			=> Speed
			=> Degree
* return : void 
*/
void STEPPER_voidOn  ( u8 Copy_u8StepType , u8 Copy_u8Direction ){
    2c06:	0f 93       	push	r16
    2c08:	1f 93       	push	r17
    2c0a:	df 93       	push	r29
    2c0c:	cf 93       	push	r28
    2c0e:	cd b7       	in	r28, 0x3d	; 61
    2c10:	de b7       	in	r29, 0x3e	; 62
    2c12:	c2 55       	subi	r28, 0x52	; 82
    2c14:	d1 40       	sbci	r29, 0x01	; 1
    2c16:	0f b6       	in	r0, 0x3f	; 63
    2c18:	f8 94       	cli
    2c1a:	de bf       	out	0x3e, r29	; 62
    2c1c:	0f be       	out	0x3f, r0	; 63
    2c1e:	cd bf       	out	0x3d, r28	; 61
    2c20:	fe 01       	movw	r30, r28
    2c22:	ef 5a       	subi	r30, 0xAF	; 175
    2c24:	fe 4f       	sbci	r31, 0xFE	; 254
    2c26:	80 83       	st	Z, r24
    2c28:	fe 01       	movw	r30, r28
    2c2a:	ee 5a       	subi	r30, 0xAE	; 174
    2c2c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c2e:	60 83       	st	Z, r22

	if( Copy_u8StepType == STEPPER_FULL_STEP ){
    2c30:	fe 01       	movw	r30, r28
    2c32:	ef 5a       	subi	r30, 0xAF	; 175
    2c34:	fe 4f       	sbci	r31, 0xFE	; 254
    2c36:	80 81       	ld	r24, Z
    2c38:	81 30       	cpi	r24, 0x01	; 1
    2c3a:	09 f0       	breq	.+2      	; 0x2c3e <STEPPER_voidOn+0x38>
    2c3c:	4f c6       	rjmp	.+3230   	; 0x38dc <STEPPER_voidOn+0xcd6>

		if( Copy_u8Direction == STEPPER_CLOCK_WISE ){
    2c3e:	fe 01       	movw	r30, r28
    2c40:	ee 5a       	subi	r30, 0xAE	; 174
    2c42:	fe 4f       	sbci	r31, 0xFE	; 254
    2c44:	80 81       	ld	r24, Z
    2c46:	81 30       	cpi	r24, 0x01	; 1
    2c48:	09 f0       	breq	.+2      	; 0x2c4c <STEPPER_voidOn+0x46>
    2c4a:	20 c3       	rjmp	.+1600   	; 0x328c <STEPPER_voidOn+0x686>

				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_u8PIN_LOW );
    2c4c:	82 e0       	ldi	r24, 0x02	; 2
    2c4e:	63 e0       	ldi	r22, 0x03	; 3
    2c50:	40 e0       	ldi	r20, 0x00	; 0
    2c52:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_u8PIN_HIGH  );
    2c56:	82 e0       	ldi	r24, 0x02	; 2
    2c58:	64 e0       	ldi	r22, 0x04	; 4
    2c5a:	41 e0       	ldi	r20, 0x01	; 1
    2c5c:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_u8PIN_HIGH  );
    2c60:	82 e0       	ldi	r24, 0x02	; 2
    2c62:	65 e0       	ldi	r22, 0x05	; 5
    2c64:	41 e0       	ldi	r20, 0x01	; 1
    2c66:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_u8PIN_HIGH  );
    2c6a:	82 e0       	ldi	r24, 0x02	; 2
    2c6c:	66 e0       	ldi	r22, 0x06	; 6
    2c6e:	41 e0       	ldi	r20, 0x01	; 1
    2c70:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    2c74:	fe 01       	movw	r30, r28
    2c76:	e3 5b       	subi	r30, 0xB3	; 179
    2c78:	fe 4f       	sbci	r31, 0xFE	; 254
    2c7a:	80 e0       	ldi	r24, 0x00	; 0
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	a8 e4       	ldi	r26, 0x48	; 72
    2c80:	b2 e4       	ldi	r27, 0x42	; 66
    2c82:	80 83       	st	Z, r24
    2c84:	91 83       	std	Z+1, r25	; 0x01
    2c86:	a2 83       	std	Z+2, r26	; 0x02
    2c88:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c8a:	8e 01       	movw	r16, r28
    2c8c:	07 5b       	subi	r16, 0xB7	; 183
    2c8e:	1e 4f       	sbci	r17, 0xFE	; 254
    2c90:	fe 01       	movw	r30, r28
    2c92:	e3 5b       	subi	r30, 0xB3	; 179
    2c94:	fe 4f       	sbci	r31, 0xFE	; 254
    2c96:	60 81       	ld	r22, Z
    2c98:	71 81       	ldd	r23, Z+1	; 0x01
    2c9a:	82 81       	ldd	r24, Z+2	; 0x02
    2c9c:	93 81       	ldd	r25, Z+3	; 0x03
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	4a e7       	ldi	r20, 0x7A	; 122
    2ca4:	55 e4       	ldi	r21, 0x45	; 69
    2ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2caa:	dc 01       	movw	r26, r24
    2cac:	cb 01       	movw	r24, r22
    2cae:	f8 01       	movw	r30, r16
    2cb0:	80 83       	st	Z, r24
    2cb2:	91 83       	std	Z+1, r25	; 0x01
    2cb4:	a2 83       	std	Z+2, r26	; 0x02
    2cb6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cb8:	fe 01       	movw	r30, r28
    2cba:	e7 5b       	subi	r30, 0xB7	; 183
    2cbc:	fe 4f       	sbci	r31, 0xFE	; 254
    2cbe:	60 81       	ld	r22, Z
    2cc0:	71 81       	ldd	r23, Z+1	; 0x01
    2cc2:	82 81       	ldd	r24, Z+2	; 0x02
    2cc4:	93 81       	ldd	r25, Z+3	; 0x03
    2cc6:	20 e0       	ldi	r18, 0x00	; 0
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	40 e8       	ldi	r20, 0x80	; 128
    2ccc:	5f e3       	ldi	r21, 0x3F	; 63
    2cce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cd2:	88 23       	and	r24, r24
    2cd4:	44 f4       	brge	.+16     	; 0x2ce6 <STEPPER_voidOn+0xe0>
		__ticks = 1;
    2cd6:	fe 01       	movw	r30, r28
    2cd8:	e9 5b       	subi	r30, 0xB9	; 185
    2cda:	fe 4f       	sbci	r31, 0xFE	; 254
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	91 83       	std	Z+1, r25	; 0x01
    2ce2:	80 83       	st	Z, r24
    2ce4:	64 c0       	rjmp	.+200    	; 0x2dae <STEPPER_voidOn+0x1a8>
	else if (__tmp > 65535)
    2ce6:	fe 01       	movw	r30, r28
    2ce8:	e7 5b       	subi	r30, 0xB7	; 183
    2cea:	fe 4f       	sbci	r31, 0xFE	; 254
    2cec:	60 81       	ld	r22, Z
    2cee:	71 81       	ldd	r23, Z+1	; 0x01
    2cf0:	82 81       	ldd	r24, Z+2	; 0x02
    2cf2:	93 81       	ldd	r25, Z+3	; 0x03
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	3f ef       	ldi	r19, 0xFF	; 255
    2cf8:	4f e7       	ldi	r20, 0x7F	; 127
    2cfa:	57 e4       	ldi	r21, 0x47	; 71
    2cfc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d00:	18 16       	cp	r1, r24
    2d02:	0c f0       	brlt	.+2      	; 0x2d06 <STEPPER_voidOn+0x100>
    2d04:	43 c0       	rjmp	.+134    	; 0x2d8c <STEPPER_voidOn+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d06:	fe 01       	movw	r30, r28
    2d08:	e3 5b       	subi	r30, 0xB3	; 179
    2d0a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d0c:	60 81       	ld	r22, Z
    2d0e:	71 81       	ldd	r23, Z+1	; 0x01
    2d10:	82 81       	ldd	r24, Z+2	; 0x02
    2d12:	93 81       	ldd	r25, Z+3	; 0x03
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	40 e2       	ldi	r20, 0x20	; 32
    2d1a:	51 e4       	ldi	r21, 0x41	; 65
    2d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	8e 01       	movw	r16, r28
    2d26:	09 5b       	subi	r16, 0xB9	; 185
    2d28:	1e 4f       	sbci	r17, 0xFE	; 254
    2d2a:	bc 01       	movw	r22, r24
    2d2c:	cd 01       	movw	r24, r26
    2d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	f8 01       	movw	r30, r16
    2d38:	91 83       	std	Z+1, r25	; 0x01
    2d3a:	80 83       	st	Z, r24
    2d3c:	1f c0       	rjmp	.+62     	; 0x2d7c <STEPPER_voidOn+0x176>
    2d3e:	fe 01       	movw	r30, r28
    2d40:	eb 5b       	subi	r30, 0xBB	; 187
    2d42:	fe 4f       	sbci	r31, 0xFE	; 254
    2d44:	80 e9       	ldi	r24, 0x90	; 144
    2d46:	91 e0       	ldi	r25, 0x01	; 1
    2d48:	91 83       	std	Z+1, r25	; 0x01
    2d4a:	80 83       	st	Z, r24
    2d4c:	fe 01       	movw	r30, r28
    2d4e:	eb 5b       	subi	r30, 0xBB	; 187
    2d50:	fe 4f       	sbci	r31, 0xFE	; 254
    2d52:	80 81       	ld	r24, Z
    2d54:	91 81       	ldd	r25, Z+1	; 0x01
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	f1 f7       	brne	.-4      	; 0x2d56 <STEPPER_voidOn+0x150>
    2d5a:	fe 01       	movw	r30, r28
    2d5c:	eb 5b       	subi	r30, 0xBB	; 187
    2d5e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d60:	91 83       	std	Z+1, r25	; 0x01
    2d62:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d64:	de 01       	movw	r26, r28
    2d66:	a9 5b       	subi	r26, 0xB9	; 185
    2d68:	be 4f       	sbci	r27, 0xFE	; 254
    2d6a:	fe 01       	movw	r30, r28
    2d6c:	e9 5b       	subi	r30, 0xB9	; 185
    2d6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d70:	80 81       	ld	r24, Z
    2d72:	91 81       	ldd	r25, Z+1	; 0x01
    2d74:	01 97       	sbiw	r24, 0x01	; 1
    2d76:	11 96       	adiw	r26, 0x01	; 1
    2d78:	9c 93       	st	X, r25
    2d7a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d7c:	fe 01       	movw	r30, r28
    2d7e:	e9 5b       	subi	r30, 0xB9	; 185
    2d80:	fe 4f       	sbci	r31, 0xFE	; 254
    2d82:	80 81       	ld	r24, Z
    2d84:	91 81       	ldd	r25, Z+1	; 0x01
    2d86:	00 97       	sbiw	r24, 0x00	; 0
    2d88:	d1 f6       	brne	.-76     	; 0x2d3e <STEPPER_voidOn+0x138>
    2d8a:	27 c0       	rjmp	.+78     	; 0x2dda <STEPPER_voidOn+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d8c:	8e 01       	movw	r16, r28
    2d8e:	09 5b       	subi	r16, 0xB9	; 185
    2d90:	1e 4f       	sbci	r17, 0xFE	; 254
    2d92:	fe 01       	movw	r30, r28
    2d94:	e7 5b       	subi	r30, 0xB7	; 183
    2d96:	fe 4f       	sbci	r31, 0xFE	; 254
    2d98:	60 81       	ld	r22, Z
    2d9a:	71 81       	ldd	r23, Z+1	; 0x01
    2d9c:	82 81       	ldd	r24, Z+2	; 0x02
    2d9e:	93 81       	ldd	r25, Z+3	; 0x03
    2da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da4:	dc 01       	movw	r26, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	f8 01       	movw	r30, r16
    2daa:	91 83       	std	Z+1, r25	; 0x01
    2dac:	80 83       	st	Z, r24
    2dae:	de 01       	movw	r26, r28
    2db0:	ad 5b       	subi	r26, 0xBD	; 189
    2db2:	be 4f       	sbci	r27, 0xFE	; 254
    2db4:	fe 01       	movw	r30, r28
    2db6:	e9 5b       	subi	r30, 0xB9	; 185
    2db8:	fe 4f       	sbci	r31, 0xFE	; 254
    2dba:	80 81       	ld	r24, Z
    2dbc:	91 81       	ldd	r25, Z+1	; 0x01
    2dbe:	8d 93       	st	X+, r24
    2dc0:	9c 93       	st	X, r25
    2dc2:	fe 01       	movw	r30, r28
    2dc4:	ed 5b       	subi	r30, 0xBD	; 189
    2dc6:	fe 4f       	sbci	r31, 0xFE	; 254
    2dc8:	80 81       	ld	r24, Z
    2dca:	91 81       	ldd	r25, Z+1	; 0x01
    2dcc:	01 97       	sbiw	r24, 0x01	; 1
    2dce:	f1 f7       	brne	.-4      	; 0x2dcc <STEPPER_voidOn+0x1c6>
    2dd0:	fe 01       	movw	r30, r28
    2dd2:	ed 5b       	subi	r30, 0xBD	; 189
    2dd4:	fe 4f       	sbci	r31, 0xFE	; 254
    2dd6:	91 83       	std	Z+1, r25	; 0x01
    2dd8:	80 83       	st	Z, r24
				_delay_ms( 50 );

				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_u8PIN_HIGH  );
    2dda:	82 e0       	ldi	r24, 0x02	; 2
    2ddc:	63 e0       	ldi	r22, 0x03	; 3
    2dde:	41 e0       	ldi	r20, 0x01	; 1
    2de0:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_u8PIN_LOW );
    2de4:	82 e0       	ldi	r24, 0x02	; 2
    2de6:	64 e0       	ldi	r22, 0x04	; 4
    2de8:	40 e0       	ldi	r20, 0x00	; 0
    2dea:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_u8PIN_HIGH  );
    2dee:	82 e0       	ldi	r24, 0x02	; 2
    2df0:	65 e0       	ldi	r22, 0x05	; 5
    2df2:	41 e0       	ldi	r20, 0x01	; 1
    2df4:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_u8PIN_HIGH  );
    2df8:	82 e0       	ldi	r24, 0x02	; 2
    2dfa:	66 e0       	ldi	r22, 0x06	; 6
    2dfc:	41 e0       	ldi	r20, 0x01	; 1
    2dfe:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    2e02:	fe 01       	movw	r30, r28
    2e04:	e1 5c       	subi	r30, 0xC1	; 193
    2e06:	fe 4f       	sbci	r31, 0xFE	; 254
    2e08:	80 e0       	ldi	r24, 0x00	; 0
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	a8 e4       	ldi	r26, 0x48	; 72
    2e0e:	b2 e4       	ldi	r27, 0x42	; 66
    2e10:	80 83       	st	Z, r24
    2e12:	91 83       	std	Z+1, r25	; 0x01
    2e14:	a2 83       	std	Z+2, r26	; 0x02
    2e16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e18:	8e 01       	movw	r16, r28
    2e1a:	05 5c       	subi	r16, 0xC5	; 197
    2e1c:	1e 4f       	sbci	r17, 0xFE	; 254
    2e1e:	fe 01       	movw	r30, r28
    2e20:	e1 5c       	subi	r30, 0xC1	; 193
    2e22:	fe 4f       	sbci	r31, 0xFE	; 254
    2e24:	60 81       	ld	r22, Z
    2e26:	71 81       	ldd	r23, Z+1	; 0x01
    2e28:	82 81       	ldd	r24, Z+2	; 0x02
    2e2a:	93 81       	ldd	r25, Z+3	; 0x03
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	4a e7       	ldi	r20, 0x7A	; 122
    2e32:	55 e4       	ldi	r21, 0x45	; 69
    2e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	f8 01       	movw	r30, r16
    2e3e:	80 83       	st	Z, r24
    2e40:	91 83       	std	Z+1, r25	; 0x01
    2e42:	a2 83       	std	Z+2, r26	; 0x02
    2e44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e46:	fe 01       	movw	r30, r28
    2e48:	e5 5c       	subi	r30, 0xC5	; 197
    2e4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e4c:	60 81       	ld	r22, Z
    2e4e:	71 81       	ldd	r23, Z+1	; 0x01
    2e50:	82 81       	ldd	r24, Z+2	; 0x02
    2e52:	93 81       	ldd	r25, Z+3	; 0x03
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	40 e8       	ldi	r20, 0x80	; 128
    2e5a:	5f e3       	ldi	r21, 0x3F	; 63
    2e5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e60:	88 23       	and	r24, r24
    2e62:	44 f4       	brge	.+16     	; 0x2e74 <STEPPER_voidOn+0x26e>
		__ticks = 1;
    2e64:	fe 01       	movw	r30, r28
    2e66:	e7 5c       	subi	r30, 0xC7	; 199
    2e68:	fe 4f       	sbci	r31, 0xFE	; 254
    2e6a:	81 e0       	ldi	r24, 0x01	; 1
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	91 83       	std	Z+1, r25	; 0x01
    2e70:	80 83       	st	Z, r24
    2e72:	64 c0       	rjmp	.+200    	; 0x2f3c <STEPPER_voidOn+0x336>
	else if (__tmp > 65535)
    2e74:	fe 01       	movw	r30, r28
    2e76:	e5 5c       	subi	r30, 0xC5	; 197
    2e78:	fe 4f       	sbci	r31, 0xFE	; 254
    2e7a:	60 81       	ld	r22, Z
    2e7c:	71 81       	ldd	r23, Z+1	; 0x01
    2e7e:	82 81       	ldd	r24, Z+2	; 0x02
    2e80:	93 81       	ldd	r25, Z+3	; 0x03
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	3f ef       	ldi	r19, 0xFF	; 255
    2e86:	4f e7       	ldi	r20, 0x7F	; 127
    2e88:	57 e4       	ldi	r21, 0x47	; 71
    2e8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e8e:	18 16       	cp	r1, r24
    2e90:	0c f0       	brlt	.+2      	; 0x2e94 <STEPPER_voidOn+0x28e>
    2e92:	43 c0       	rjmp	.+134    	; 0x2f1a <STEPPER_voidOn+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e94:	fe 01       	movw	r30, r28
    2e96:	e1 5c       	subi	r30, 0xC1	; 193
    2e98:	fe 4f       	sbci	r31, 0xFE	; 254
    2e9a:	60 81       	ld	r22, Z
    2e9c:	71 81       	ldd	r23, Z+1	; 0x01
    2e9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ea0:	93 81       	ldd	r25, Z+3	; 0x03
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	40 e2       	ldi	r20, 0x20	; 32
    2ea8:	51 e4       	ldi	r21, 0x41	; 65
    2eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	8e 01       	movw	r16, r28
    2eb4:	07 5c       	subi	r16, 0xC7	; 199
    2eb6:	1e 4f       	sbci	r17, 0xFE	; 254
    2eb8:	bc 01       	movw	r22, r24
    2eba:	cd 01       	movw	r24, r26
    2ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	f8 01       	movw	r30, r16
    2ec6:	91 83       	std	Z+1, r25	; 0x01
    2ec8:	80 83       	st	Z, r24
    2eca:	1f c0       	rjmp	.+62     	; 0x2f0a <STEPPER_voidOn+0x304>
    2ecc:	fe 01       	movw	r30, r28
    2ece:	e9 5c       	subi	r30, 0xC9	; 201
    2ed0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed2:	80 e9       	ldi	r24, 0x90	; 144
    2ed4:	91 e0       	ldi	r25, 0x01	; 1
    2ed6:	91 83       	std	Z+1, r25	; 0x01
    2ed8:	80 83       	st	Z, r24
    2eda:	fe 01       	movw	r30, r28
    2edc:	e9 5c       	subi	r30, 0xC9	; 201
    2ede:	fe 4f       	sbci	r31, 0xFE	; 254
    2ee0:	80 81       	ld	r24, Z
    2ee2:	91 81       	ldd	r25, Z+1	; 0x01
    2ee4:	01 97       	sbiw	r24, 0x01	; 1
    2ee6:	f1 f7       	brne	.-4      	; 0x2ee4 <STEPPER_voidOn+0x2de>
    2ee8:	fe 01       	movw	r30, r28
    2eea:	e9 5c       	subi	r30, 0xC9	; 201
    2eec:	fe 4f       	sbci	r31, 0xFE	; 254
    2eee:	91 83       	std	Z+1, r25	; 0x01
    2ef0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef2:	de 01       	movw	r26, r28
    2ef4:	a7 5c       	subi	r26, 0xC7	; 199
    2ef6:	be 4f       	sbci	r27, 0xFE	; 254
    2ef8:	fe 01       	movw	r30, r28
    2efa:	e7 5c       	subi	r30, 0xC7	; 199
    2efc:	fe 4f       	sbci	r31, 0xFE	; 254
    2efe:	80 81       	ld	r24, Z
    2f00:	91 81       	ldd	r25, Z+1	; 0x01
    2f02:	01 97       	sbiw	r24, 0x01	; 1
    2f04:	11 96       	adiw	r26, 0x01	; 1
    2f06:	9c 93       	st	X, r25
    2f08:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f0a:	fe 01       	movw	r30, r28
    2f0c:	e7 5c       	subi	r30, 0xC7	; 199
    2f0e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f10:	80 81       	ld	r24, Z
    2f12:	91 81       	ldd	r25, Z+1	; 0x01
    2f14:	00 97       	sbiw	r24, 0x00	; 0
    2f16:	d1 f6       	brne	.-76     	; 0x2ecc <STEPPER_voidOn+0x2c6>
    2f18:	27 c0       	rjmp	.+78     	; 0x2f68 <STEPPER_voidOn+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f1a:	8e 01       	movw	r16, r28
    2f1c:	07 5c       	subi	r16, 0xC7	; 199
    2f1e:	1e 4f       	sbci	r17, 0xFE	; 254
    2f20:	fe 01       	movw	r30, r28
    2f22:	e5 5c       	subi	r30, 0xC5	; 197
    2f24:	fe 4f       	sbci	r31, 0xFE	; 254
    2f26:	60 81       	ld	r22, Z
    2f28:	71 81       	ldd	r23, Z+1	; 0x01
    2f2a:	82 81       	ldd	r24, Z+2	; 0x02
    2f2c:	93 81       	ldd	r25, Z+3	; 0x03
    2f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	f8 01       	movw	r30, r16
    2f38:	91 83       	std	Z+1, r25	; 0x01
    2f3a:	80 83       	st	Z, r24
    2f3c:	de 01       	movw	r26, r28
    2f3e:	ab 5c       	subi	r26, 0xCB	; 203
    2f40:	be 4f       	sbci	r27, 0xFE	; 254
    2f42:	fe 01       	movw	r30, r28
    2f44:	e7 5c       	subi	r30, 0xC7	; 199
    2f46:	fe 4f       	sbci	r31, 0xFE	; 254
    2f48:	80 81       	ld	r24, Z
    2f4a:	91 81       	ldd	r25, Z+1	; 0x01
    2f4c:	8d 93       	st	X+, r24
    2f4e:	9c 93       	st	X, r25
    2f50:	fe 01       	movw	r30, r28
    2f52:	eb 5c       	subi	r30, 0xCB	; 203
    2f54:	fe 4f       	sbci	r31, 0xFE	; 254
    2f56:	80 81       	ld	r24, Z
    2f58:	91 81       	ldd	r25, Z+1	; 0x01
    2f5a:	01 97       	sbiw	r24, 0x01	; 1
    2f5c:	f1 f7       	brne	.-4      	; 0x2f5a <STEPPER_voidOn+0x354>
    2f5e:	fe 01       	movw	r30, r28
    2f60:	eb 5c       	subi	r30, 0xCB	; 203
    2f62:	fe 4f       	sbci	r31, 0xFE	; 254
    2f64:	91 83       	std	Z+1, r25	; 0x01
    2f66:	80 83       	st	Z, r24
				_delay_ms( 50 );

				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_u8PIN_HIGH  );
    2f68:	82 e0       	ldi	r24, 0x02	; 2
    2f6a:	63 e0       	ldi	r22, 0x03	; 3
    2f6c:	41 e0       	ldi	r20, 0x01	; 1
    2f6e:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_u8PIN_HIGH  );
    2f72:	82 e0       	ldi	r24, 0x02	; 2
    2f74:	64 e0       	ldi	r22, 0x04	; 4
    2f76:	41 e0       	ldi	r20, 0x01	; 1
    2f78:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_u8PIN_LOW );
    2f7c:	82 e0       	ldi	r24, 0x02	; 2
    2f7e:	65 e0       	ldi	r22, 0x05	; 5
    2f80:	40 e0       	ldi	r20, 0x00	; 0
    2f82:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_u8PIN_HIGH  );
    2f86:	82 e0       	ldi	r24, 0x02	; 2
    2f88:	66 e0       	ldi	r22, 0x06	; 6
    2f8a:	41 e0       	ldi	r20, 0x01	; 1
    2f8c:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    2f90:	fe 01       	movw	r30, r28
    2f92:	ef 5c       	subi	r30, 0xCF	; 207
    2f94:	fe 4f       	sbci	r31, 0xFE	; 254
    2f96:	80 e0       	ldi	r24, 0x00	; 0
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	a8 e4       	ldi	r26, 0x48	; 72
    2f9c:	b2 e4       	ldi	r27, 0x42	; 66
    2f9e:	80 83       	st	Z, r24
    2fa0:	91 83       	std	Z+1, r25	; 0x01
    2fa2:	a2 83       	std	Z+2, r26	; 0x02
    2fa4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fa6:	8e 01       	movw	r16, r28
    2fa8:	03 5d       	subi	r16, 0xD3	; 211
    2faa:	1e 4f       	sbci	r17, 0xFE	; 254
    2fac:	fe 01       	movw	r30, r28
    2fae:	ef 5c       	subi	r30, 0xCF	; 207
    2fb0:	fe 4f       	sbci	r31, 0xFE	; 254
    2fb2:	60 81       	ld	r22, Z
    2fb4:	71 81       	ldd	r23, Z+1	; 0x01
    2fb6:	82 81       	ldd	r24, Z+2	; 0x02
    2fb8:	93 81       	ldd	r25, Z+3	; 0x03
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	4a e7       	ldi	r20, 0x7A	; 122
    2fc0:	55 e4       	ldi	r21, 0x45	; 69
    2fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	f8 01       	movw	r30, r16
    2fcc:	80 83       	st	Z, r24
    2fce:	91 83       	std	Z+1, r25	; 0x01
    2fd0:	a2 83       	std	Z+2, r26	; 0x02
    2fd2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fd4:	fe 01       	movw	r30, r28
    2fd6:	e3 5d       	subi	r30, 0xD3	; 211
    2fd8:	fe 4f       	sbci	r31, 0xFE	; 254
    2fda:	60 81       	ld	r22, Z
    2fdc:	71 81       	ldd	r23, Z+1	; 0x01
    2fde:	82 81       	ldd	r24, Z+2	; 0x02
    2fe0:	93 81       	ldd	r25, Z+3	; 0x03
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	40 e8       	ldi	r20, 0x80	; 128
    2fe8:	5f e3       	ldi	r21, 0x3F	; 63
    2fea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fee:	88 23       	and	r24, r24
    2ff0:	44 f4       	brge	.+16     	; 0x3002 <STEPPER_voidOn+0x3fc>
		__ticks = 1;
    2ff2:	fe 01       	movw	r30, r28
    2ff4:	e5 5d       	subi	r30, 0xD5	; 213
    2ff6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	91 83       	std	Z+1, r25	; 0x01
    2ffe:	80 83       	st	Z, r24
    3000:	64 c0       	rjmp	.+200    	; 0x30ca <STEPPER_voidOn+0x4c4>
	else if (__tmp > 65535)
    3002:	fe 01       	movw	r30, r28
    3004:	e3 5d       	subi	r30, 0xD3	; 211
    3006:	fe 4f       	sbci	r31, 0xFE	; 254
    3008:	60 81       	ld	r22, Z
    300a:	71 81       	ldd	r23, Z+1	; 0x01
    300c:	82 81       	ldd	r24, Z+2	; 0x02
    300e:	93 81       	ldd	r25, Z+3	; 0x03
    3010:	20 e0       	ldi	r18, 0x00	; 0
    3012:	3f ef       	ldi	r19, 0xFF	; 255
    3014:	4f e7       	ldi	r20, 0x7F	; 127
    3016:	57 e4       	ldi	r21, 0x47	; 71
    3018:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    301c:	18 16       	cp	r1, r24
    301e:	0c f0       	brlt	.+2      	; 0x3022 <STEPPER_voidOn+0x41c>
    3020:	43 c0       	rjmp	.+134    	; 0x30a8 <STEPPER_voidOn+0x4a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3022:	fe 01       	movw	r30, r28
    3024:	ef 5c       	subi	r30, 0xCF	; 207
    3026:	fe 4f       	sbci	r31, 0xFE	; 254
    3028:	60 81       	ld	r22, Z
    302a:	71 81       	ldd	r23, Z+1	; 0x01
    302c:	82 81       	ldd	r24, Z+2	; 0x02
    302e:	93 81       	ldd	r25, Z+3	; 0x03
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	40 e2       	ldi	r20, 0x20	; 32
    3036:	51 e4       	ldi	r21, 0x41	; 65
    3038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	8e 01       	movw	r16, r28
    3042:	05 5d       	subi	r16, 0xD5	; 213
    3044:	1e 4f       	sbci	r17, 0xFE	; 254
    3046:	bc 01       	movw	r22, r24
    3048:	cd 01       	movw	r24, r26
    304a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    304e:	dc 01       	movw	r26, r24
    3050:	cb 01       	movw	r24, r22
    3052:	f8 01       	movw	r30, r16
    3054:	91 83       	std	Z+1, r25	; 0x01
    3056:	80 83       	st	Z, r24
    3058:	1f c0       	rjmp	.+62     	; 0x3098 <STEPPER_voidOn+0x492>
    305a:	fe 01       	movw	r30, r28
    305c:	e7 5d       	subi	r30, 0xD7	; 215
    305e:	fe 4f       	sbci	r31, 0xFE	; 254
    3060:	80 e9       	ldi	r24, 0x90	; 144
    3062:	91 e0       	ldi	r25, 0x01	; 1
    3064:	91 83       	std	Z+1, r25	; 0x01
    3066:	80 83       	st	Z, r24
    3068:	fe 01       	movw	r30, r28
    306a:	e7 5d       	subi	r30, 0xD7	; 215
    306c:	fe 4f       	sbci	r31, 0xFE	; 254
    306e:	80 81       	ld	r24, Z
    3070:	91 81       	ldd	r25, Z+1	; 0x01
    3072:	01 97       	sbiw	r24, 0x01	; 1
    3074:	f1 f7       	brne	.-4      	; 0x3072 <STEPPER_voidOn+0x46c>
    3076:	fe 01       	movw	r30, r28
    3078:	e7 5d       	subi	r30, 0xD7	; 215
    307a:	fe 4f       	sbci	r31, 0xFE	; 254
    307c:	91 83       	std	Z+1, r25	; 0x01
    307e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3080:	de 01       	movw	r26, r28
    3082:	a5 5d       	subi	r26, 0xD5	; 213
    3084:	be 4f       	sbci	r27, 0xFE	; 254
    3086:	fe 01       	movw	r30, r28
    3088:	e5 5d       	subi	r30, 0xD5	; 213
    308a:	fe 4f       	sbci	r31, 0xFE	; 254
    308c:	80 81       	ld	r24, Z
    308e:	91 81       	ldd	r25, Z+1	; 0x01
    3090:	01 97       	sbiw	r24, 0x01	; 1
    3092:	11 96       	adiw	r26, 0x01	; 1
    3094:	9c 93       	st	X, r25
    3096:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3098:	fe 01       	movw	r30, r28
    309a:	e5 5d       	subi	r30, 0xD5	; 213
    309c:	fe 4f       	sbci	r31, 0xFE	; 254
    309e:	80 81       	ld	r24, Z
    30a0:	91 81       	ldd	r25, Z+1	; 0x01
    30a2:	00 97       	sbiw	r24, 0x00	; 0
    30a4:	d1 f6       	brne	.-76     	; 0x305a <STEPPER_voidOn+0x454>
    30a6:	27 c0       	rjmp	.+78     	; 0x30f6 <STEPPER_voidOn+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a8:	8e 01       	movw	r16, r28
    30aa:	05 5d       	subi	r16, 0xD5	; 213
    30ac:	1e 4f       	sbci	r17, 0xFE	; 254
    30ae:	fe 01       	movw	r30, r28
    30b0:	e3 5d       	subi	r30, 0xD3	; 211
    30b2:	fe 4f       	sbci	r31, 0xFE	; 254
    30b4:	60 81       	ld	r22, Z
    30b6:	71 81       	ldd	r23, Z+1	; 0x01
    30b8:	82 81       	ldd	r24, Z+2	; 0x02
    30ba:	93 81       	ldd	r25, Z+3	; 0x03
    30bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c0:	dc 01       	movw	r26, r24
    30c2:	cb 01       	movw	r24, r22
    30c4:	f8 01       	movw	r30, r16
    30c6:	91 83       	std	Z+1, r25	; 0x01
    30c8:	80 83       	st	Z, r24
    30ca:	de 01       	movw	r26, r28
    30cc:	a9 5d       	subi	r26, 0xD9	; 217
    30ce:	be 4f       	sbci	r27, 0xFE	; 254
    30d0:	fe 01       	movw	r30, r28
    30d2:	e5 5d       	subi	r30, 0xD5	; 213
    30d4:	fe 4f       	sbci	r31, 0xFE	; 254
    30d6:	80 81       	ld	r24, Z
    30d8:	91 81       	ldd	r25, Z+1	; 0x01
    30da:	8d 93       	st	X+, r24
    30dc:	9c 93       	st	X, r25
    30de:	fe 01       	movw	r30, r28
    30e0:	e9 5d       	subi	r30, 0xD9	; 217
    30e2:	fe 4f       	sbci	r31, 0xFE	; 254
    30e4:	80 81       	ld	r24, Z
    30e6:	91 81       	ldd	r25, Z+1	; 0x01
    30e8:	01 97       	sbiw	r24, 0x01	; 1
    30ea:	f1 f7       	brne	.-4      	; 0x30e8 <STEPPER_voidOn+0x4e2>
    30ec:	fe 01       	movw	r30, r28
    30ee:	e9 5d       	subi	r30, 0xD9	; 217
    30f0:	fe 4f       	sbci	r31, 0xFE	; 254
    30f2:	91 83       	std	Z+1, r25	; 0x01
    30f4:	80 83       	st	Z, r24
				_delay_ms( 50 );

				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_u8PIN_HIGH  );
    30f6:	82 e0       	ldi	r24, 0x02	; 2
    30f8:	63 e0       	ldi	r22, 0x03	; 3
    30fa:	41 e0       	ldi	r20, 0x01	; 1
    30fc:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_u8PIN_HIGH  );
    3100:	82 e0       	ldi	r24, 0x02	; 2
    3102:	64 e0       	ldi	r22, 0x04	; 4
    3104:	41 e0       	ldi	r20, 0x01	; 1
    3106:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_u8PIN_HIGH  );
    310a:	82 e0       	ldi	r24, 0x02	; 2
    310c:	65 e0       	ldi	r22, 0x05	; 5
    310e:	41 e0       	ldi	r20, 0x01	; 1
    3110:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_u8PIN_LOW );
    3114:	82 e0       	ldi	r24, 0x02	; 2
    3116:	66 e0       	ldi	r22, 0x06	; 6
    3118:	40 e0       	ldi	r20, 0x00	; 0
    311a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    311e:	fe 01       	movw	r30, r28
    3120:	ed 5d       	subi	r30, 0xDD	; 221
    3122:	fe 4f       	sbci	r31, 0xFE	; 254
    3124:	80 e0       	ldi	r24, 0x00	; 0
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	a8 e4       	ldi	r26, 0x48	; 72
    312a:	b2 e4       	ldi	r27, 0x42	; 66
    312c:	80 83       	st	Z, r24
    312e:	91 83       	std	Z+1, r25	; 0x01
    3130:	a2 83       	std	Z+2, r26	; 0x02
    3132:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3134:	8e 01       	movw	r16, r28
    3136:	01 5e       	subi	r16, 0xE1	; 225
    3138:	1e 4f       	sbci	r17, 0xFE	; 254
    313a:	fe 01       	movw	r30, r28
    313c:	ed 5d       	subi	r30, 0xDD	; 221
    313e:	fe 4f       	sbci	r31, 0xFE	; 254
    3140:	60 81       	ld	r22, Z
    3142:	71 81       	ldd	r23, Z+1	; 0x01
    3144:	82 81       	ldd	r24, Z+2	; 0x02
    3146:	93 81       	ldd	r25, Z+3	; 0x03
    3148:	20 e0       	ldi	r18, 0x00	; 0
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	4a e7       	ldi	r20, 0x7A	; 122
    314e:	55 e4       	ldi	r21, 0x45	; 69
    3150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3154:	dc 01       	movw	r26, r24
    3156:	cb 01       	movw	r24, r22
    3158:	f8 01       	movw	r30, r16
    315a:	80 83       	st	Z, r24
    315c:	91 83       	std	Z+1, r25	; 0x01
    315e:	a2 83       	std	Z+2, r26	; 0x02
    3160:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3162:	fe 01       	movw	r30, r28
    3164:	e1 5e       	subi	r30, 0xE1	; 225
    3166:	fe 4f       	sbci	r31, 0xFE	; 254
    3168:	60 81       	ld	r22, Z
    316a:	71 81       	ldd	r23, Z+1	; 0x01
    316c:	82 81       	ldd	r24, Z+2	; 0x02
    316e:	93 81       	ldd	r25, Z+3	; 0x03
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	40 e8       	ldi	r20, 0x80	; 128
    3176:	5f e3       	ldi	r21, 0x3F	; 63
    3178:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    317c:	88 23       	and	r24, r24
    317e:	44 f4       	brge	.+16     	; 0x3190 <STEPPER_voidOn+0x58a>
		__ticks = 1;
    3180:	fe 01       	movw	r30, r28
    3182:	e3 5e       	subi	r30, 0xE3	; 227
    3184:	fe 4f       	sbci	r31, 0xFE	; 254
    3186:	81 e0       	ldi	r24, 0x01	; 1
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	91 83       	std	Z+1, r25	; 0x01
    318c:	80 83       	st	Z, r24
    318e:	65 c0       	rjmp	.+202    	; 0x325a <STEPPER_voidOn+0x654>
	else if (__tmp > 65535)
    3190:	fe 01       	movw	r30, r28
    3192:	e1 5e       	subi	r30, 0xE1	; 225
    3194:	fe 4f       	sbci	r31, 0xFE	; 254
    3196:	60 81       	ld	r22, Z
    3198:	71 81       	ldd	r23, Z+1	; 0x01
    319a:	82 81       	ldd	r24, Z+2	; 0x02
    319c:	93 81       	ldd	r25, Z+3	; 0x03
    319e:	20 e0       	ldi	r18, 0x00	; 0
    31a0:	3f ef       	ldi	r19, 0xFF	; 255
    31a2:	4f e7       	ldi	r20, 0x7F	; 127
    31a4:	57 e4       	ldi	r21, 0x47	; 71
    31a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31aa:	18 16       	cp	r1, r24
    31ac:	0c f0       	brlt	.+2      	; 0x31b0 <STEPPER_voidOn+0x5aa>
    31ae:	44 c0       	rjmp	.+136    	; 0x3238 <STEPPER_voidOn+0x632>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31b0:	fe 01       	movw	r30, r28
    31b2:	ed 5d       	subi	r30, 0xDD	; 221
    31b4:	fe 4f       	sbci	r31, 0xFE	; 254
    31b6:	60 81       	ld	r22, Z
    31b8:	71 81       	ldd	r23, Z+1	; 0x01
    31ba:	82 81       	ldd	r24, Z+2	; 0x02
    31bc:	93 81       	ldd	r25, Z+3	; 0x03
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	40 e2       	ldi	r20, 0x20	; 32
    31c4:	51 e4       	ldi	r21, 0x41	; 65
    31c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	8e 01       	movw	r16, r28
    31d0:	03 5e       	subi	r16, 0xE3	; 227
    31d2:	1e 4f       	sbci	r17, 0xFE	; 254
    31d4:	bc 01       	movw	r22, r24
    31d6:	cd 01       	movw	r24, r26
    31d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31dc:	dc 01       	movw	r26, r24
    31de:	cb 01       	movw	r24, r22
    31e0:	f8 01       	movw	r30, r16
    31e2:	91 83       	std	Z+1, r25	; 0x01
    31e4:	80 83       	st	Z, r24
    31e6:	1f c0       	rjmp	.+62     	; 0x3226 <STEPPER_voidOn+0x620>
    31e8:	fe 01       	movw	r30, r28
    31ea:	e5 5e       	subi	r30, 0xE5	; 229
    31ec:	fe 4f       	sbci	r31, 0xFE	; 254
    31ee:	80 e9       	ldi	r24, 0x90	; 144
    31f0:	91 e0       	ldi	r25, 0x01	; 1
    31f2:	91 83       	std	Z+1, r25	; 0x01
    31f4:	80 83       	st	Z, r24
    31f6:	fe 01       	movw	r30, r28
    31f8:	e5 5e       	subi	r30, 0xE5	; 229
    31fa:	fe 4f       	sbci	r31, 0xFE	; 254
    31fc:	80 81       	ld	r24, Z
    31fe:	91 81       	ldd	r25, Z+1	; 0x01
    3200:	01 97       	sbiw	r24, 0x01	; 1
    3202:	f1 f7       	brne	.-4      	; 0x3200 <STEPPER_voidOn+0x5fa>
    3204:	fe 01       	movw	r30, r28
    3206:	e5 5e       	subi	r30, 0xE5	; 229
    3208:	fe 4f       	sbci	r31, 0xFE	; 254
    320a:	91 83       	std	Z+1, r25	; 0x01
    320c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    320e:	de 01       	movw	r26, r28
    3210:	a3 5e       	subi	r26, 0xE3	; 227
    3212:	be 4f       	sbci	r27, 0xFE	; 254
    3214:	fe 01       	movw	r30, r28
    3216:	e3 5e       	subi	r30, 0xE3	; 227
    3218:	fe 4f       	sbci	r31, 0xFE	; 254
    321a:	80 81       	ld	r24, Z
    321c:	91 81       	ldd	r25, Z+1	; 0x01
    321e:	01 97       	sbiw	r24, 0x01	; 1
    3220:	11 96       	adiw	r26, 0x01	; 1
    3222:	9c 93       	st	X, r25
    3224:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3226:	fe 01       	movw	r30, r28
    3228:	e3 5e       	subi	r30, 0xE3	; 227
    322a:	fe 4f       	sbci	r31, 0xFE	; 254
    322c:	80 81       	ld	r24, Z
    322e:	91 81       	ldd	r25, Z+1	; 0x01
    3230:	00 97       	sbiw	r24, 0x00	; 0
    3232:	d1 f6       	brne	.-76     	; 0x31e8 <STEPPER_voidOn+0x5e2>
    3234:	0c 94 c4 27 	jmp	0x4f88	; 0x4f88 <STEPPER_voidOn+0x2382>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3238:	8e 01       	movw	r16, r28
    323a:	03 5e       	subi	r16, 0xE3	; 227
    323c:	1e 4f       	sbci	r17, 0xFE	; 254
    323e:	fe 01       	movw	r30, r28
    3240:	e1 5e       	subi	r30, 0xE1	; 225
    3242:	fe 4f       	sbci	r31, 0xFE	; 254
    3244:	60 81       	ld	r22, Z
    3246:	71 81       	ldd	r23, Z+1	; 0x01
    3248:	82 81       	ldd	r24, Z+2	; 0x02
    324a:	93 81       	ldd	r25, Z+3	; 0x03
    324c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3250:	dc 01       	movw	r26, r24
    3252:	cb 01       	movw	r24, r22
    3254:	f8 01       	movw	r30, r16
    3256:	91 83       	std	Z+1, r25	; 0x01
    3258:	80 83       	st	Z, r24
    325a:	de 01       	movw	r26, r28
    325c:	a7 5e       	subi	r26, 0xE7	; 231
    325e:	be 4f       	sbci	r27, 0xFE	; 254
    3260:	fe 01       	movw	r30, r28
    3262:	e3 5e       	subi	r30, 0xE3	; 227
    3264:	fe 4f       	sbci	r31, 0xFE	; 254
    3266:	80 81       	ld	r24, Z
    3268:	91 81       	ldd	r25, Z+1	; 0x01
    326a:	11 96       	adiw	r26, 0x01	; 1
    326c:	9c 93       	st	X, r25
    326e:	8e 93       	st	-X, r24
    3270:	fe 01       	movw	r30, r28
    3272:	e7 5e       	subi	r30, 0xE7	; 231
    3274:	fe 4f       	sbci	r31, 0xFE	; 254
    3276:	80 81       	ld	r24, Z
    3278:	91 81       	ldd	r25, Z+1	; 0x01
    327a:	01 97       	sbiw	r24, 0x01	; 1
    327c:	f1 f7       	brne	.-4      	; 0x327a <STEPPER_voidOn+0x674>
    327e:	fe 01       	movw	r30, r28
    3280:	e7 5e       	subi	r30, 0xE7	; 231
    3282:	fe 4f       	sbci	r31, 0xFE	; 254
    3284:	91 83       	std	Z+1, r25	; 0x01
    3286:	80 83       	st	Z, r24
    3288:	0c 94 c4 27 	jmp	0x4f88	; 0x4f88 <STEPPER_voidOn+0x2382>
				_delay_ms( 50 );



		}else if( Copy_u8Direction == STEPPER_ANTI_CLOCK_WISE ){
    328c:	fe 01       	movw	r30, r28
    328e:	ee 5a       	subi	r30, 0xAE	; 174
    3290:	fe 4f       	sbci	r31, 0xFE	; 254
    3292:	80 81       	ld	r24, Z
    3294:	88 23       	and	r24, r24
    3296:	11 f0       	breq	.+4      	; 0x329c <STEPPER_voidOn+0x696>
    3298:	0c 94 c4 27 	jmp	0x4f88	; 0x4f88 <STEPPER_voidOn+0x2382>


				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_u8PIN_HIGH  );
    329c:	82 e0       	ldi	r24, 0x02	; 2
    329e:	63 e0       	ldi	r22, 0x03	; 3
    32a0:	41 e0       	ldi	r20, 0x01	; 1
    32a2:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_u8PIN_HIGH  );
    32a6:	82 e0       	ldi	r24, 0x02	; 2
    32a8:	64 e0       	ldi	r22, 0x04	; 4
    32aa:	41 e0       	ldi	r20, 0x01	; 1
    32ac:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_u8PIN_HIGH  );
    32b0:	82 e0       	ldi	r24, 0x02	; 2
    32b2:	65 e0       	ldi	r22, 0x05	; 5
    32b4:	41 e0       	ldi	r20, 0x01	; 1
    32b6:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_u8PIN_LOW );
    32ba:	82 e0       	ldi	r24, 0x02	; 2
    32bc:	66 e0       	ldi	r22, 0x06	; 6
    32be:	40 e0       	ldi	r20, 0x00	; 0
    32c0:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    32c4:	fe 01       	movw	r30, r28
    32c6:	eb 5e       	subi	r30, 0xEB	; 235
    32c8:	fe 4f       	sbci	r31, 0xFE	; 254
    32ca:	80 e0       	ldi	r24, 0x00	; 0
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	a8 e4       	ldi	r26, 0x48	; 72
    32d0:	b2 e4       	ldi	r27, 0x42	; 66
    32d2:	80 83       	st	Z, r24
    32d4:	91 83       	std	Z+1, r25	; 0x01
    32d6:	a2 83       	std	Z+2, r26	; 0x02
    32d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32da:	8e 01       	movw	r16, r28
    32dc:	0f 5e       	subi	r16, 0xEF	; 239
    32de:	1e 4f       	sbci	r17, 0xFE	; 254
    32e0:	fe 01       	movw	r30, r28
    32e2:	eb 5e       	subi	r30, 0xEB	; 235
    32e4:	fe 4f       	sbci	r31, 0xFE	; 254
    32e6:	60 81       	ld	r22, Z
    32e8:	71 81       	ldd	r23, Z+1	; 0x01
    32ea:	82 81       	ldd	r24, Z+2	; 0x02
    32ec:	93 81       	ldd	r25, Z+3	; 0x03
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	4a e7       	ldi	r20, 0x7A	; 122
    32f4:	55 e4       	ldi	r21, 0x45	; 69
    32f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32fa:	dc 01       	movw	r26, r24
    32fc:	cb 01       	movw	r24, r22
    32fe:	f8 01       	movw	r30, r16
    3300:	80 83       	st	Z, r24
    3302:	91 83       	std	Z+1, r25	; 0x01
    3304:	a2 83       	std	Z+2, r26	; 0x02
    3306:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3308:	fe 01       	movw	r30, r28
    330a:	ef 5e       	subi	r30, 0xEF	; 239
    330c:	fe 4f       	sbci	r31, 0xFE	; 254
    330e:	60 81       	ld	r22, Z
    3310:	71 81       	ldd	r23, Z+1	; 0x01
    3312:	82 81       	ldd	r24, Z+2	; 0x02
    3314:	93 81       	ldd	r25, Z+3	; 0x03
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	40 e8       	ldi	r20, 0x80	; 128
    331c:	5f e3       	ldi	r21, 0x3F	; 63
    331e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3322:	88 23       	and	r24, r24
    3324:	44 f4       	brge	.+16     	; 0x3336 <STEPPER_voidOn+0x730>
		__ticks = 1;
    3326:	fe 01       	movw	r30, r28
    3328:	e1 5f       	subi	r30, 0xF1	; 241
    332a:	fe 4f       	sbci	r31, 0xFE	; 254
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	91 83       	std	Z+1, r25	; 0x01
    3332:	80 83       	st	Z, r24
    3334:	64 c0       	rjmp	.+200    	; 0x33fe <STEPPER_voidOn+0x7f8>
	else if (__tmp > 65535)
    3336:	fe 01       	movw	r30, r28
    3338:	ef 5e       	subi	r30, 0xEF	; 239
    333a:	fe 4f       	sbci	r31, 0xFE	; 254
    333c:	60 81       	ld	r22, Z
    333e:	71 81       	ldd	r23, Z+1	; 0x01
    3340:	82 81       	ldd	r24, Z+2	; 0x02
    3342:	93 81       	ldd	r25, Z+3	; 0x03
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	3f ef       	ldi	r19, 0xFF	; 255
    3348:	4f e7       	ldi	r20, 0x7F	; 127
    334a:	57 e4       	ldi	r21, 0x47	; 71
    334c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3350:	18 16       	cp	r1, r24
    3352:	0c f0       	brlt	.+2      	; 0x3356 <STEPPER_voidOn+0x750>
    3354:	43 c0       	rjmp	.+134    	; 0x33dc <STEPPER_voidOn+0x7d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3356:	fe 01       	movw	r30, r28
    3358:	eb 5e       	subi	r30, 0xEB	; 235
    335a:	fe 4f       	sbci	r31, 0xFE	; 254
    335c:	60 81       	ld	r22, Z
    335e:	71 81       	ldd	r23, Z+1	; 0x01
    3360:	82 81       	ldd	r24, Z+2	; 0x02
    3362:	93 81       	ldd	r25, Z+3	; 0x03
    3364:	20 e0       	ldi	r18, 0x00	; 0
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	40 e2       	ldi	r20, 0x20	; 32
    336a:	51 e4       	ldi	r21, 0x41	; 65
    336c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3370:	dc 01       	movw	r26, r24
    3372:	cb 01       	movw	r24, r22
    3374:	8e 01       	movw	r16, r28
    3376:	01 5f       	subi	r16, 0xF1	; 241
    3378:	1e 4f       	sbci	r17, 0xFE	; 254
    337a:	bc 01       	movw	r22, r24
    337c:	cd 01       	movw	r24, r26
    337e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3382:	dc 01       	movw	r26, r24
    3384:	cb 01       	movw	r24, r22
    3386:	f8 01       	movw	r30, r16
    3388:	91 83       	std	Z+1, r25	; 0x01
    338a:	80 83       	st	Z, r24
    338c:	1f c0       	rjmp	.+62     	; 0x33cc <STEPPER_voidOn+0x7c6>
    338e:	fe 01       	movw	r30, r28
    3390:	e3 5f       	subi	r30, 0xF3	; 243
    3392:	fe 4f       	sbci	r31, 0xFE	; 254
    3394:	80 e9       	ldi	r24, 0x90	; 144
    3396:	91 e0       	ldi	r25, 0x01	; 1
    3398:	91 83       	std	Z+1, r25	; 0x01
    339a:	80 83       	st	Z, r24
    339c:	fe 01       	movw	r30, r28
    339e:	e3 5f       	subi	r30, 0xF3	; 243
    33a0:	fe 4f       	sbci	r31, 0xFE	; 254
    33a2:	80 81       	ld	r24, Z
    33a4:	91 81       	ldd	r25, Z+1	; 0x01
    33a6:	01 97       	sbiw	r24, 0x01	; 1
    33a8:	f1 f7       	brne	.-4      	; 0x33a6 <STEPPER_voidOn+0x7a0>
    33aa:	fe 01       	movw	r30, r28
    33ac:	e3 5f       	subi	r30, 0xF3	; 243
    33ae:	fe 4f       	sbci	r31, 0xFE	; 254
    33b0:	91 83       	std	Z+1, r25	; 0x01
    33b2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33b4:	de 01       	movw	r26, r28
    33b6:	a1 5f       	subi	r26, 0xF1	; 241
    33b8:	be 4f       	sbci	r27, 0xFE	; 254
    33ba:	fe 01       	movw	r30, r28
    33bc:	e1 5f       	subi	r30, 0xF1	; 241
    33be:	fe 4f       	sbci	r31, 0xFE	; 254
    33c0:	80 81       	ld	r24, Z
    33c2:	91 81       	ldd	r25, Z+1	; 0x01
    33c4:	01 97       	sbiw	r24, 0x01	; 1
    33c6:	11 96       	adiw	r26, 0x01	; 1
    33c8:	9c 93       	st	X, r25
    33ca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33cc:	fe 01       	movw	r30, r28
    33ce:	e1 5f       	subi	r30, 0xF1	; 241
    33d0:	fe 4f       	sbci	r31, 0xFE	; 254
    33d2:	80 81       	ld	r24, Z
    33d4:	91 81       	ldd	r25, Z+1	; 0x01
    33d6:	00 97       	sbiw	r24, 0x00	; 0
    33d8:	d1 f6       	brne	.-76     	; 0x338e <STEPPER_voidOn+0x788>
    33da:	27 c0       	rjmp	.+78     	; 0x342a <STEPPER_voidOn+0x824>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33dc:	8e 01       	movw	r16, r28
    33de:	01 5f       	subi	r16, 0xF1	; 241
    33e0:	1e 4f       	sbci	r17, 0xFE	; 254
    33e2:	fe 01       	movw	r30, r28
    33e4:	ef 5e       	subi	r30, 0xEF	; 239
    33e6:	fe 4f       	sbci	r31, 0xFE	; 254
    33e8:	60 81       	ld	r22, Z
    33ea:	71 81       	ldd	r23, Z+1	; 0x01
    33ec:	82 81       	ldd	r24, Z+2	; 0x02
    33ee:	93 81       	ldd	r25, Z+3	; 0x03
    33f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f4:	dc 01       	movw	r26, r24
    33f6:	cb 01       	movw	r24, r22
    33f8:	f8 01       	movw	r30, r16
    33fa:	91 83       	std	Z+1, r25	; 0x01
    33fc:	80 83       	st	Z, r24
    33fe:	de 01       	movw	r26, r28
    3400:	a5 5f       	subi	r26, 0xF5	; 245
    3402:	be 4f       	sbci	r27, 0xFE	; 254
    3404:	fe 01       	movw	r30, r28
    3406:	e1 5f       	subi	r30, 0xF1	; 241
    3408:	fe 4f       	sbci	r31, 0xFE	; 254
    340a:	80 81       	ld	r24, Z
    340c:	91 81       	ldd	r25, Z+1	; 0x01
    340e:	8d 93       	st	X+, r24
    3410:	9c 93       	st	X, r25
    3412:	fe 01       	movw	r30, r28
    3414:	e5 5f       	subi	r30, 0xF5	; 245
    3416:	fe 4f       	sbci	r31, 0xFE	; 254
    3418:	80 81       	ld	r24, Z
    341a:	91 81       	ldd	r25, Z+1	; 0x01
    341c:	01 97       	sbiw	r24, 0x01	; 1
    341e:	f1 f7       	brne	.-4      	; 0x341c <STEPPER_voidOn+0x816>
    3420:	fe 01       	movw	r30, r28
    3422:	e5 5f       	subi	r30, 0xF5	; 245
    3424:	fe 4f       	sbci	r31, 0xFE	; 254
    3426:	91 83       	std	Z+1, r25	; 0x01
    3428:	80 83       	st	Z, r24
				_delay_ms( 50 );

				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_u8PIN_HIGH  );
    342a:	82 e0       	ldi	r24, 0x02	; 2
    342c:	63 e0       	ldi	r22, 0x03	; 3
    342e:	41 e0       	ldi	r20, 0x01	; 1
    3430:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_u8PIN_HIGH  );
    3434:	82 e0       	ldi	r24, 0x02	; 2
    3436:	64 e0       	ldi	r22, 0x04	; 4
    3438:	41 e0       	ldi	r20, 0x01	; 1
    343a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_u8PIN_LOW );
    343e:	82 e0       	ldi	r24, 0x02	; 2
    3440:	65 e0       	ldi	r22, 0x05	; 5
    3442:	40 e0       	ldi	r20, 0x00	; 0
    3444:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_u8PIN_HIGH  );
    3448:	82 e0       	ldi	r24, 0x02	; 2
    344a:	66 e0       	ldi	r22, 0x06	; 6
    344c:	41 e0       	ldi	r20, 0x01	; 1
    344e:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    3452:	fe 01       	movw	r30, r28
    3454:	e9 5f       	subi	r30, 0xF9	; 249
    3456:	fe 4f       	sbci	r31, 0xFE	; 254
    3458:	80 e0       	ldi	r24, 0x00	; 0
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	a8 e4       	ldi	r26, 0x48	; 72
    345e:	b2 e4       	ldi	r27, 0x42	; 66
    3460:	80 83       	st	Z, r24
    3462:	91 83       	std	Z+1, r25	; 0x01
    3464:	a2 83       	std	Z+2, r26	; 0x02
    3466:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3468:	8e 01       	movw	r16, r28
    346a:	0d 5f       	subi	r16, 0xFD	; 253
    346c:	1e 4f       	sbci	r17, 0xFE	; 254
    346e:	fe 01       	movw	r30, r28
    3470:	e9 5f       	subi	r30, 0xF9	; 249
    3472:	fe 4f       	sbci	r31, 0xFE	; 254
    3474:	60 81       	ld	r22, Z
    3476:	71 81       	ldd	r23, Z+1	; 0x01
    3478:	82 81       	ldd	r24, Z+2	; 0x02
    347a:	93 81       	ldd	r25, Z+3	; 0x03
    347c:	20 e0       	ldi	r18, 0x00	; 0
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	4a e7       	ldi	r20, 0x7A	; 122
    3482:	55 e4       	ldi	r21, 0x45	; 69
    3484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	f8 01       	movw	r30, r16
    348e:	80 83       	st	Z, r24
    3490:	91 83       	std	Z+1, r25	; 0x01
    3492:	a2 83       	std	Z+2, r26	; 0x02
    3494:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3496:	fe 01       	movw	r30, r28
    3498:	ed 5f       	subi	r30, 0xFD	; 253
    349a:	fe 4f       	sbci	r31, 0xFE	; 254
    349c:	60 81       	ld	r22, Z
    349e:	71 81       	ldd	r23, Z+1	; 0x01
    34a0:	82 81       	ldd	r24, Z+2	; 0x02
    34a2:	93 81       	ldd	r25, Z+3	; 0x03
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	40 e8       	ldi	r20, 0x80	; 128
    34aa:	5f e3       	ldi	r21, 0x3F	; 63
    34ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34b0:	88 23       	and	r24, r24
    34b2:	44 f4       	brge	.+16     	; 0x34c4 <STEPPER_voidOn+0x8be>
		__ticks = 1;
    34b4:	fe 01       	movw	r30, r28
    34b6:	ef 5f       	subi	r30, 0xFF	; 255
    34b8:	fe 4f       	sbci	r31, 0xFE	; 254
    34ba:	81 e0       	ldi	r24, 0x01	; 1
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	91 83       	std	Z+1, r25	; 0x01
    34c0:	80 83       	st	Z, r24
    34c2:	64 c0       	rjmp	.+200    	; 0x358c <STEPPER_voidOn+0x986>
	else if (__tmp > 65535)
    34c4:	fe 01       	movw	r30, r28
    34c6:	ed 5f       	subi	r30, 0xFD	; 253
    34c8:	fe 4f       	sbci	r31, 0xFE	; 254
    34ca:	60 81       	ld	r22, Z
    34cc:	71 81       	ldd	r23, Z+1	; 0x01
    34ce:	82 81       	ldd	r24, Z+2	; 0x02
    34d0:	93 81       	ldd	r25, Z+3	; 0x03
    34d2:	20 e0       	ldi	r18, 0x00	; 0
    34d4:	3f ef       	ldi	r19, 0xFF	; 255
    34d6:	4f e7       	ldi	r20, 0x7F	; 127
    34d8:	57 e4       	ldi	r21, 0x47	; 71
    34da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34de:	18 16       	cp	r1, r24
    34e0:	0c f0       	brlt	.+2      	; 0x34e4 <STEPPER_voidOn+0x8de>
    34e2:	43 c0       	rjmp	.+134    	; 0x356a <STEPPER_voidOn+0x964>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34e4:	fe 01       	movw	r30, r28
    34e6:	e9 5f       	subi	r30, 0xF9	; 249
    34e8:	fe 4f       	sbci	r31, 0xFE	; 254
    34ea:	60 81       	ld	r22, Z
    34ec:	71 81       	ldd	r23, Z+1	; 0x01
    34ee:	82 81       	ldd	r24, Z+2	; 0x02
    34f0:	93 81       	ldd	r25, Z+3	; 0x03
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	40 e2       	ldi	r20, 0x20	; 32
    34f8:	51 e4       	ldi	r21, 0x41	; 65
    34fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fe:	dc 01       	movw	r26, r24
    3500:	cb 01       	movw	r24, r22
    3502:	8e 01       	movw	r16, r28
    3504:	0f 5f       	subi	r16, 0xFF	; 255
    3506:	1e 4f       	sbci	r17, 0xFE	; 254
    3508:	bc 01       	movw	r22, r24
    350a:	cd 01       	movw	r24, r26
    350c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3510:	dc 01       	movw	r26, r24
    3512:	cb 01       	movw	r24, r22
    3514:	f8 01       	movw	r30, r16
    3516:	91 83       	std	Z+1, r25	; 0x01
    3518:	80 83       	st	Z, r24
    351a:	1f c0       	rjmp	.+62     	; 0x355a <STEPPER_voidOn+0x954>
    351c:	fe 01       	movw	r30, r28
    351e:	e1 50       	subi	r30, 0x01	; 1
    3520:	ff 4f       	sbci	r31, 0xFF	; 255
    3522:	80 e9       	ldi	r24, 0x90	; 144
    3524:	91 e0       	ldi	r25, 0x01	; 1
    3526:	91 83       	std	Z+1, r25	; 0x01
    3528:	80 83       	st	Z, r24
    352a:	fe 01       	movw	r30, r28
    352c:	e1 50       	subi	r30, 0x01	; 1
    352e:	ff 4f       	sbci	r31, 0xFF	; 255
    3530:	80 81       	ld	r24, Z
    3532:	91 81       	ldd	r25, Z+1	; 0x01
    3534:	01 97       	sbiw	r24, 0x01	; 1
    3536:	f1 f7       	brne	.-4      	; 0x3534 <STEPPER_voidOn+0x92e>
    3538:	fe 01       	movw	r30, r28
    353a:	e1 50       	subi	r30, 0x01	; 1
    353c:	ff 4f       	sbci	r31, 0xFF	; 255
    353e:	91 83       	std	Z+1, r25	; 0x01
    3540:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3542:	de 01       	movw	r26, r28
    3544:	af 5f       	subi	r26, 0xFF	; 255
    3546:	be 4f       	sbci	r27, 0xFE	; 254
    3548:	fe 01       	movw	r30, r28
    354a:	ef 5f       	subi	r30, 0xFF	; 255
    354c:	fe 4f       	sbci	r31, 0xFE	; 254
    354e:	80 81       	ld	r24, Z
    3550:	91 81       	ldd	r25, Z+1	; 0x01
    3552:	01 97       	sbiw	r24, 0x01	; 1
    3554:	11 96       	adiw	r26, 0x01	; 1
    3556:	9c 93       	st	X, r25
    3558:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    355a:	fe 01       	movw	r30, r28
    355c:	ef 5f       	subi	r30, 0xFF	; 255
    355e:	fe 4f       	sbci	r31, 0xFE	; 254
    3560:	80 81       	ld	r24, Z
    3562:	91 81       	ldd	r25, Z+1	; 0x01
    3564:	00 97       	sbiw	r24, 0x00	; 0
    3566:	d1 f6       	brne	.-76     	; 0x351c <STEPPER_voidOn+0x916>
    3568:	27 c0       	rjmp	.+78     	; 0x35b8 <STEPPER_voidOn+0x9b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    356a:	8e 01       	movw	r16, r28
    356c:	0f 5f       	subi	r16, 0xFF	; 255
    356e:	1e 4f       	sbci	r17, 0xFE	; 254
    3570:	fe 01       	movw	r30, r28
    3572:	ed 5f       	subi	r30, 0xFD	; 253
    3574:	fe 4f       	sbci	r31, 0xFE	; 254
    3576:	60 81       	ld	r22, Z
    3578:	71 81       	ldd	r23, Z+1	; 0x01
    357a:	82 81       	ldd	r24, Z+2	; 0x02
    357c:	93 81       	ldd	r25, Z+3	; 0x03
    357e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3582:	dc 01       	movw	r26, r24
    3584:	cb 01       	movw	r24, r22
    3586:	f8 01       	movw	r30, r16
    3588:	91 83       	std	Z+1, r25	; 0x01
    358a:	80 83       	st	Z, r24
    358c:	de 01       	movw	r26, r28
    358e:	a3 50       	subi	r26, 0x03	; 3
    3590:	bf 4f       	sbci	r27, 0xFF	; 255
    3592:	fe 01       	movw	r30, r28
    3594:	ef 5f       	subi	r30, 0xFF	; 255
    3596:	fe 4f       	sbci	r31, 0xFE	; 254
    3598:	80 81       	ld	r24, Z
    359a:	91 81       	ldd	r25, Z+1	; 0x01
    359c:	8d 93       	st	X+, r24
    359e:	9c 93       	st	X, r25
    35a0:	fe 01       	movw	r30, r28
    35a2:	e3 50       	subi	r30, 0x03	; 3
    35a4:	ff 4f       	sbci	r31, 0xFF	; 255
    35a6:	80 81       	ld	r24, Z
    35a8:	91 81       	ldd	r25, Z+1	; 0x01
    35aa:	01 97       	sbiw	r24, 0x01	; 1
    35ac:	f1 f7       	brne	.-4      	; 0x35aa <STEPPER_voidOn+0x9a4>
    35ae:	fe 01       	movw	r30, r28
    35b0:	e3 50       	subi	r30, 0x03	; 3
    35b2:	ff 4f       	sbci	r31, 0xFF	; 255
    35b4:	91 83       	std	Z+1, r25	; 0x01
    35b6:	80 83       	st	Z, r24
				_delay_ms( 50 );

				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_u8PIN_HIGH  );
    35b8:	82 e0       	ldi	r24, 0x02	; 2
    35ba:	63 e0       	ldi	r22, 0x03	; 3
    35bc:	41 e0       	ldi	r20, 0x01	; 1
    35be:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_u8PIN_LOW );
    35c2:	82 e0       	ldi	r24, 0x02	; 2
    35c4:	64 e0       	ldi	r22, 0x04	; 4
    35c6:	40 e0       	ldi	r20, 0x00	; 0
    35c8:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_u8PIN_HIGH  );
    35cc:	82 e0       	ldi	r24, 0x02	; 2
    35ce:	65 e0       	ldi	r22, 0x05	; 5
    35d0:	41 e0       	ldi	r20, 0x01	; 1
    35d2:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_u8PIN_HIGH  );
    35d6:	82 e0       	ldi	r24, 0x02	; 2
    35d8:	66 e0       	ldi	r22, 0x06	; 6
    35da:	41 e0       	ldi	r20, 0x01	; 1
    35dc:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    35e0:	fe 01       	movw	r30, r28
    35e2:	e7 50       	subi	r30, 0x07	; 7
    35e4:	ff 4f       	sbci	r31, 0xFF	; 255
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	a8 e4       	ldi	r26, 0x48	; 72
    35ec:	b2 e4       	ldi	r27, 0x42	; 66
    35ee:	80 83       	st	Z, r24
    35f0:	91 83       	std	Z+1, r25	; 0x01
    35f2:	a2 83       	std	Z+2, r26	; 0x02
    35f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35f6:	8e 01       	movw	r16, r28
    35f8:	0b 50       	subi	r16, 0x0B	; 11
    35fa:	1f 4f       	sbci	r17, 0xFF	; 255
    35fc:	fe 01       	movw	r30, r28
    35fe:	e7 50       	subi	r30, 0x07	; 7
    3600:	ff 4f       	sbci	r31, 0xFF	; 255
    3602:	60 81       	ld	r22, Z
    3604:	71 81       	ldd	r23, Z+1	; 0x01
    3606:	82 81       	ldd	r24, Z+2	; 0x02
    3608:	93 81       	ldd	r25, Z+3	; 0x03
    360a:	20 e0       	ldi	r18, 0x00	; 0
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	4a e7       	ldi	r20, 0x7A	; 122
    3610:	55 e4       	ldi	r21, 0x45	; 69
    3612:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3616:	dc 01       	movw	r26, r24
    3618:	cb 01       	movw	r24, r22
    361a:	f8 01       	movw	r30, r16
    361c:	80 83       	st	Z, r24
    361e:	91 83       	std	Z+1, r25	; 0x01
    3620:	a2 83       	std	Z+2, r26	; 0x02
    3622:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3624:	fe 01       	movw	r30, r28
    3626:	eb 50       	subi	r30, 0x0B	; 11
    3628:	ff 4f       	sbci	r31, 0xFF	; 255
    362a:	60 81       	ld	r22, Z
    362c:	71 81       	ldd	r23, Z+1	; 0x01
    362e:	82 81       	ldd	r24, Z+2	; 0x02
    3630:	93 81       	ldd	r25, Z+3	; 0x03
    3632:	20 e0       	ldi	r18, 0x00	; 0
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	40 e8       	ldi	r20, 0x80	; 128
    3638:	5f e3       	ldi	r21, 0x3F	; 63
    363a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    363e:	88 23       	and	r24, r24
    3640:	44 f4       	brge	.+16     	; 0x3652 <STEPPER_voidOn+0xa4c>
		__ticks = 1;
    3642:	fe 01       	movw	r30, r28
    3644:	ed 50       	subi	r30, 0x0D	; 13
    3646:	ff 4f       	sbci	r31, 0xFF	; 255
    3648:	81 e0       	ldi	r24, 0x01	; 1
    364a:	90 e0       	ldi	r25, 0x00	; 0
    364c:	91 83       	std	Z+1, r25	; 0x01
    364e:	80 83       	st	Z, r24
    3650:	64 c0       	rjmp	.+200    	; 0x371a <STEPPER_voidOn+0xb14>
	else if (__tmp > 65535)
    3652:	fe 01       	movw	r30, r28
    3654:	eb 50       	subi	r30, 0x0B	; 11
    3656:	ff 4f       	sbci	r31, 0xFF	; 255
    3658:	60 81       	ld	r22, Z
    365a:	71 81       	ldd	r23, Z+1	; 0x01
    365c:	82 81       	ldd	r24, Z+2	; 0x02
    365e:	93 81       	ldd	r25, Z+3	; 0x03
    3660:	20 e0       	ldi	r18, 0x00	; 0
    3662:	3f ef       	ldi	r19, 0xFF	; 255
    3664:	4f e7       	ldi	r20, 0x7F	; 127
    3666:	57 e4       	ldi	r21, 0x47	; 71
    3668:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    366c:	18 16       	cp	r1, r24
    366e:	0c f0       	brlt	.+2      	; 0x3672 <STEPPER_voidOn+0xa6c>
    3670:	43 c0       	rjmp	.+134    	; 0x36f8 <STEPPER_voidOn+0xaf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3672:	fe 01       	movw	r30, r28
    3674:	e7 50       	subi	r30, 0x07	; 7
    3676:	ff 4f       	sbci	r31, 0xFF	; 255
    3678:	60 81       	ld	r22, Z
    367a:	71 81       	ldd	r23, Z+1	; 0x01
    367c:	82 81       	ldd	r24, Z+2	; 0x02
    367e:	93 81       	ldd	r25, Z+3	; 0x03
    3680:	20 e0       	ldi	r18, 0x00	; 0
    3682:	30 e0       	ldi	r19, 0x00	; 0
    3684:	40 e2       	ldi	r20, 0x20	; 32
    3686:	51 e4       	ldi	r21, 0x41	; 65
    3688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    368c:	dc 01       	movw	r26, r24
    368e:	cb 01       	movw	r24, r22
    3690:	8e 01       	movw	r16, r28
    3692:	0d 50       	subi	r16, 0x0D	; 13
    3694:	1f 4f       	sbci	r17, 0xFF	; 255
    3696:	bc 01       	movw	r22, r24
    3698:	cd 01       	movw	r24, r26
    369a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    369e:	dc 01       	movw	r26, r24
    36a0:	cb 01       	movw	r24, r22
    36a2:	f8 01       	movw	r30, r16
    36a4:	91 83       	std	Z+1, r25	; 0x01
    36a6:	80 83       	st	Z, r24
    36a8:	1f c0       	rjmp	.+62     	; 0x36e8 <STEPPER_voidOn+0xae2>
    36aa:	fe 01       	movw	r30, r28
    36ac:	ef 50       	subi	r30, 0x0F	; 15
    36ae:	ff 4f       	sbci	r31, 0xFF	; 255
    36b0:	80 e9       	ldi	r24, 0x90	; 144
    36b2:	91 e0       	ldi	r25, 0x01	; 1
    36b4:	91 83       	std	Z+1, r25	; 0x01
    36b6:	80 83       	st	Z, r24
    36b8:	fe 01       	movw	r30, r28
    36ba:	ef 50       	subi	r30, 0x0F	; 15
    36bc:	ff 4f       	sbci	r31, 0xFF	; 255
    36be:	80 81       	ld	r24, Z
    36c0:	91 81       	ldd	r25, Z+1	; 0x01
    36c2:	01 97       	sbiw	r24, 0x01	; 1
    36c4:	f1 f7       	brne	.-4      	; 0x36c2 <STEPPER_voidOn+0xabc>
    36c6:	fe 01       	movw	r30, r28
    36c8:	ef 50       	subi	r30, 0x0F	; 15
    36ca:	ff 4f       	sbci	r31, 0xFF	; 255
    36cc:	91 83       	std	Z+1, r25	; 0x01
    36ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36d0:	de 01       	movw	r26, r28
    36d2:	ad 50       	subi	r26, 0x0D	; 13
    36d4:	bf 4f       	sbci	r27, 0xFF	; 255
    36d6:	fe 01       	movw	r30, r28
    36d8:	ed 50       	subi	r30, 0x0D	; 13
    36da:	ff 4f       	sbci	r31, 0xFF	; 255
    36dc:	80 81       	ld	r24, Z
    36de:	91 81       	ldd	r25, Z+1	; 0x01
    36e0:	01 97       	sbiw	r24, 0x01	; 1
    36e2:	11 96       	adiw	r26, 0x01	; 1
    36e4:	9c 93       	st	X, r25
    36e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36e8:	fe 01       	movw	r30, r28
    36ea:	ed 50       	subi	r30, 0x0D	; 13
    36ec:	ff 4f       	sbci	r31, 0xFF	; 255
    36ee:	80 81       	ld	r24, Z
    36f0:	91 81       	ldd	r25, Z+1	; 0x01
    36f2:	00 97       	sbiw	r24, 0x00	; 0
    36f4:	d1 f6       	brne	.-76     	; 0x36aa <STEPPER_voidOn+0xaa4>
    36f6:	27 c0       	rjmp	.+78     	; 0x3746 <STEPPER_voidOn+0xb40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36f8:	8e 01       	movw	r16, r28
    36fa:	0d 50       	subi	r16, 0x0D	; 13
    36fc:	1f 4f       	sbci	r17, 0xFF	; 255
    36fe:	fe 01       	movw	r30, r28
    3700:	eb 50       	subi	r30, 0x0B	; 11
    3702:	ff 4f       	sbci	r31, 0xFF	; 255
    3704:	60 81       	ld	r22, Z
    3706:	71 81       	ldd	r23, Z+1	; 0x01
    3708:	82 81       	ldd	r24, Z+2	; 0x02
    370a:	93 81       	ldd	r25, Z+3	; 0x03
    370c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3710:	dc 01       	movw	r26, r24
    3712:	cb 01       	movw	r24, r22
    3714:	f8 01       	movw	r30, r16
    3716:	91 83       	std	Z+1, r25	; 0x01
    3718:	80 83       	st	Z, r24
    371a:	de 01       	movw	r26, r28
    371c:	a1 51       	subi	r26, 0x11	; 17
    371e:	bf 4f       	sbci	r27, 0xFF	; 255
    3720:	fe 01       	movw	r30, r28
    3722:	ed 50       	subi	r30, 0x0D	; 13
    3724:	ff 4f       	sbci	r31, 0xFF	; 255
    3726:	80 81       	ld	r24, Z
    3728:	91 81       	ldd	r25, Z+1	; 0x01
    372a:	8d 93       	st	X+, r24
    372c:	9c 93       	st	X, r25
    372e:	fe 01       	movw	r30, r28
    3730:	e1 51       	subi	r30, 0x11	; 17
    3732:	ff 4f       	sbci	r31, 0xFF	; 255
    3734:	80 81       	ld	r24, Z
    3736:	91 81       	ldd	r25, Z+1	; 0x01
    3738:	01 97       	sbiw	r24, 0x01	; 1
    373a:	f1 f7       	brne	.-4      	; 0x3738 <STEPPER_voidOn+0xb32>
    373c:	fe 01       	movw	r30, r28
    373e:	e1 51       	subi	r30, 0x11	; 17
    3740:	ff 4f       	sbci	r31, 0xFF	; 255
    3742:	91 83       	std	Z+1, r25	; 0x01
    3744:	80 83       	st	Z, r24
				_delay_ms( 50 );

				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_u8PIN_LOW );
    3746:	82 e0       	ldi	r24, 0x02	; 2
    3748:	63 e0       	ldi	r22, 0x03	; 3
    374a:	40 e0       	ldi	r20, 0x00	; 0
    374c:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_u8PIN_HIGH  );
    3750:	82 e0       	ldi	r24, 0x02	; 2
    3752:	64 e0       	ldi	r22, 0x04	; 4
    3754:	41 e0       	ldi	r20, 0x01	; 1
    3756:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_u8PIN_HIGH  );
    375a:	82 e0       	ldi	r24, 0x02	; 2
    375c:	65 e0       	ldi	r22, 0x05	; 5
    375e:	41 e0       	ldi	r20, 0x01	; 1
    3760:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_u8PIN_HIGH  );
    3764:	82 e0       	ldi	r24, 0x02	; 2
    3766:	66 e0       	ldi	r22, 0x06	; 6
    3768:	41 e0       	ldi	r20, 0x01	; 1
    376a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    376e:	fe 01       	movw	r30, r28
    3770:	e5 51       	subi	r30, 0x15	; 21
    3772:	ff 4f       	sbci	r31, 0xFF	; 255
    3774:	80 e0       	ldi	r24, 0x00	; 0
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	a8 e4       	ldi	r26, 0x48	; 72
    377a:	b2 e4       	ldi	r27, 0x42	; 66
    377c:	80 83       	st	Z, r24
    377e:	91 83       	std	Z+1, r25	; 0x01
    3780:	a2 83       	std	Z+2, r26	; 0x02
    3782:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3784:	8e 01       	movw	r16, r28
    3786:	09 51       	subi	r16, 0x19	; 25
    3788:	1f 4f       	sbci	r17, 0xFF	; 255
    378a:	fe 01       	movw	r30, r28
    378c:	e5 51       	subi	r30, 0x15	; 21
    378e:	ff 4f       	sbci	r31, 0xFF	; 255
    3790:	60 81       	ld	r22, Z
    3792:	71 81       	ldd	r23, Z+1	; 0x01
    3794:	82 81       	ldd	r24, Z+2	; 0x02
    3796:	93 81       	ldd	r25, Z+3	; 0x03
    3798:	20 e0       	ldi	r18, 0x00	; 0
    379a:	30 e0       	ldi	r19, 0x00	; 0
    379c:	4a e7       	ldi	r20, 0x7A	; 122
    379e:	55 e4       	ldi	r21, 0x45	; 69
    37a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a4:	dc 01       	movw	r26, r24
    37a6:	cb 01       	movw	r24, r22
    37a8:	f8 01       	movw	r30, r16
    37aa:	80 83       	st	Z, r24
    37ac:	91 83       	std	Z+1, r25	; 0x01
    37ae:	a2 83       	std	Z+2, r26	; 0x02
    37b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37b2:	fe 01       	movw	r30, r28
    37b4:	e9 51       	subi	r30, 0x19	; 25
    37b6:	ff 4f       	sbci	r31, 0xFF	; 255
    37b8:	60 81       	ld	r22, Z
    37ba:	71 81       	ldd	r23, Z+1	; 0x01
    37bc:	82 81       	ldd	r24, Z+2	; 0x02
    37be:	93 81       	ldd	r25, Z+3	; 0x03
    37c0:	20 e0       	ldi	r18, 0x00	; 0
    37c2:	30 e0       	ldi	r19, 0x00	; 0
    37c4:	40 e8       	ldi	r20, 0x80	; 128
    37c6:	5f e3       	ldi	r21, 0x3F	; 63
    37c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37cc:	88 23       	and	r24, r24
    37ce:	44 f4       	brge	.+16     	; 0x37e0 <STEPPER_voidOn+0xbda>
		__ticks = 1;
    37d0:	fe 01       	movw	r30, r28
    37d2:	eb 51       	subi	r30, 0x1B	; 27
    37d4:	ff 4f       	sbci	r31, 0xFF	; 255
    37d6:	81 e0       	ldi	r24, 0x01	; 1
    37d8:	90 e0       	ldi	r25, 0x00	; 0
    37da:	91 83       	std	Z+1, r25	; 0x01
    37dc:	80 83       	st	Z, r24
    37de:	65 c0       	rjmp	.+202    	; 0x38aa <STEPPER_voidOn+0xca4>
	else if (__tmp > 65535)
    37e0:	fe 01       	movw	r30, r28
    37e2:	e9 51       	subi	r30, 0x19	; 25
    37e4:	ff 4f       	sbci	r31, 0xFF	; 255
    37e6:	60 81       	ld	r22, Z
    37e8:	71 81       	ldd	r23, Z+1	; 0x01
    37ea:	82 81       	ldd	r24, Z+2	; 0x02
    37ec:	93 81       	ldd	r25, Z+3	; 0x03
    37ee:	20 e0       	ldi	r18, 0x00	; 0
    37f0:	3f ef       	ldi	r19, 0xFF	; 255
    37f2:	4f e7       	ldi	r20, 0x7F	; 127
    37f4:	57 e4       	ldi	r21, 0x47	; 71
    37f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37fa:	18 16       	cp	r1, r24
    37fc:	0c f0       	brlt	.+2      	; 0x3800 <STEPPER_voidOn+0xbfa>
    37fe:	44 c0       	rjmp	.+136    	; 0x3888 <STEPPER_voidOn+0xc82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3800:	fe 01       	movw	r30, r28
    3802:	e5 51       	subi	r30, 0x15	; 21
    3804:	ff 4f       	sbci	r31, 0xFF	; 255
    3806:	60 81       	ld	r22, Z
    3808:	71 81       	ldd	r23, Z+1	; 0x01
    380a:	82 81       	ldd	r24, Z+2	; 0x02
    380c:	93 81       	ldd	r25, Z+3	; 0x03
    380e:	20 e0       	ldi	r18, 0x00	; 0
    3810:	30 e0       	ldi	r19, 0x00	; 0
    3812:	40 e2       	ldi	r20, 0x20	; 32
    3814:	51 e4       	ldi	r21, 0x41	; 65
    3816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    381a:	dc 01       	movw	r26, r24
    381c:	cb 01       	movw	r24, r22
    381e:	8e 01       	movw	r16, r28
    3820:	0b 51       	subi	r16, 0x1B	; 27
    3822:	1f 4f       	sbci	r17, 0xFF	; 255
    3824:	bc 01       	movw	r22, r24
    3826:	cd 01       	movw	r24, r26
    3828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    382c:	dc 01       	movw	r26, r24
    382e:	cb 01       	movw	r24, r22
    3830:	f8 01       	movw	r30, r16
    3832:	91 83       	std	Z+1, r25	; 0x01
    3834:	80 83       	st	Z, r24
    3836:	1f c0       	rjmp	.+62     	; 0x3876 <STEPPER_voidOn+0xc70>
    3838:	fe 01       	movw	r30, r28
    383a:	ed 51       	subi	r30, 0x1D	; 29
    383c:	ff 4f       	sbci	r31, 0xFF	; 255
    383e:	80 e9       	ldi	r24, 0x90	; 144
    3840:	91 e0       	ldi	r25, 0x01	; 1
    3842:	91 83       	std	Z+1, r25	; 0x01
    3844:	80 83       	st	Z, r24
    3846:	fe 01       	movw	r30, r28
    3848:	ed 51       	subi	r30, 0x1D	; 29
    384a:	ff 4f       	sbci	r31, 0xFF	; 255
    384c:	80 81       	ld	r24, Z
    384e:	91 81       	ldd	r25, Z+1	; 0x01
    3850:	01 97       	sbiw	r24, 0x01	; 1
    3852:	f1 f7       	brne	.-4      	; 0x3850 <STEPPER_voidOn+0xc4a>
    3854:	fe 01       	movw	r30, r28
    3856:	ed 51       	subi	r30, 0x1D	; 29
    3858:	ff 4f       	sbci	r31, 0xFF	; 255
    385a:	91 83       	std	Z+1, r25	; 0x01
    385c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    385e:	de 01       	movw	r26, r28
    3860:	ab 51       	subi	r26, 0x1B	; 27
    3862:	bf 4f       	sbci	r27, 0xFF	; 255
    3864:	fe 01       	movw	r30, r28
    3866:	eb 51       	subi	r30, 0x1B	; 27
    3868:	ff 4f       	sbci	r31, 0xFF	; 255
    386a:	80 81       	ld	r24, Z
    386c:	91 81       	ldd	r25, Z+1	; 0x01
    386e:	01 97       	sbiw	r24, 0x01	; 1
    3870:	11 96       	adiw	r26, 0x01	; 1
    3872:	9c 93       	st	X, r25
    3874:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3876:	fe 01       	movw	r30, r28
    3878:	eb 51       	subi	r30, 0x1B	; 27
    387a:	ff 4f       	sbci	r31, 0xFF	; 255
    387c:	80 81       	ld	r24, Z
    387e:	91 81       	ldd	r25, Z+1	; 0x01
    3880:	00 97       	sbiw	r24, 0x00	; 0
    3882:	d1 f6       	brne	.-76     	; 0x3838 <STEPPER_voidOn+0xc32>
    3884:	0c 94 c4 27 	jmp	0x4f88	; 0x4f88 <STEPPER_voidOn+0x2382>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3888:	8e 01       	movw	r16, r28
    388a:	0b 51       	subi	r16, 0x1B	; 27
    388c:	1f 4f       	sbci	r17, 0xFF	; 255
    388e:	fe 01       	movw	r30, r28
    3890:	e9 51       	subi	r30, 0x19	; 25
    3892:	ff 4f       	sbci	r31, 0xFF	; 255
    3894:	60 81       	ld	r22, Z
    3896:	71 81       	ldd	r23, Z+1	; 0x01
    3898:	82 81       	ldd	r24, Z+2	; 0x02
    389a:	93 81       	ldd	r25, Z+3	; 0x03
    389c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a0:	dc 01       	movw	r26, r24
    38a2:	cb 01       	movw	r24, r22
    38a4:	f8 01       	movw	r30, r16
    38a6:	91 83       	std	Z+1, r25	; 0x01
    38a8:	80 83       	st	Z, r24
    38aa:	de 01       	movw	r26, r28
    38ac:	af 51       	subi	r26, 0x1F	; 31
    38ae:	bf 4f       	sbci	r27, 0xFF	; 255
    38b0:	fe 01       	movw	r30, r28
    38b2:	eb 51       	subi	r30, 0x1B	; 27
    38b4:	ff 4f       	sbci	r31, 0xFF	; 255
    38b6:	80 81       	ld	r24, Z
    38b8:	91 81       	ldd	r25, Z+1	; 0x01
    38ba:	11 96       	adiw	r26, 0x01	; 1
    38bc:	9c 93       	st	X, r25
    38be:	8e 93       	st	-X, r24
    38c0:	fe 01       	movw	r30, r28
    38c2:	ef 51       	subi	r30, 0x1F	; 31
    38c4:	ff 4f       	sbci	r31, 0xFF	; 255
    38c6:	80 81       	ld	r24, Z
    38c8:	91 81       	ldd	r25, Z+1	; 0x01
    38ca:	01 97       	sbiw	r24, 0x01	; 1
    38cc:	f1 f7       	brne	.-4      	; 0x38ca <STEPPER_voidOn+0xcc4>
    38ce:	fe 01       	movw	r30, r28
    38d0:	ef 51       	subi	r30, 0x1F	; 31
    38d2:	ff 4f       	sbci	r31, 0xFF	; 255
    38d4:	91 83       	std	Z+1, r25	; 0x01
    38d6:	80 83       	st	Z, r24
    38d8:	0c 94 c4 27 	jmp	0x4f88	; 0x4f88 <STEPPER_voidOn+0x2382>



		}

	}else if( Copy_u8StepType == STEPPER_HALF_STEP ){
    38dc:	fe 01       	movw	r30, r28
    38de:	ef 5a       	subi	r30, 0xAF	; 175
    38e0:	fe 4f       	sbci	r31, 0xFE	; 254
    38e2:	80 81       	ld	r24, Z
    38e4:	88 23       	and	r24, r24
    38e6:	11 f0       	breq	.+4      	; 0x38ec <STEPPER_voidOn+0xce6>
    38e8:	0c 94 c4 27 	jmp	0x4f88	; 0x4f88 <STEPPER_voidOn+0x2382>

		if( Copy_u8Direction == STEPPER_CLOCK_WISE ){
    38ec:	fe 01       	movw	r30, r28
    38ee:	ee 5a       	subi	r30, 0xAE	; 174
    38f0:	fe 4f       	sbci	r31, 0xFE	; 254
    38f2:	80 81       	ld	r24, Z
    38f4:	81 30       	cpi	r24, 0x01	; 1
    38f6:	09 f0       	breq	.+2      	; 0x38fa <STEPPER_voidOn+0xcf4>
    38f8:	3a c6       	rjmp	.+3188   	; 0x456e <STEPPER_voidOn+0x1968>


				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_u8PIN_LOW  );
    38fa:	82 e0       	ldi	r24, 0x02	; 2
    38fc:	63 e0       	ldi	r22, 0x03	; 3
    38fe:	40 e0       	ldi	r20, 0x00	; 0
    3900:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_u8PIN_HIGH );
    3904:	82 e0       	ldi	r24, 0x02	; 2
    3906:	64 e0       	ldi	r22, 0x04	; 4
    3908:	41 e0       	ldi	r20, 0x01	; 1
    390a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_u8PIN_HIGH );
    390e:	82 e0       	ldi	r24, 0x02	; 2
    3910:	65 e0       	ldi	r22, 0x05	; 5
    3912:	41 e0       	ldi	r20, 0x01	; 1
    3914:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_u8PIN_HIGH );
    3918:	82 e0       	ldi	r24, 0x02	; 2
    391a:	66 e0       	ldi	r22, 0x06	; 6
    391c:	41 e0       	ldi	r20, 0x01	; 1
    391e:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    3922:	fe 01       	movw	r30, r28
    3924:	e3 52       	subi	r30, 0x23	; 35
    3926:	ff 4f       	sbci	r31, 0xFF	; 255
    3928:	80 e0       	ldi	r24, 0x00	; 0
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	a8 e4       	ldi	r26, 0x48	; 72
    392e:	b2 e4       	ldi	r27, 0x42	; 66
    3930:	80 83       	st	Z, r24
    3932:	91 83       	std	Z+1, r25	; 0x01
    3934:	a2 83       	std	Z+2, r26	; 0x02
    3936:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3938:	8e 01       	movw	r16, r28
    393a:	07 52       	subi	r16, 0x27	; 39
    393c:	1f 4f       	sbci	r17, 0xFF	; 255
    393e:	fe 01       	movw	r30, r28
    3940:	e3 52       	subi	r30, 0x23	; 35
    3942:	ff 4f       	sbci	r31, 0xFF	; 255
    3944:	60 81       	ld	r22, Z
    3946:	71 81       	ldd	r23, Z+1	; 0x01
    3948:	82 81       	ldd	r24, Z+2	; 0x02
    394a:	93 81       	ldd	r25, Z+3	; 0x03
    394c:	20 e0       	ldi	r18, 0x00	; 0
    394e:	30 e0       	ldi	r19, 0x00	; 0
    3950:	4a e7       	ldi	r20, 0x7A	; 122
    3952:	55 e4       	ldi	r21, 0x45	; 69
    3954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3958:	dc 01       	movw	r26, r24
    395a:	cb 01       	movw	r24, r22
    395c:	f8 01       	movw	r30, r16
    395e:	80 83       	st	Z, r24
    3960:	91 83       	std	Z+1, r25	; 0x01
    3962:	a2 83       	std	Z+2, r26	; 0x02
    3964:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3966:	fe 01       	movw	r30, r28
    3968:	e7 52       	subi	r30, 0x27	; 39
    396a:	ff 4f       	sbci	r31, 0xFF	; 255
    396c:	60 81       	ld	r22, Z
    396e:	71 81       	ldd	r23, Z+1	; 0x01
    3970:	82 81       	ldd	r24, Z+2	; 0x02
    3972:	93 81       	ldd	r25, Z+3	; 0x03
    3974:	20 e0       	ldi	r18, 0x00	; 0
    3976:	30 e0       	ldi	r19, 0x00	; 0
    3978:	40 e8       	ldi	r20, 0x80	; 128
    397a:	5f e3       	ldi	r21, 0x3F	; 63
    397c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3980:	88 23       	and	r24, r24
    3982:	44 f4       	brge	.+16     	; 0x3994 <STEPPER_voidOn+0xd8e>
		__ticks = 1;
    3984:	fe 01       	movw	r30, r28
    3986:	e9 52       	subi	r30, 0x29	; 41
    3988:	ff 4f       	sbci	r31, 0xFF	; 255
    398a:	81 e0       	ldi	r24, 0x01	; 1
    398c:	90 e0       	ldi	r25, 0x00	; 0
    398e:	91 83       	std	Z+1, r25	; 0x01
    3990:	80 83       	st	Z, r24
    3992:	64 c0       	rjmp	.+200    	; 0x3a5c <STEPPER_voidOn+0xe56>
	else if (__tmp > 65535)
    3994:	fe 01       	movw	r30, r28
    3996:	e7 52       	subi	r30, 0x27	; 39
    3998:	ff 4f       	sbci	r31, 0xFF	; 255
    399a:	60 81       	ld	r22, Z
    399c:	71 81       	ldd	r23, Z+1	; 0x01
    399e:	82 81       	ldd	r24, Z+2	; 0x02
    39a0:	93 81       	ldd	r25, Z+3	; 0x03
    39a2:	20 e0       	ldi	r18, 0x00	; 0
    39a4:	3f ef       	ldi	r19, 0xFF	; 255
    39a6:	4f e7       	ldi	r20, 0x7F	; 127
    39a8:	57 e4       	ldi	r21, 0x47	; 71
    39aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39ae:	18 16       	cp	r1, r24
    39b0:	0c f0       	brlt	.+2      	; 0x39b4 <STEPPER_voidOn+0xdae>
    39b2:	43 c0       	rjmp	.+134    	; 0x3a3a <STEPPER_voidOn+0xe34>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39b4:	fe 01       	movw	r30, r28
    39b6:	e3 52       	subi	r30, 0x23	; 35
    39b8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ba:	60 81       	ld	r22, Z
    39bc:	71 81       	ldd	r23, Z+1	; 0x01
    39be:	82 81       	ldd	r24, Z+2	; 0x02
    39c0:	93 81       	ldd	r25, Z+3	; 0x03
    39c2:	20 e0       	ldi	r18, 0x00	; 0
    39c4:	30 e0       	ldi	r19, 0x00	; 0
    39c6:	40 e2       	ldi	r20, 0x20	; 32
    39c8:	51 e4       	ldi	r21, 0x41	; 65
    39ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ce:	dc 01       	movw	r26, r24
    39d0:	cb 01       	movw	r24, r22
    39d2:	8e 01       	movw	r16, r28
    39d4:	09 52       	subi	r16, 0x29	; 41
    39d6:	1f 4f       	sbci	r17, 0xFF	; 255
    39d8:	bc 01       	movw	r22, r24
    39da:	cd 01       	movw	r24, r26
    39dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39e0:	dc 01       	movw	r26, r24
    39e2:	cb 01       	movw	r24, r22
    39e4:	f8 01       	movw	r30, r16
    39e6:	91 83       	std	Z+1, r25	; 0x01
    39e8:	80 83       	st	Z, r24
    39ea:	1f c0       	rjmp	.+62     	; 0x3a2a <STEPPER_voidOn+0xe24>
    39ec:	fe 01       	movw	r30, r28
    39ee:	eb 52       	subi	r30, 0x2B	; 43
    39f0:	ff 4f       	sbci	r31, 0xFF	; 255
    39f2:	80 e9       	ldi	r24, 0x90	; 144
    39f4:	91 e0       	ldi	r25, 0x01	; 1
    39f6:	91 83       	std	Z+1, r25	; 0x01
    39f8:	80 83       	st	Z, r24
    39fa:	fe 01       	movw	r30, r28
    39fc:	eb 52       	subi	r30, 0x2B	; 43
    39fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3a00:	80 81       	ld	r24, Z
    3a02:	91 81       	ldd	r25, Z+1	; 0x01
    3a04:	01 97       	sbiw	r24, 0x01	; 1
    3a06:	f1 f7       	brne	.-4      	; 0x3a04 <STEPPER_voidOn+0xdfe>
    3a08:	fe 01       	movw	r30, r28
    3a0a:	eb 52       	subi	r30, 0x2B	; 43
    3a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0e:	91 83       	std	Z+1, r25	; 0x01
    3a10:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a12:	de 01       	movw	r26, r28
    3a14:	a9 52       	subi	r26, 0x29	; 41
    3a16:	bf 4f       	sbci	r27, 0xFF	; 255
    3a18:	fe 01       	movw	r30, r28
    3a1a:	e9 52       	subi	r30, 0x29	; 41
    3a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1e:	80 81       	ld	r24, Z
    3a20:	91 81       	ldd	r25, Z+1	; 0x01
    3a22:	01 97       	sbiw	r24, 0x01	; 1
    3a24:	11 96       	adiw	r26, 0x01	; 1
    3a26:	9c 93       	st	X, r25
    3a28:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a2a:	fe 01       	movw	r30, r28
    3a2c:	e9 52       	subi	r30, 0x29	; 41
    3a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a30:	80 81       	ld	r24, Z
    3a32:	91 81       	ldd	r25, Z+1	; 0x01
    3a34:	00 97       	sbiw	r24, 0x00	; 0
    3a36:	d1 f6       	brne	.-76     	; 0x39ec <STEPPER_voidOn+0xde6>
    3a38:	27 c0       	rjmp	.+78     	; 0x3a88 <STEPPER_voidOn+0xe82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a3a:	8e 01       	movw	r16, r28
    3a3c:	09 52       	subi	r16, 0x29	; 41
    3a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a40:	fe 01       	movw	r30, r28
    3a42:	e7 52       	subi	r30, 0x27	; 39
    3a44:	ff 4f       	sbci	r31, 0xFF	; 255
    3a46:	60 81       	ld	r22, Z
    3a48:	71 81       	ldd	r23, Z+1	; 0x01
    3a4a:	82 81       	ldd	r24, Z+2	; 0x02
    3a4c:	93 81       	ldd	r25, Z+3	; 0x03
    3a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a52:	dc 01       	movw	r26, r24
    3a54:	cb 01       	movw	r24, r22
    3a56:	f8 01       	movw	r30, r16
    3a58:	91 83       	std	Z+1, r25	; 0x01
    3a5a:	80 83       	st	Z, r24
    3a5c:	de 01       	movw	r26, r28
    3a5e:	ad 52       	subi	r26, 0x2D	; 45
    3a60:	bf 4f       	sbci	r27, 0xFF	; 255
    3a62:	fe 01       	movw	r30, r28
    3a64:	e9 52       	subi	r30, 0x29	; 41
    3a66:	ff 4f       	sbci	r31, 0xFF	; 255
    3a68:	80 81       	ld	r24, Z
    3a6a:	91 81       	ldd	r25, Z+1	; 0x01
    3a6c:	8d 93       	st	X+, r24
    3a6e:	9c 93       	st	X, r25
    3a70:	fe 01       	movw	r30, r28
    3a72:	ed 52       	subi	r30, 0x2D	; 45
    3a74:	ff 4f       	sbci	r31, 0xFF	; 255
    3a76:	80 81       	ld	r24, Z
    3a78:	91 81       	ldd	r25, Z+1	; 0x01
    3a7a:	01 97       	sbiw	r24, 0x01	; 1
    3a7c:	f1 f7       	brne	.-4      	; 0x3a7a <STEPPER_voidOn+0xe74>
    3a7e:	fe 01       	movw	r30, r28
    3a80:	ed 52       	subi	r30, 0x2D	; 45
    3a82:	ff 4f       	sbci	r31, 0xFF	; 255
    3a84:	91 83       	std	Z+1, r25	; 0x01
    3a86:	80 83       	st	Z, r24
				_delay_ms( 50 );

				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_u8PIN_LOW  );
    3a88:	82 e0       	ldi	r24, 0x02	; 2
    3a8a:	63 e0       	ldi	r22, 0x03	; 3
    3a8c:	40 e0       	ldi	r20, 0x00	; 0
    3a8e:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_u8PIN_LOW  );
    3a92:	82 e0       	ldi	r24, 0x02	; 2
    3a94:	64 e0       	ldi	r22, 0x04	; 4
    3a96:	40 e0       	ldi	r20, 0x00	; 0
    3a98:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_u8PIN_HIGH   );
    3a9c:	82 e0       	ldi	r24, 0x02	; 2
    3a9e:	65 e0       	ldi	r22, 0x05	; 5
    3aa0:	41 e0       	ldi	r20, 0x01	; 1
    3aa2:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_u8PIN_HIGH   );
    3aa6:	82 e0       	ldi	r24, 0x02	; 2
    3aa8:	66 e0       	ldi	r22, 0x06	; 6
    3aaa:	41 e0       	ldi	r20, 0x01	; 1
    3aac:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    3ab0:	fe 01       	movw	r30, r28
    3ab2:	e1 53       	subi	r30, 0x31	; 49
    3ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab6:	80 e0       	ldi	r24, 0x00	; 0
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	a8 e4       	ldi	r26, 0x48	; 72
    3abc:	b2 e4       	ldi	r27, 0x42	; 66
    3abe:	80 83       	st	Z, r24
    3ac0:	91 83       	std	Z+1, r25	; 0x01
    3ac2:	a2 83       	std	Z+2, r26	; 0x02
    3ac4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ac6:	8e 01       	movw	r16, r28
    3ac8:	05 53       	subi	r16, 0x35	; 53
    3aca:	1f 4f       	sbci	r17, 0xFF	; 255
    3acc:	fe 01       	movw	r30, r28
    3ace:	e1 53       	subi	r30, 0x31	; 49
    3ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad2:	60 81       	ld	r22, Z
    3ad4:	71 81       	ldd	r23, Z+1	; 0x01
    3ad6:	82 81       	ldd	r24, Z+2	; 0x02
    3ad8:	93 81       	ldd	r25, Z+3	; 0x03
    3ada:	20 e0       	ldi	r18, 0x00	; 0
    3adc:	30 e0       	ldi	r19, 0x00	; 0
    3ade:	4a e7       	ldi	r20, 0x7A	; 122
    3ae0:	55 e4       	ldi	r21, 0x45	; 69
    3ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	cb 01       	movw	r24, r22
    3aea:	f8 01       	movw	r30, r16
    3aec:	80 83       	st	Z, r24
    3aee:	91 83       	std	Z+1, r25	; 0x01
    3af0:	a2 83       	std	Z+2, r26	; 0x02
    3af2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3af4:	fe 01       	movw	r30, r28
    3af6:	e5 53       	subi	r30, 0x35	; 53
    3af8:	ff 4f       	sbci	r31, 0xFF	; 255
    3afa:	60 81       	ld	r22, Z
    3afc:	71 81       	ldd	r23, Z+1	; 0x01
    3afe:	82 81       	ldd	r24, Z+2	; 0x02
    3b00:	93 81       	ldd	r25, Z+3	; 0x03
    3b02:	20 e0       	ldi	r18, 0x00	; 0
    3b04:	30 e0       	ldi	r19, 0x00	; 0
    3b06:	40 e8       	ldi	r20, 0x80	; 128
    3b08:	5f e3       	ldi	r21, 0x3F	; 63
    3b0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b0e:	88 23       	and	r24, r24
    3b10:	44 f4       	brge	.+16     	; 0x3b22 <STEPPER_voidOn+0xf1c>
		__ticks = 1;
    3b12:	fe 01       	movw	r30, r28
    3b14:	e7 53       	subi	r30, 0x37	; 55
    3b16:	ff 4f       	sbci	r31, 0xFF	; 255
    3b18:	81 e0       	ldi	r24, 0x01	; 1
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	91 83       	std	Z+1, r25	; 0x01
    3b1e:	80 83       	st	Z, r24
    3b20:	64 c0       	rjmp	.+200    	; 0x3bea <STEPPER_voidOn+0xfe4>
	else if (__tmp > 65535)
    3b22:	fe 01       	movw	r30, r28
    3b24:	e5 53       	subi	r30, 0x35	; 53
    3b26:	ff 4f       	sbci	r31, 0xFF	; 255
    3b28:	60 81       	ld	r22, Z
    3b2a:	71 81       	ldd	r23, Z+1	; 0x01
    3b2c:	82 81       	ldd	r24, Z+2	; 0x02
    3b2e:	93 81       	ldd	r25, Z+3	; 0x03
    3b30:	20 e0       	ldi	r18, 0x00	; 0
    3b32:	3f ef       	ldi	r19, 0xFF	; 255
    3b34:	4f e7       	ldi	r20, 0x7F	; 127
    3b36:	57 e4       	ldi	r21, 0x47	; 71
    3b38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b3c:	18 16       	cp	r1, r24
    3b3e:	0c f0       	brlt	.+2      	; 0x3b42 <STEPPER_voidOn+0xf3c>
    3b40:	43 c0       	rjmp	.+134    	; 0x3bc8 <STEPPER_voidOn+0xfc2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b42:	fe 01       	movw	r30, r28
    3b44:	e1 53       	subi	r30, 0x31	; 49
    3b46:	ff 4f       	sbci	r31, 0xFF	; 255
    3b48:	60 81       	ld	r22, Z
    3b4a:	71 81       	ldd	r23, Z+1	; 0x01
    3b4c:	82 81       	ldd	r24, Z+2	; 0x02
    3b4e:	93 81       	ldd	r25, Z+3	; 0x03
    3b50:	20 e0       	ldi	r18, 0x00	; 0
    3b52:	30 e0       	ldi	r19, 0x00	; 0
    3b54:	40 e2       	ldi	r20, 0x20	; 32
    3b56:	51 e4       	ldi	r21, 0x41	; 65
    3b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b5c:	dc 01       	movw	r26, r24
    3b5e:	cb 01       	movw	r24, r22
    3b60:	8e 01       	movw	r16, r28
    3b62:	07 53       	subi	r16, 0x37	; 55
    3b64:	1f 4f       	sbci	r17, 0xFF	; 255
    3b66:	bc 01       	movw	r22, r24
    3b68:	cd 01       	movw	r24, r26
    3b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b6e:	dc 01       	movw	r26, r24
    3b70:	cb 01       	movw	r24, r22
    3b72:	f8 01       	movw	r30, r16
    3b74:	91 83       	std	Z+1, r25	; 0x01
    3b76:	80 83       	st	Z, r24
    3b78:	1f c0       	rjmp	.+62     	; 0x3bb8 <STEPPER_voidOn+0xfb2>
    3b7a:	fe 01       	movw	r30, r28
    3b7c:	e9 53       	subi	r30, 0x39	; 57
    3b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b80:	80 e9       	ldi	r24, 0x90	; 144
    3b82:	91 e0       	ldi	r25, 0x01	; 1
    3b84:	91 83       	std	Z+1, r25	; 0x01
    3b86:	80 83       	st	Z, r24
    3b88:	fe 01       	movw	r30, r28
    3b8a:	e9 53       	subi	r30, 0x39	; 57
    3b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8e:	80 81       	ld	r24, Z
    3b90:	91 81       	ldd	r25, Z+1	; 0x01
    3b92:	01 97       	sbiw	r24, 0x01	; 1
    3b94:	f1 f7       	brne	.-4      	; 0x3b92 <STEPPER_voidOn+0xf8c>
    3b96:	fe 01       	movw	r30, r28
    3b98:	e9 53       	subi	r30, 0x39	; 57
    3b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9c:	91 83       	std	Z+1, r25	; 0x01
    3b9e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ba0:	de 01       	movw	r26, r28
    3ba2:	a7 53       	subi	r26, 0x37	; 55
    3ba4:	bf 4f       	sbci	r27, 0xFF	; 255
    3ba6:	fe 01       	movw	r30, r28
    3ba8:	e7 53       	subi	r30, 0x37	; 55
    3baa:	ff 4f       	sbci	r31, 0xFF	; 255
    3bac:	80 81       	ld	r24, Z
    3bae:	91 81       	ldd	r25, Z+1	; 0x01
    3bb0:	01 97       	sbiw	r24, 0x01	; 1
    3bb2:	11 96       	adiw	r26, 0x01	; 1
    3bb4:	9c 93       	st	X, r25
    3bb6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bb8:	fe 01       	movw	r30, r28
    3bba:	e7 53       	subi	r30, 0x37	; 55
    3bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbe:	80 81       	ld	r24, Z
    3bc0:	91 81       	ldd	r25, Z+1	; 0x01
    3bc2:	00 97       	sbiw	r24, 0x00	; 0
    3bc4:	d1 f6       	brne	.-76     	; 0x3b7a <STEPPER_voidOn+0xf74>
    3bc6:	27 c0       	rjmp	.+78     	; 0x3c16 <STEPPER_voidOn+0x1010>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bc8:	8e 01       	movw	r16, r28
    3bca:	07 53       	subi	r16, 0x37	; 55
    3bcc:	1f 4f       	sbci	r17, 0xFF	; 255
    3bce:	fe 01       	movw	r30, r28
    3bd0:	e5 53       	subi	r30, 0x35	; 53
    3bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd4:	60 81       	ld	r22, Z
    3bd6:	71 81       	ldd	r23, Z+1	; 0x01
    3bd8:	82 81       	ldd	r24, Z+2	; 0x02
    3bda:	93 81       	ldd	r25, Z+3	; 0x03
    3bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be0:	dc 01       	movw	r26, r24
    3be2:	cb 01       	movw	r24, r22
    3be4:	f8 01       	movw	r30, r16
    3be6:	91 83       	std	Z+1, r25	; 0x01
    3be8:	80 83       	st	Z, r24
    3bea:	de 01       	movw	r26, r28
    3bec:	ab 53       	subi	r26, 0x3B	; 59
    3bee:	bf 4f       	sbci	r27, 0xFF	; 255
    3bf0:	fe 01       	movw	r30, r28
    3bf2:	e7 53       	subi	r30, 0x37	; 55
    3bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf6:	80 81       	ld	r24, Z
    3bf8:	91 81       	ldd	r25, Z+1	; 0x01
    3bfa:	8d 93       	st	X+, r24
    3bfc:	9c 93       	st	X, r25
    3bfe:	fe 01       	movw	r30, r28
    3c00:	eb 53       	subi	r30, 0x3B	; 59
    3c02:	ff 4f       	sbci	r31, 0xFF	; 255
    3c04:	80 81       	ld	r24, Z
    3c06:	91 81       	ldd	r25, Z+1	; 0x01
    3c08:	01 97       	sbiw	r24, 0x01	; 1
    3c0a:	f1 f7       	brne	.-4      	; 0x3c08 <STEPPER_voidOn+0x1002>
    3c0c:	fe 01       	movw	r30, r28
    3c0e:	eb 53       	subi	r30, 0x3B	; 59
    3c10:	ff 4f       	sbci	r31, 0xFF	; 255
    3c12:	91 83       	std	Z+1, r25	; 0x01
    3c14:	80 83       	st	Z, r24
				_delay_ms( 50 );

				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_u8PIN_HIGH  );
    3c16:	82 e0       	ldi	r24, 0x02	; 2
    3c18:	63 e0       	ldi	r22, 0x03	; 3
    3c1a:	41 e0       	ldi	r20, 0x01	; 1
    3c1c:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_u8PIN_LOW );
    3c20:	82 e0       	ldi	r24, 0x02	; 2
    3c22:	64 e0       	ldi	r22, 0x04	; 4
    3c24:	40 e0       	ldi	r20, 0x00	; 0
    3c26:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_u8PIN_HIGH  );
    3c2a:	82 e0       	ldi	r24, 0x02	; 2
    3c2c:	65 e0       	ldi	r22, 0x05	; 5
    3c2e:	41 e0       	ldi	r20, 0x01	; 1
    3c30:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_u8PIN_HIGH  );
    3c34:	82 e0       	ldi	r24, 0x02	; 2
    3c36:	66 e0       	ldi	r22, 0x06	; 6
    3c38:	41 e0       	ldi	r20, 0x01	; 1
    3c3a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    3c3e:	fe 01       	movw	r30, r28
    3c40:	ef 53       	subi	r30, 0x3F	; 63
    3c42:	ff 4f       	sbci	r31, 0xFF	; 255
    3c44:	80 e0       	ldi	r24, 0x00	; 0
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	a8 e4       	ldi	r26, 0x48	; 72
    3c4a:	b2 e4       	ldi	r27, 0x42	; 66
    3c4c:	80 83       	st	Z, r24
    3c4e:	91 83       	std	Z+1, r25	; 0x01
    3c50:	a2 83       	std	Z+2, r26	; 0x02
    3c52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c54:	8e 01       	movw	r16, r28
    3c56:	03 54       	subi	r16, 0x43	; 67
    3c58:	1f 4f       	sbci	r17, 0xFF	; 255
    3c5a:	fe 01       	movw	r30, r28
    3c5c:	ef 53       	subi	r30, 0x3F	; 63
    3c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c60:	60 81       	ld	r22, Z
    3c62:	71 81       	ldd	r23, Z+1	; 0x01
    3c64:	82 81       	ldd	r24, Z+2	; 0x02
    3c66:	93 81       	ldd	r25, Z+3	; 0x03
    3c68:	20 e0       	ldi	r18, 0x00	; 0
    3c6a:	30 e0       	ldi	r19, 0x00	; 0
    3c6c:	4a e7       	ldi	r20, 0x7A	; 122
    3c6e:	55 e4       	ldi	r21, 0x45	; 69
    3c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c74:	dc 01       	movw	r26, r24
    3c76:	cb 01       	movw	r24, r22
    3c78:	f8 01       	movw	r30, r16
    3c7a:	80 83       	st	Z, r24
    3c7c:	91 83       	std	Z+1, r25	; 0x01
    3c7e:	a2 83       	std	Z+2, r26	; 0x02
    3c80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c82:	fe 01       	movw	r30, r28
    3c84:	e3 54       	subi	r30, 0x43	; 67
    3c86:	ff 4f       	sbci	r31, 0xFF	; 255
    3c88:	60 81       	ld	r22, Z
    3c8a:	71 81       	ldd	r23, Z+1	; 0x01
    3c8c:	82 81       	ldd	r24, Z+2	; 0x02
    3c8e:	93 81       	ldd	r25, Z+3	; 0x03
    3c90:	20 e0       	ldi	r18, 0x00	; 0
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	40 e8       	ldi	r20, 0x80	; 128
    3c96:	5f e3       	ldi	r21, 0x3F	; 63
    3c98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c9c:	88 23       	and	r24, r24
    3c9e:	44 f4       	brge	.+16     	; 0x3cb0 <STEPPER_voidOn+0x10aa>
		__ticks = 1;
    3ca0:	fe 01       	movw	r30, r28
    3ca2:	e5 54       	subi	r30, 0x45	; 69
    3ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca6:	81 e0       	ldi	r24, 0x01	; 1
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	91 83       	std	Z+1, r25	; 0x01
    3cac:	80 83       	st	Z, r24
    3cae:	64 c0       	rjmp	.+200    	; 0x3d78 <STEPPER_voidOn+0x1172>
	else if (__tmp > 65535)
    3cb0:	fe 01       	movw	r30, r28
    3cb2:	e3 54       	subi	r30, 0x43	; 67
    3cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb6:	60 81       	ld	r22, Z
    3cb8:	71 81       	ldd	r23, Z+1	; 0x01
    3cba:	82 81       	ldd	r24, Z+2	; 0x02
    3cbc:	93 81       	ldd	r25, Z+3	; 0x03
    3cbe:	20 e0       	ldi	r18, 0x00	; 0
    3cc0:	3f ef       	ldi	r19, 0xFF	; 255
    3cc2:	4f e7       	ldi	r20, 0x7F	; 127
    3cc4:	57 e4       	ldi	r21, 0x47	; 71
    3cc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cca:	18 16       	cp	r1, r24
    3ccc:	0c f0       	brlt	.+2      	; 0x3cd0 <STEPPER_voidOn+0x10ca>
    3cce:	43 c0       	rjmp	.+134    	; 0x3d56 <STEPPER_voidOn+0x1150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cd0:	fe 01       	movw	r30, r28
    3cd2:	ef 53       	subi	r30, 0x3F	; 63
    3cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd6:	60 81       	ld	r22, Z
    3cd8:	71 81       	ldd	r23, Z+1	; 0x01
    3cda:	82 81       	ldd	r24, Z+2	; 0x02
    3cdc:	93 81       	ldd	r25, Z+3	; 0x03
    3cde:	20 e0       	ldi	r18, 0x00	; 0
    3ce0:	30 e0       	ldi	r19, 0x00	; 0
    3ce2:	40 e2       	ldi	r20, 0x20	; 32
    3ce4:	51 e4       	ldi	r21, 0x41	; 65
    3ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cea:	dc 01       	movw	r26, r24
    3cec:	cb 01       	movw	r24, r22
    3cee:	8e 01       	movw	r16, r28
    3cf0:	05 54       	subi	r16, 0x45	; 69
    3cf2:	1f 4f       	sbci	r17, 0xFF	; 255
    3cf4:	bc 01       	movw	r22, r24
    3cf6:	cd 01       	movw	r24, r26
    3cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cfc:	dc 01       	movw	r26, r24
    3cfe:	cb 01       	movw	r24, r22
    3d00:	f8 01       	movw	r30, r16
    3d02:	91 83       	std	Z+1, r25	; 0x01
    3d04:	80 83       	st	Z, r24
    3d06:	1f c0       	rjmp	.+62     	; 0x3d46 <STEPPER_voidOn+0x1140>
    3d08:	fe 01       	movw	r30, r28
    3d0a:	e7 54       	subi	r30, 0x47	; 71
    3d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0e:	80 e9       	ldi	r24, 0x90	; 144
    3d10:	91 e0       	ldi	r25, 0x01	; 1
    3d12:	91 83       	std	Z+1, r25	; 0x01
    3d14:	80 83       	st	Z, r24
    3d16:	fe 01       	movw	r30, r28
    3d18:	e7 54       	subi	r30, 0x47	; 71
    3d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1c:	80 81       	ld	r24, Z
    3d1e:	91 81       	ldd	r25, Z+1	; 0x01
    3d20:	01 97       	sbiw	r24, 0x01	; 1
    3d22:	f1 f7       	brne	.-4      	; 0x3d20 <STEPPER_voidOn+0x111a>
    3d24:	fe 01       	movw	r30, r28
    3d26:	e7 54       	subi	r30, 0x47	; 71
    3d28:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2a:	91 83       	std	Z+1, r25	; 0x01
    3d2c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d2e:	de 01       	movw	r26, r28
    3d30:	a5 54       	subi	r26, 0x45	; 69
    3d32:	bf 4f       	sbci	r27, 0xFF	; 255
    3d34:	fe 01       	movw	r30, r28
    3d36:	e5 54       	subi	r30, 0x45	; 69
    3d38:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3a:	80 81       	ld	r24, Z
    3d3c:	91 81       	ldd	r25, Z+1	; 0x01
    3d3e:	01 97       	sbiw	r24, 0x01	; 1
    3d40:	11 96       	adiw	r26, 0x01	; 1
    3d42:	9c 93       	st	X, r25
    3d44:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d46:	fe 01       	movw	r30, r28
    3d48:	e5 54       	subi	r30, 0x45	; 69
    3d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4c:	80 81       	ld	r24, Z
    3d4e:	91 81       	ldd	r25, Z+1	; 0x01
    3d50:	00 97       	sbiw	r24, 0x00	; 0
    3d52:	d1 f6       	brne	.-76     	; 0x3d08 <STEPPER_voidOn+0x1102>
    3d54:	27 c0       	rjmp	.+78     	; 0x3da4 <STEPPER_voidOn+0x119e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d56:	8e 01       	movw	r16, r28
    3d58:	05 54       	subi	r16, 0x45	; 69
    3d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d5c:	fe 01       	movw	r30, r28
    3d5e:	e3 54       	subi	r30, 0x43	; 67
    3d60:	ff 4f       	sbci	r31, 0xFF	; 255
    3d62:	60 81       	ld	r22, Z
    3d64:	71 81       	ldd	r23, Z+1	; 0x01
    3d66:	82 81       	ldd	r24, Z+2	; 0x02
    3d68:	93 81       	ldd	r25, Z+3	; 0x03
    3d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d6e:	dc 01       	movw	r26, r24
    3d70:	cb 01       	movw	r24, r22
    3d72:	f8 01       	movw	r30, r16
    3d74:	91 83       	std	Z+1, r25	; 0x01
    3d76:	80 83       	st	Z, r24
    3d78:	de 01       	movw	r26, r28
    3d7a:	a9 54       	subi	r26, 0x49	; 73
    3d7c:	bf 4f       	sbci	r27, 0xFF	; 255
    3d7e:	fe 01       	movw	r30, r28
    3d80:	e5 54       	subi	r30, 0x45	; 69
    3d82:	ff 4f       	sbci	r31, 0xFF	; 255
    3d84:	80 81       	ld	r24, Z
    3d86:	91 81       	ldd	r25, Z+1	; 0x01
    3d88:	8d 93       	st	X+, r24
    3d8a:	9c 93       	st	X, r25
    3d8c:	fe 01       	movw	r30, r28
    3d8e:	e9 54       	subi	r30, 0x49	; 73
    3d90:	ff 4f       	sbci	r31, 0xFF	; 255
    3d92:	80 81       	ld	r24, Z
    3d94:	91 81       	ldd	r25, Z+1	; 0x01
    3d96:	01 97       	sbiw	r24, 0x01	; 1
    3d98:	f1 f7       	brne	.-4      	; 0x3d96 <STEPPER_voidOn+0x1190>
    3d9a:	fe 01       	movw	r30, r28
    3d9c:	e9 54       	subi	r30, 0x49	; 73
    3d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3da0:	91 83       	std	Z+1, r25	; 0x01
    3da2:	80 83       	st	Z, r24
				_delay_ms( 50 );

				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_u8PIN_HIGH  );
    3da4:	82 e0       	ldi	r24, 0x02	; 2
    3da6:	63 e0       	ldi	r22, 0x03	; 3
    3da8:	41 e0       	ldi	r20, 0x01	; 1
    3daa:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_u8PIN_LOW );
    3dae:	82 e0       	ldi	r24, 0x02	; 2
    3db0:	64 e0       	ldi	r22, 0x04	; 4
    3db2:	40 e0       	ldi	r20, 0x00	; 0
    3db4:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_u8PIN_LOW );
    3db8:	82 e0       	ldi	r24, 0x02	; 2
    3dba:	65 e0       	ldi	r22, 0x05	; 5
    3dbc:	40 e0       	ldi	r20, 0x00	; 0
    3dbe:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_u8PIN_HIGH  );
    3dc2:	82 e0       	ldi	r24, 0x02	; 2
    3dc4:	66 e0       	ldi	r22, 0x06	; 6
    3dc6:	41 e0       	ldi	r20, 0x01	; 1
    3dc8:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    3dcc:	fe 01       	movw	r30, r28
    3dce:	ed 54       	subi	r30, 0x4D	; 77
    3dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd2:	80 e0       	ldi	r24, 0x00	; 0
    3dd4:	90 e0       	ldi	r25, 0x00	; 0
    3dd6:	a8 e4       	ldi	r26, 0x48	; 72
    3dd8:	b2 e4       	ldi	r27, 0x42	; 66
    3dda:	80 83       	st	Z, r24
    3ddc:	91 83       	std	Z+1, r25	; 0x01
    3dde:	a2 83       	std	Z+2, r26	; 0x02
    3de0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3de2:	8e 01       	movw	r16, r28
    3de4:	01 55       	subi	r16, 0x51	; 81
    3de6:	1f 4f       	sbci	r17, 0xFF	; 255
    3de8:	fe 01       	movw	r30, r28
    3dea:	ed 54       	subi	r30, 0x4D	; 77
    3dec:	ff 4f       	sbci	r31, 0xFF	; 255
    3dee:	60 81       	ld	r22, Z
    3df0:	71 81       	ldd	r23, Z+1	; 0x01
    3df2:	82 81       	ldd	r24, Z+2	; 0x02
    3df4:	93 81       	ldd	r25, Z+3	; 0x03
    3df6:	20 e0       	ldi	r18, 0x00	; 0
    3df8:	30 e0       	ldi	r19, 0x00	; 0
    3dfa:	4a e7       	ldi	r20, 0x7A	; 122
    3dfc:	55 e4       	ldi	r21, 0x45	; 69
    3dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e02:	dc 01       	movw	r26, r24
    3e04:	cb 01       	movw	r24, r22
    3e06:	f8 01       	movw	r30, r16
    3e08:	80 83       	st	Z, r24
    3e0a:	91 83       	std	Z+1, r25	; 0x01
    3e0c:	a2 83       	std	Z+2, r26	; 0x02
    3e0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e10:	fe 01       	movw	r30, r28
    3e12:	e1 55       	subi	r30, 0x51	; 81
    3e14:	ff 4f       	sbci	r31, 0xFF	; 255
    3e16:	60 81       	ld	r22, Z
    3e18:	71 81       	ldd	r23, Z+1	; 0x01
    3e1a:	82 81       	ldd	r24, Z+2	; 0x02
    3e1c:	93 81       	ldd	r25, Z+3	; 0x03
    3e1e:	20 e0       	ldi	r18, 0x00	; 0
    3e20:	30 e0       	ldi	r19, 0x00	; 0
    3e22:	40 e8       	ldi	r20, 0x80	; 128
    3e24:	5f e3       	ldi	r21, 0x3F	; 63
    3e26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e2a:	88 23       	and	r24, r24
    3e2c:	44 f4       	brge	.+16     	; 0x3e3e <STEPPER_voidOn+0x1238>
		__ticks = 1;
    3e2e:	fe 01       	movw	r30, r28
    3e30:	e3 55       	subi	r30, 0x53	; 83
    3e32:	ff 4f       	sbci	r31, 0xFF	; 255
    3e34:	81 e0       	ldi	r24, 0x01	; 1
    3e36:	90 e0       	ldi	r25, 0x00	; 0
    3e38:	91 83       	std	Z+1, r25	; 0x01
    3e3a:	80 83       	st	Z, r24
    3e3c:	64 c0       	rjmp	.+200    	; 0x3f06 <STEPPER_voidOn+0x1300>
	else if (__tmp > 65535)
    3e3e:	fe 01       	movw	r30, r28
    3e40:	e1 55       	subi	r30, 0x51	; 81
    3e42:	ff 4f       	sbci	r31, 0xFF	; 255
    3e44:	60 81       	ld	r22, Z
    3e46:	71 81       	ldd	r23, Z+1	; 0x01
    3e48:	82 81       	ldd	r24, Z+2	; 0x02
    3e4a:	93 81       	ldd	r25, Z+3	; 0x03
    3e4c:	20 e0       	ldi	r18, 0x00	; 0
    3e4e:	3f ef       	ldi	r19, 0xFF	; 255
    3e50:	4f e7       	ldi	r20, 0x7F	; 127
    3e52:	57 e4       	ldi	r21, 0x47	; 71
    3e54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e58:	18 16       	cp	r1, r24
    3e5a:	0c f0       	brlt	.+2      	; 0x3e5e <STEPPER_voidOn+0x1258>
    3e5c:	43 c0       	rjmp	.+134    	; 0x3ee4 <STEPPER_voidOn+0x12de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e5e:	fe 01       	movw	r30, r28
    3e60:	ed 54       	subi	r30, 0x4D	; 77
    3e62:	ff 4f       	sbci	r31, 0xFF	; 255
    3e64:	60 81       	ld	r22, Z
    3e66:	71 81       	ldd	r23, Z+1	; 0x01
    3e68:	82 81       	ldd	r24, Z+2	; 0x02
    3e6a:	93 81       	ldd	r25, Z+3	; 0x03
    3e6c:	20 e0       	ldi	r18, 0x00	; 0
    3e6e:	30 e0       	ldi	r19, 0x00	; 0
    3e70:	40 e2       	ldi	r20, 0x20	; 32
    3e72:	51 e4       	ldi	r21, 0x41	; 65
    3e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e78:	dc 01       	movw	r26, r24
    3e7a:	cb 01       	movw	r24, r22
    3e7c:	8e 01       	movw	r16, r28
    3e7e:	03 55       	subi	r16, 0x53	; 83
    3e80:	1f 4f       	sbci	r17, 0xFF	; 255
    3e82:	bc 01       	movw	r22, r24
    3e84:	cd 01       	movw	r24, r26
    3e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e8a:	dc 01       	movw	r26, r24
    3e8c:	cb 01       	movw	r24, r22
    3e8e:	f8 01       	movw	r30, r16
    3e90:	91 83       	std	Z+1, r25	; 0x01
    3e92:	80 83       	st	Z, r24
    3e94:	1f c0       	rjmp	.+62     	; 0x3ed4 <STEPPER_voidOn+0x12ce>
    3e96:	fe 01       	movw	r30, r28
    3e98:	e5 55       	subi	r30, 0x55	; 85
    3e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e9c:	80 e9       	ldi	r24, 0x90	; 144
    3e9e:	91 e0       	ldi	r25, 0x01	; 1
    3ea0:	91 83       	std	Z+1, r25	; 0x01
    3ea2:	80 83       	st	Z, r24
    3ea4:	fe 01       	movw	r30, r28
    3ea6:	e5 55       	subi	r30, 0x55	; 85
    3ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eaa:	80 81       	ld	r24, Z
    3eac:	91 81       	ldd	r25, Z+1	; 0x01
    3eae:	01 97       	sbiw	r24, 0x01	; 1
    3eb0:	f1 f7       	brne	.-4      	; 0x3eae <STEPPER_voidOn+0x12a8>
    3eb2:	fe 01       	movw	r30, r28
    3eb4:	e5 55       	subi	r30, 0x55	; 85
    3eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb8:	91 83       	std	Z+1, r25	; 0x01
    3eba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ebc:	de 01       	movw	r26, r28
    3ebe:	a3 55       	subi	r26, 0x53	; 83
    3ec0:	bf 4f       	sbci	r27, 0xFF	; 255
    3ec2:	fe 01       	movw	r30, r28
    3ec4:	e3 55       	subi	r30, 0x53	; 83
    3ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec8:	80 81       	ld	r24, Z
    3eca:	91 81       	ldd	r25, Z+1	; 0x01
    3ecc:	01 97       	sbiw	r24, 0x01	; 1
    3ece:	11 96       	adiw	r26, 0x01	; 1
    3ed0:	9c 93       	st	X, r25
    3ed2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ed4:	fe 01       	movw	r30, r28
    3ed6:	e3 55       	subi	r30, 0x53	; 83
    3ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eda:	80 81       	ld	r24, Z
    3edc:	91 81       	ldd	r25, Z+1	; 0x01
    3ede:	00 97       	sbiw	r24, 0x00	; 0
    3ee0:	d1 f6       	brne	.-76     	; 0x3e96 <STEPPER_voidOn+0x1290>
    3ee2:	27 c0       	rjmp	.+78     	; 0x3f32 <STEPPER_voidOn+0x132c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ee4:	8e 01       	movw	r16, r28
    3ee6:	03 55       	subi	r16, 0x53	; 83
    3ee8:	1f 4f       	sbci	r17, 0xFF	; 255
    3eea:	fe 01       	movw	r30, r28
    3eec:	e1 55       	subi	r30, 0x51	; 81
    3eee:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef0:	60 81       	ld	r22, Z
    3ef2:	71 81       	ldd	r23, Z+1	; 0x01
    3ef4:	82 81       	ldd	r24, Z+2	; 0x02
    3ef6:	93 81       	ldd	r25, Z+3	; 0x03
    3ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3efc:	dc 01       	movw	r26, r24
    3efe:	cb 01       	movw	r24, r22
    3f00:	f8 01       	movw	r30, r16
    3f02:	91 83       	std	Z+1, r25	; 0x01
    3f04:	80 83       	st	Z, r24
    3f06:	de 01       	movw	r26, r28
    3f08:	a7 55       	subi	r26, 0x57	; 87
    3f0a:	bf 4f       	sbci	r27, 0xFF	; 255
    3f0c:	fe 01       	movw	r30, r28
    3f0e:	e3 55       	subi	r30, 0x53	; 83
    3f10:	ff 4f       	sbci	r31, 0xFF	; 255
    3f12:	80 81       	ld	r24, Z
    3f14:	91 81       	ldd	r25, Z+1	; 0x01
    3f16:	8d 93       	st	X+, r24
    3f18:	9c 93       	st	X, r25
    3f1a:	fe 01       	movw	r30, r28
    3f1c:	e7 55       	subi	r30, 0x57	; 87
    3f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f20:	80 81       	ld	r24, Z
    3f22:	91 81       	ldd	r25, Z+1	; 0x01
    3f24:	01 97       	sbiw	r24, 0x01	; 1
    3f26:	f1 f7       	brne	.-4      	; 0x3f24 <STEPPER_voidOn+0x131e>
    3f28:	fe 01       	movw	r30, r28
    3f2a:	e7 55       	subi	r30, 0x57	; 87
    3f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2e:	91 83       	std	Z+1, r25	; 0x01
    3f30:	80 83       	st	Z, r24
				_delay_ms( 50 );

				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_u8PIN_HIGH  );
    3f32:	82 e0       	ldi	r24, 0x02	; 2
    3f34:	63 e0       	ldi	r22, 0x03	; 3
    3f36:	41 e0       	ldi	r20, 0x01	; 1
    3f38:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_u8PIN_HIGH  );
    3f3c:	82 e0       	ldi	r24, 0x02	; 2
    3f3e:	64 e0       	ldi	r22, 0x04	; 4
    3f40:	41 e0       	ldi	r20, 0x01	; 1
    3f42:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_u8PIN_LOW );
    3f46:	82 e0       	ldi	r24, 0x02	; 2
    3f48:	65 e0       	ldi	r22, 0x05	; 5
    3f4a:	40 e0       	ldi	r20, 0x00	; 0
    3f4c:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_u8PIN_HIGH  );
    3f50:	82 e0       	ldi	r24, 0x02	; 2
    3f52:	66 e0       	ldi	r22, 0x06	; 6
    3f54:	41 e0       	ldi	r20, 0x01	; 1
    3f56:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    3f5a:	fe 01       	movw	r30, r28
    3f5c:	eb 55       	subi	r30, 0x5B	; 91
    3f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f60:	80 e0       	ldi	r24, 0x00	; 0
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	a8 e4       	ldi	r26, 0x48	; 72
    3f66:	b2 e4       	ldi	r27, 0x42	; 66
    3f68:	80 83       	st	Z, r24
    3f6a:	91 83       	std	Z+1, r25	; 0x01
    3f6c:	a2 83       	std	Z+2, r26	; 0x02
    3f6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f70:	8e 01       	movw	r16, r28
    3f72:	0f 55       	subi	r16, 0x5F	; 95
    3f74:	1f 4f       	sbci	r17, 0xFF	; 255
    3f76:	fe 01       	movw	r30, r28
    3f78:	eb 55       	subi	r30, 0x5B	; 91
    3f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f7c:	60 81       	ld	r22, Z
    3f7e:	71 81       	ldd	r23, Z+1	; 0x01
    3f80:	82 81       	ldd	r24, Z+2	; 0x02
    3f82:	93 81       	ldd	r25, Z+3	; 0x03
    3f84:	20 e0       	ldi	r18, 0x00	; 0
    3f86:	30 e0       	ldi	r19, 0x00	; 0
    3f88:	4a e7       	ldi	r20, 0x7A	; 122
    3f8a:	55 e4       	ldi	r21, 0x45	; 69
    3f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f90:	dc 01       	movw	r26, r24
    3f92:	cb 01       	movw	r24, r22
    3f94:	f8 01       	movw	r30, r16
    3f96:	80 83       	st	Z, r24
    3f98:	91 83       	std	Z+1, r25	; 0x01
    3f9a:	a2 83       	std	Z+2, r26	; 0x02
    3f9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f9e:	fe 01       	movw	r30, r28
    3fa0:	ef 55       	subi	r30, 0x5F	; 95
    3fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa4:	60 81       	ld	r22, Z
    3fa6:	71 81       	ldd	r23, Z+1	; 0x01
    3fa8:	82 81       	ldd	r24, Z+2	; 0x02
    3faa:	93 81       	ldd	r25, Z+3	; 0x03
    3fac:	20 e0       	ldi	r18, 0x00	; 0
    3fae:	30 e0       	ldi	r19, 0x00	; 0
    3fb0:	40 e8       	ldi	r20, 0x80	; 128
    3fb2:	5f e3       	ldi	r21, 0x3F	; 63
    3fb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fb8:	88 23       	and	r24, r24
    3fba:	44 f4       	brge	.+16     	; 0x3fcc <STEPPER_voidOn+0x13c6>
		__ticks = 1;
    3fbc:	fe 01       	movw	r30, r28
    3fbe:	e1 56       	subi	r30, 0x61	; 97
    3fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc2:	81 e0       	ldi	r24, 0x01	; 1
    3fc4:	90 e0       	ldi	r25, 0x00	; 0
    3fc6:	91 83       	std	Z+1, r25	; 0x01
    3fc8:	80 83       	st	Z, r24
    3fca:	64 c0       	rjmp	.+200    	; 0x4094 <STEPPER_voidOn+0x148e>
	else if (__tmp > 65535)
    3fcc:	fe 01       	movw	r30, r28
    3fce:	ef 55       	subi	r30, 0x5F	; 95
    3fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd2:	60 81       	ld	r22, Z
    3fd4:	71 81       	ldd	r23, Z+1	; 0x01
    3fd6:	82 81       	ldd	r24, Z+2	; 0x02
    3fd8:	93 81       	ldd	r25, Z+3	; 0x03
    3fda:	20 e0       	ldi	r18, 0x00	; 0
    3fdc:	3f ef       	ldi	r19, 0xFF	; 255
    3fde:	4f e7       	ldi	r20, 0x7F	; 127
    3fe0:	57 e4       	ldi	r21, 0x47	; 71
    3fe2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fe6:	18 16       	cp	r1, r24
    3fe8:	0c f0       	brlt	.+2      	; 0x3fec <STEPPER_voidOn+0x13e6>
    3fea:	43 c0       	rjmp	.+134    	; 0x4072 <STEPPER_voidOn+0x146c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fec:	fe 01       	movw	r30, r28
    3fee:	eb 55       	subi	r30, 0x5B	; 91
    3ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff2:	60 81       	ld	r22, Z
    3ff4:	71 81       	ldd	r23, Z+1	; 0x01
    3ff6:	82 81       	ldd	r24, Z+2	; 0x02
    3ff8:	93 81       	ldd	r25, Z+3	; 0x03
    3ffa:	20 e0       	ldi	r18, 0x00	; 0
    3ffc:	30 e0       	ldi	r19, 0x00	; 0
    3ffe:	40 e2       	ldi	r20, 0x20	; 32
    4000:	51 e4       	ldi	r21, 0x41	; 65
    4002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4006:	dc 01       	movw	r26, r24
    4008:	cb 01       	movw	r24, r22
    400a:	8e 01       	movw	r16, r28
    400c:	01 56       	subi	r16, 0x61	; 97
    400e:	1f 4f       	sbci	r17, 0xFF	; 255
    4010:	bc 01       	movw	r22, r24
    4012:	cd 01       	movw	r24, r26
    4014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4018:	dc 01       	movw	r26, r24
    401a:	cb 01       	movw	r24, r22
    401c:	f8 01       	movw	r30, r16
    401e:	91 83       	std	Z+1, r25	; 0x01
    4020:	80 83       	st	Z, r24
    4022:	1f c0       	rjmp	.+62     	; 0x4062 <STEPPER_voidOn+0x145c>
    4024:	fe 01       	movw	r30, r28
    4026:	e3 56       	subi	r30, 0x63	; 99
    4028:	ff 4f       	sbci	r31, 0xFF	; 255
    402a:	80 e9       	ldi	r24, 0x90	; 144
    402c:	91 e0       	ldi	r25, 0x01	; 1
    402e:	91 83       	std	Z+1, r25	; 0x01
    4030:	80 83       	st	Z, r24
    4032:	fe 01       	movw	r30, r28
    4034:	e3 56       	subi	r30, 0x63	; 99
    4036:	ff 4f       	sbci	r31, 0xFF	; 255
    4038:	80 81       	ld	r24, Z
    403a:	91 81       	ldd	r25, Z+1	; 0x01
    403c:	01 97       	sbiw	r24, 0x01	; 1
    403e:	f1 f7       	brne	.-4      	; 0x403c <STEPPER_voidOn+0x1436>
    4040:	fe 01       	movw	r30, r28
    4042:	e3 56       	subi	r30, 0x63	; 99
    4044:	ff 4f       	sbci	r31, 0xFF	; 255
    4046:	91 83       	std	Z+1, r25	; 0x01
    4048:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    404a:	de 01       	movw	r26, r28
    404c:	a1 56       	subi	r26, 0x61	; 97
    404e:	bf 4f       	sbci	r27, 0xFF	; 255
    4050:	fe 01       	movw	r30, r28
    4052:	e1 56       	subi	r30, 0x61	; 97
    4054:	ff 4f       	sbci	r31, 0xFF	; 255
    4056:	80 81       	ld	r24, Z
    4058:	91 81       	ldd	r25, Z+1	; 0x01
    405a:	01 97       	sbiw	r24, 0x01	; 1
    405c:	11 96       	adiw	r26, 0x01	; 1
    405e:	9c 93       	st	X, r25
    4060:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4062:	fe 01       	movw	r30, r28
    4064:	e1 56       	subi	r30, 0x61	; 97
    4066:	ff 4f       	sbci	r31, 0xFF	; 255
    4068:	80 81       	ld	r24, Z
    406a:	91 81       	ldd	r25, Z+1	; 0x01
    406c:	00 97       	sbiw	r24, 0x00	; 0
    406e:	d1 f6       	brne	.-76     	; 0x4024 <STEPPER_voidOn+0x141e>
    4070:	27 c0       	rjmp	.+78     	; 0x40c0 <STEPPER_voidOn+0x14ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4072:	8e 01       	movw	r16, r28
    4074:	01 56       	subi	r16, 0x61	; 97
    4076:	1f 4f       	sbci	r17, 0xFF	; 255
    4078:	fe 01       	movw	r30, r28
    407a:	ef 55       	subi	r30, 0x5F	; 95
    407c:	ff 4f       	sbci	r31, 0xFF	; 255
    407e:	60 81       	ld	r22, Z
    4080:	71 81       	ldd	r23, Z+1	; 0x01
    4082:	82 81       	ldd	r24, Z+2	; 0x02
    4084:	93 81       	ldd	r25, Z+3	; 0x03
    4086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    408a:	dc 01       	movw	r26, r24
    408c:	cb 01       	movw	r24, r22
    408e:	f8 01       	movw	r30, r16
    4090:	91 83       	std	Z+1, r25	; 0x01
    4092:	80 83       	st	Z, r24
    4094:	de 01       	movw	r26, r28
    4096:	a5 56       	subi	r26, 0x65	; 101
    4098:	bf 4f       	sbci	r27, 0xFF	; 255
    409a:	fe 01       	movw	r30, r28
    409c:	e1 56       	subi	r30, 0x61	; 97
    409e:	ff 4f       	sbci	r31, 0xFF	; 255
    40a0:	80 81       	ld	r24, Z
    40a2:	91 81       	ldd	r25, Z+1	; 0x01
    40a4:	8d 93       	st	X+, r24
    40a6:	9c 93       	st	X, r25
    40a8:	fe 01       	movw	r30, r28
    40aa:	e5 56       	subi	r30, 0x65	; 101
    40ac:	ff 4f       	sbci	r31, 0xFF	; 255
    40ae:	80 81       	ld	r24, Z
    40b0:	91 81       	ldd	r25, Z+1	; 0x01
    40b2:	01 97       	sbiw	r24, 0x01	; 1
    40b4:	f1 f7       	brne	.-4      	; 0x40b2 <STEPPER_voidOn+0x14ac>
    40b6:	fe 01       	movw	r30, r28
    40b8:	e5 56       	subi	r30, 0x65	; 101
    40ba:	ff 4f       	sbci	r31, 0xFF	; 255
    40bc:	91 83       	std	Z+1, r25	; 0x01
    40be:	80 83       	st	Z, r24
				_delay_ms( 50 );

				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_u8PIN_HIGH  );
    40c0:	82 e0       	ldi	r24, 0x02	; 2
    40c2:	63 e0       	ldi	r22, 0x03	; 3
    40c4:	41 e0       	ldi	r20, 0x01	; 1
    40c6:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_u8PIN_HIGH  );
    40ca:	82 e0       	ldi	r24, 0x02	; 2
    40cc:	64 e0       	ldi	r22, 0x04	; 4
    40ce:	41 e0       	ldi	r20, 0x01	; 1
    40d0:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_u8PIN_LOW );
    40d4:	82 e0       	ldi	r24, 0x02	; 2
    40d6:	65 e0       	ldi	r22, 0x05	; 5
    40d8:	40 e0       	ldi	r20, 0x00	; 0
    40da:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_u8PIN_LOW );
    40de:	82 e0       	ldi	r24, 0x02	; 2
    40e0:	66 e0       	ldi	r22, 0x06	; 6
    40e2:	40 e0       	ldi	r20, 0x00	; 0
    40e4:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    40e8:	fe 01       	movw	r30, r28
    40ea:	e9 56       	subi	r30, 0x69	; 105
    40ec:	ff 4f       	sbci	r31, 0xFF	; 255
    40ee:	80 e0       	ldi	r24, 0x00	; 0
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    40f2:	a8 e4       	ldi	r26, 0x48	; 72
    40f4:	b2 e4       	ldi	r27, 0x42	; 66
    40f6:	80 83       	st	Z, r24
    40f8:	91 83       	std	Z+1, r25	; 0x01
    40fa:	a2 83       	std	Z+2, r26	; 0x02
    40fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40fe:	8e 01       	movw	r16, r28
    4100:	0d 56       	subi	r16, 0x6D	; 109
    4102:	1f 4f       	sbci	r17, 0xFF	; 255
    4104:	fe 01       	movw	r30, r28
    4106:	e9 56       	subi	r30, 0x69	; 105
    4108:	ff 4f       	sbci	r31, 0xFF	; 255
    410a:	60 81       	ld	r22, Z
    410c:	71 81       	ldd	r23, Z+1	; 0x01
    410e:	82 81       	ldd	r24, Z+2	; 0x02
    4110:	93 81       	ldd	r25, Z+3	; 0x03
    4112:	20 e0       	ldi	r18, 0x00	; 0
    4114:	30 e0       	ldi	r19, 0x00	; 0
    4116:	4a e7       	ldi	r20, 0x7A	; 122
    4118:	55 e4       	ldi	r21, 0x45	; 69
    411a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    411e:	dc 01       	movw	r26, r24
    4120:	cb 01       	movw	r24, r22
    4122:	f8 01       	movw	r30, r16
    4124:	80 83       	st	Z, r24
    4126:	91 83       	std	Z+1, r25	; 0x01
    4128:	a2 83       	std	Z+2, r26	; 0x02
    412a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    412c:	fe 01       	movw	r30, r28
    412e:	ed 56       	subi	r30, 0x6D	; 109
    4130:	ff 4f       	sbci	r31, 0xFF	; 255
    4132:	60 81       	ld	r22, Z
    4134:	71 81       	ldd	r23, Z+1	; 0x01
    4136:	82 81       	ldd	r24, Z+2	; 0x02
    4138:	93 81       	ldd	r25, Z+3	; 0x03
    413a:	20 e0       	ldi	r18, 0x00	; 0
    413c:	30 e0       	ldi	r19, 0x00	; 0
    413e:	40 e8       	ldi	r20, 0x80	; 128
    4140:	5f e3       	ldi	r21, 0x3F	; 63
    4142:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4146:	88 23       	and	r24, r24
    4148:	44 f4       	brge	.+16     	; 0x415a <STEPPER_voidOn+0x1554>
		__ticks = 1;
    414a:	fe 01       	movw	r30, r28
    414c:	ef 56       	subi	r30, 0x6F	; 111
    414e:	ff 4f       	sbci	r31, 0xFF	; 255
    4150:	81 e0       	ldi	r24, 0x01	; 1
    4152:	90 e0       	ldi	r25, 0x00	; 0
    4154:	91 83       	std	Z+1, r25	; 0x01
    4156:	80 83       	st	Z, r24
    4158:	64 c0       	rjmp	.+200    	; 0x4222 <STEPPER_voidOn+0x161c>
	else if (__tmp > 65535)
    415a:	fe 01       	movw	r30, r28
    415c:	ed 56       	subi	r30, 0x6D	; 109
    415e:	ff 4f       	sbci	r31, 0xFF	; 255
    4160:	60 81       	ld	r22, Z
    4162:	71 81       	ldd	r23, Z+1	; 0x01
    4164:	82 81       	ldd	r24, Z+2	; 0x02
    4166:	93 81       	ldd	r25, Z+3	; 0x03
    4168:	20 e0       	ldi	r18, 0x00	; 0
    416a:	3f ef       	ldi	r19, 0xFF	; 255
    416c:	4f e7       	ldi	r20, 0x7F	; 127
    416e:	57 e4       	ldi	r21, 0x47	; 71
    4170:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4174:	18 16       	cp	r1, r24
    4176:	0c f0       	brlt	.+2      	; 0x417a <STEPPER_voidOn+0x1574>
    4178:	43 c0       	rjmp	.+134    	; 0x4200 <STEPPER_voidOn+0x15fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    417a:	fe 01       	movw	r30, r28
    417c:	e9 56       	subi	r30, 0x69	; 105
    417e:	ff 4f       	sbci	r31, 0xFF	; 255
    4180:	60 81       	ld	r22, Z
    4182:	71 81       	ldd	r23, Z+1	; 0x01
    4184:	82 81       	ldd	r24, Z+2	; 0x02
    4186:	93 81       	ldd	r25, Z+3	; 0x03
    4188:	20 e0       	ldi	r18, 0x00	; 0
    418a:	30 e0       	ldi	r19, 0x00	; 0
    418c:	40 e2       	ldi	r20, 0x20	; 32
    418e:	51 e4       	ldi	r21, 0x41	; 65
    4190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4194:	dc 01       	movw	r26, r24
    4196:	cb 01       	movw	r24, r22
    4198:	8e 01       	movw	r16, r28
    419a:	0f 56       	subi	r16, 0x6F	; 111
    419c:	1f 4f       	sbci	r17, 0xFF	; 255
    419e:	bc 01       	movw	r22, r24
    41a0:	cd 01       	movw	r24, r26
    41a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a6:	dc 01       	movw	r26, r24
    41a8:	cb 01       	movw	r24, r22
    41aa:	f8 01       	movw	r30, r16
    41ac:	91 83       	std	Z+1, r25	; 0x01
    41ae:	80 83       	st	Z, r24
    41b0:	1f c0       	rjmp	.+62     	; 0x41f0 <STEPPER_voidOn+0x15ea>
    41b2:	fe 01       	movw	r30, r28
    41b4:	e1 57       	subi	r30, 0x71	; 113
    41b6:	ff 4f       	sbci	r31, 0xFF	; 255
    41b8:	80 e9       	ldi	r24, 0x90	; 144
    41ba:	91 e0       	ldi	r25, 0x01	; 1
    41bc:	91 83       	std	Z+1, r25	; 0x01
    41be:	80 83       	st	Z, r24
    41c0:	fe 01       	movw	r30, r28
    41c2:	e1 57       	subi	r30, 0x71	; 113
    41c4:	ff 4f       	sbci	r31, 0xFF	; 255
    41c6:	80 81       	ld	r24, Z
    41c8:	91 81       	ldd	r25, Z+1	; 0x01
    41ca:	01 97       	sbiw	r24, 0x01	; 1
    41cc:	f1 f7       	brne	.-4      	; 0x41ca <STEPPER_voidOn+0x15c4>
    41ce:	fe 01       	movw	r30, r28
    41d0:	e1 57       	subi	r30, 0x71	; 113
    41d2:	ff 4f       	sbci	r31, 0xFF	; 255
    41d4:	91 83       	std	Z+1, r25	; 0x01
    41d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41d8:	de 01       	movw	r26, r28
    41da:	af 56       	subi	r26, 0x6F	; 111
    41dc:	bf 4f       	sbci	r27, 0xFF	; 255
    41de:	fe 01       	movw	r30, r28
    41e0:	ef 56       	subi	r30, 0x6F	; 111
    41e2:	ff 4f       	sbci	r31, 0xFF	; 255
    41e4:	80 81       	ld	r24, Z
    41e6:	91 81       	ldd	r25, Z+1	; 0x01
    41e8:	01 97       	sbiw	r24, 0x01	; 1
    41ea:	11 96       	adiw	r26, 0x01	; 1
    41ec:	9c 93       	st	X, r25
    41ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41f0:	fe 01       	movw	r30, r28
    41f2:	ef 56       	subi	r30, 0x6F	; 111
    41f4:	ff 4f       	sbci	r31, 0xFF	; 255
    41f6:	80 81       	ld	r24, Z
    41f8:	91 81       	ldd	r25, Z+1	; 0x01
    41fa:	00 97       	sbiw	r24, 0x00	; 0
    41fc:	d1 f6       	brne	.-76     	; 0x41b2 <STEPPER_voidOn+0x15ac>
    41fe:	27 c0       	rjmp	.+78     	; 0x424e <STEPPER_voidOn+0x1648>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4200:	8e 01       	movw	r16, r28
    4202:	0f 56       	subi	r16, 0x6F	; 111
    4204:	1f 4f       	sbci	r17, 0xFF	; 255
    4206:	fe 01       	movw	r30, r28
    4208:	ed 56       	subi	r30, 0x6D	; 109
    420a:	ff 4f       	sbci	r31, 0xFF	; 255
    420c:	60 81       	ld	r22, Z
    420e:	71 81       	ldd	r23, Z+1	; 0x01
    4210:	82 81       	ldd	r24, Z+2	; 0x02
    4212:	93 81       	ldd	r25, Z+3	; 0x03
    4214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4218:	dc 01       	movw	r26, r24
    421a:	cb 01       	movw	r24, r22
    421c:	f8 01       	movw	r30, r16
    421e:	91 83       	std	Z+1, r25	; 0x01
    4220:	80 83       	st	Z, r24
    4222:	de 01       	movw	r26, r28
    4224:	a3 57       	subi	r26, 0x73	; 115
    4226:	bf 4f       	sbci	r27, 0xFF	; 255
    4228:	fe 01       	movw	r30, r28
    422a:	ef 56       	subi	r30, 0x6F	; 111
    422c:	ff 4f       	sbci	r31, 0xFF	; 255
    422e:	80 81       	ld	r24, Z
    4230:	91 81       	ldd	r25, Z+1	; 0x01
    4232:	8d 93       	st	X+, r24
    4234:	9c 93       	st	X, r25
    4236:	fe 01       	movw	r30, r28
    4238:	e3 57       	subi	r30, 0x73	; 115
    423a:	ff 4f       	sbci	r31, 0xFF	; 255
    423c:	80 81       	ld	r24, Z
    423e:	91 81       	ldd	r25, Z+1	; 0x01
    4240:	01 97       	sbiw	r24, 0x01	; 1
    4242:	f1 f7       	brne	.-4      	; 0x4240 <STEPPER_voidOn+0x163a>
    4244:	fe 01       	movw	r30, r28
    4246:	e3 57       	subi	r30, 0x73	; 115
    4248:	ff 4f       	sbci	r31, 0xFF	; 255
    424a:	91 83       	std	Z+1, r25	; 0x01
    424c:	80 83       	st	Z, r24
				_delay_ms( 50 );

				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_u8PIN_HIGH  );
    424e:	82 e0       	ldi	r24, 0x02	; 2
    4250:	63 e0       	ldi	r22, 0x03	; 3
    4252:	41 e0       	ldi	r20, 0x01	; 1
    4254:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_u8PIN_HIGH  );
    4258:	82 e0       	ldi	r24, 0x02	; 2
    425a:	64 e0       	ldi	r22, 0x04	; 4
    425c:	41 e0       	ldi	r20, 0x01	; 1
    425e:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_u8PIN_HIGH  );
    4262:	82 e0       	ldi	r24, 0x02	; 2
    4264:	65 e0       	ldi	r22, 0x05	; 5
    4266:	41 e0       	ldi	r20, 0x01	; 1
    4268:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_u8PIN_LOW);
    426c:	82 e0       	ldi	r24, 0x02	; 2
    426e:	66 e0       	ldi	r22, 0x06	; 6
    4270:	40 e0       	ldi	r20, 0x00	; 0
    4272:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    4276:	fe 01       	movw	r30, r28
    4278:	e7 57       	subi	r30, 0x77	; 119
    427a:	ff 4f       	sbci	r31, 0xFF	; 255
    427c:	80 e0       	ldi	r24, 0x00	; 0
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	a8 e4       	ldi	r26, 0x48	; 72
    4282:	b2 e4       	ldi	r27, 0x42	; 66
    4284:	80 83       	st	Z, r24
    4286:	91 83       	std	Z+1, r25	; 0x01
    4288:	a2 83       	std	Z+2, r26	; 0x02
    428a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    428c:	8e 01       	movw	r16, r28
    428e:	0b 57       	subi	r16, 0x7B	; 123
    4290:	1f 4f       	sbci	r17, 0xFF	; 255
    4292:	fe 01       	movw	r30, r28
    4294:	e7 57       	subi	r30, 0x77	; 119
    4296:	ff 4f       	sbci	r31, 0xFF	; 255
    4298:	60 81       	ld	r22, Z
    429a:	71 81       	ldd	r23, Z+1	; 0x01
    429c:	82 81       	ldd	r24, Z+2	; 0x02
    429e:	93 81       	ldd	r25, Z+3	; 0x03
    42a0:	20 e0       	ldi	r18, 0x00	; 0
    42a2:	30 e0       	ldi	r19, 0x00	; 0
    42a4:	4a e7       	ldi	r20, 0x7A	; 122
    42a6:	55 e4       	ldi	r21, 0x45	; 69
    42a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ac:	dc 01       	movw	r26, r24
    42ae:	cb 01       	movw	r24, r22
    42b0:	f8 01       	movw	r30, r16
    42b2:	80 83       	st	Z, r24
    42b4:	91 83       	std	Z+1, r25	; 0x01
    42b6:	a2 83       	std	Z+2, r26	; 0x02
    42b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42ba:	fe 01       	movw	r30, r28
    42bc:	eb 57       	subi	r30, 0x7B	; 123
    42be:	ff 4f       	sbci	r31, 0xFF	; 255
    42c0:	60 81       	ld	r22, Z
    42c2:	71 81       	ldd	r23, Z+1	; 0x01
    42c4:	82 81       	ldd	r24, Z+2	; 0x02
    42c6:	93 81       	ldd	r25, Z+3	; 0x03
    42c8:	20 e0       	ldi	r18, 0x00	; 0
    42ca:	30 e0       	ldi	r19, 0x00	; 0
    42cc:	40 e8       	ldi	r20, 0x80	; 128
    42ce:	5f e3       	ldi	r21, 0x3F	; 63
    42d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42d4:	88 23       	and	r24, r24
    42d6:	44 f4       	brge	.+16     	; 0x42e8 <STEPPER_voidOn+0x16e2>
		__ticks = 1;
    42d8:	fe 01       	movw	r30, r28
    42da:	ed 57       	subi	r30, 0x7D	; 125
    42dc:	ff 4f       	sbci	r31, 0xFF	; 255
    42de:	81 e0       	ldi	r24, 0x01	; 1
    42e0:	90 e0       	ldi	r25, 0x00	; 0
    42e2:	91 83       	std	Z+1, r25	; 0x01
    42e4:	80 83       	st	Z, r24
    42e6:	64 c0       	rjmp	.+200    	; 0x43b0 <STEPPER_voidOn+0x17aa>
	else if (__tmp > 65535)
    42e8:	fe 01       	movw	r30, r28
    42ea:	eb 57       	subi	r30, 0x7B	; 123
    42ec:	ff 4f       	sbci	r31, 0xFF	; 255
    42ee:	60 81       	ld	r22, Z
    42f0:	71 81       	ldd	r23, Z+1	; 0x01
    42f2:	82 81       	ldd	r24, Z+2	; 0x02
    42f4:	93 81       	ldd	r25, Z+3	; 0x03
    42f6:	20 e0       	ldi	r18, 0x00	; 0
    42f8:	3f ef       	ldi	r19, 0xFF	; 255
    42fa:	4f e7       	ldi	r20, 0x7F	; 127
    42fc:	57 e4       	ldi	r21, 0x47	; 71
    42fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4302:	18 16       	cp	r1, r24
    4304:	0c f0       	brlt	.+2      	; 0x4308 <STEPPER_voidOn+0x1702>
    4306:	43 c0       	rjmp	.+134    	; 0x438e <STEPPER_voidOn+0x1788>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4308:	fe 01       	movw	r30, r28
    430a:	e7 57       	subi	r30, 0x77	; 119
    430c:	ff 4f       	sbci	r31, 0xFF	; 255
    430e:	60 81       	ld	r22, Z
    4310:	71 81       	ldd	r23, Z+1	; 0x01
    4312:	82 81       	ldd	r24, Z+2	; 0x02
    4314:	93 81       	ldd	r25, Z+3	; 0x03
    4316:	20 e0       	ldi	r18, 0x00	; 0
    4318:	30 e0       	ldi	r19, 0x00	; 0
    431a:	40 e2       	ldi	r20, 0x20	; 32
    431c:	51 e4       	ldi	r21, 0x41	; 65
    431e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4322:	dc 01       	movw	r26, r24
    4324:	cb 01       	movw	r24, r22
    4326:	8e 01       	movw	r16, r28
    4328:	0d 57       	subi	r16, 0x7D	; 125
    432a:	1f 4f       	sbci	r17, 0xFF	; 255
    432c:	bc 01       	movw	r22, r24
    432e:	cd 01       	movw	r24, r26
    4330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4334:	dc 01       	movw	r26, r24
    4336:	cb 01       	movw	r24, r22
    4338:	f8 01       	movw	r30, r16
    433a:	91 83       	std	Z+1, r25	; 0x01
    433c:	80 83       	st	Z, r24
    433e:	1f c0       	rjmp	.+62     	; 0x437e <STEPPER_voidOn+0x1778>
    4340:	fe 01       	movw	r30, r28
    4342:	ef 57       	subi	r30, 0x7F	; 127
    4344:	ff 4f       	sbci	r31, 0xFF	; 255
    4346:	80 e9       	ldi	r24, 0x90	; 144
    4348:	91 e0       	ldi	r25, 0x01	; 1
    434a:	91 83       	std	Z+1, r25	; 0x01
    434c:	80 83       	st	Z, r24
    434e:	fe 01       	movw	r30, r28
    4350:	ef 57       	subi	r30, 0x7F	; 127
    4352:	ff 4f       	sbci	r31, 0xFF	; 255
    4354:	80 81       	ld	r24, Z
    4356:	91 81       	ldd	r25, Z+1	; 0x01
    4358:	01 97       	sbiw	r24, 0x01	; 1
    435a:	f1 f7       	brne	.-4      	; 0x4358 <STEPPER_voidOn+0x1752>
    435c:	fe 01       	movw	r30, r28
    435e:	ef 57       	subi	r30, 0x7F	; 127
    4360:	ff 4f       	sbci	r31, 0xFF	; 255
    4362:	91 83       	std	Z+1, r25	; 0x01
    4364:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4366:	de 01       	movw	r26, r28
    4368:	ad 57       	subi	r26, 0x7D	; 125
    436a:	bf 4f       	sbci	r27, 0xFF	; 255
    436c:	fe 01       	movw	r30, r28
    436e:	ed 57       	subi	r30, 0x7D	; 125
    4370:	ff 4f       	sbci	r31, 0xFF	; 255
    4372:	80 81       	ld	r24, Z
    4374:	91 81       	ldd	r25, Z+1	; 0x01
    4376:	01 97       	sbiw	r24, 0x01	; 1
    4378:	11 96       	adiw	r26, 0x01	; 1
    437a:	9c 93       	st	X, r25
    437c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    437e:	fe 01       	movw	r30, r28
    4380:	ed 57       	subi	r30, 0x7D	; 125
    4382:	ff 4f       	sbci	r31, 0xFF	; 255
    4384:	80 81       	ld	r24, Z
    4386:	91 81       	ldd	r25, Z+1	; 0x01
    4388:	00 97       	sbiw	r24, 0x00	; 0
    438a:	d1 f6       	brne	.-76     	; 0x4340 <STEPPER_voidOn+0x173a>
    438c:	27 c0       	rjmp	.+78     	; 0x43dc <STEPPER_voidOn+0x17d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    438e:	8e 01       	movw	r16, r28
    4390:	0d 57       	subi	r16, 0x7D	; 125
    4392:	1f 4f       	sbci	r17, 0xFF	; 255
    4394:	fe 01       	movw	r30, r28
    4396:	eb 57       	subi	r30, 0x7B	; 123
    4398:	ff 4f       	sbci	r31, 0xFF	; 255
    439a:	60 81       	ld	r22, Z
    439c:	71 81       	ldd	r23, Z+1	; 0x01
    439e:	82 81       	ldd	r24, Z+2	; 0x02
    43a0:	93 81       	ldd	r25, Z+3	; 0x03
    43a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43a6:	dc 01       	movw	r26, r24
    43a8:	cb 01       	movw	r24, r22
    43aa:	f8 01       	movw	r30, r16
    43ac:	91 83       	std	Z+1, r25	; 0x01
    43ae:	80 83       	st	Z, r24
    43b0:	de 01       	movw	r26, r28
    43b2:	a1 58       	subi	r26, 0x81	; 129
    43b4:	bf 4f       	sbci	r27, 0xFF	; 255
    43b6:	fe 01       	movw	r30, r28
    43b8:	ed 57       	subi	r30, 0x7D	; 125
    43ba:	ff 4f       	sbci	r31, 0xFF	; 255
    43bc:	80 81       	ld	r24, Z
    43be:	91 81       	ldd	r25, Z+1	; 0x01
    43c0:	8d 93       	st	X+, r24
    43c2:	9c 93       	st	X, r25
    43c4:	fe 01       	movw	r30, r28
    43c6:	e1 58       	subi	r30, 0x81	; 129
    43c8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ca:	80 81       	ld	r24, Z
    43cc:	91 81       	ldd	r25, Z+1	; 0x01
    43ce:	01 97       	sbiw	r24, 0x01	; 1
    43d0:	f1 f7       	brne	.-4      	; 0x43ce <STEPPER_voidOn+0x17c8>
    43d2:	fe 01       	movw	r30, r28
    43d4:	e1 58       	subi	r30, 0x81	; 129
    43d6:	ff 4f       	sbci	r31, 0xFF	; 255
    43d8:	91 83       	std	Z+1, r25	; 0x01
    43da:	80 83       	st	Z, r24
				_delay_ms( 50 );

				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_u8PIN_LOW );
    43dc:	82 e0       	ldi	r24, 0x02	; 2
    43de:	63 e0       	ldi	r22, 0x03	; 3
    43e0:	40 e0       	ldi	r20, 0x00	; 0
    43e2:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_u8PIN_HIGH  );
    43e6:	82 e0       	ldi	r24, 0x02	; 2
    43e8:	64 e0       	ldi	r22, 0x04	; 4
    43ea:	41 e0       	ldi	r20, 0x01	; 1
    43ec:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_u8PIN_HIGH  );
    43f0:	82 e0       	ldi	r24, 0x02	; 2
    43f2:	65 e0       	ldi	r22, 0x05	; 5
    43f4:	41 e0       	ldi	r20, 0x01	; 1
    43f6:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_u8PIN_LOW );
    43fa:	82 e0       	ldi	r24, 0x02	; 2
    43fc:	66 e0       	ldi	r22, 0x06	; 6
    43fe:	40 e0       	ldi	r20, 0x00	; 0
    4400:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    4404:	fe 01       	movw	r30, r28
    4406:	e5 58       	subi	r30, 0x85	; 133
    4408:	ff 4f       	sbci	r31, 0xFF	; 255
    440a:	80 e0       	ldi	r24, 0x00	; 0
    440c:	90 e0       	ldi	r25, 0x00	; 0
    440e:	a8 e4       	ldi	r26, 0x48	; 72
    4410:	b2 e4       	ldi	r27, 0x42	; 66
    4412:	80 83       	st	Z, r24
    4414:	91 83       	std	Z+1, r25	; 0x01
    4416:	a2 83       	std	Z+2, r26	; 0x02
    4418:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    441a:	8e 01       	movw	r16, r28
    441c:	09 58       	subi	r16, 0x89	; 137
    441e:	1f 4f       	sbci	r17, 0xFF	; 255
    4420:	fe 01       	movw	r30, r28
    4422:	e5 58       	subi	r30, 0x85	; 133
    4424:	ff 4f       	sbci	r31, 0xFF	; 255
    4426:	60 81       	ld	r22, Z
    4428:	71 81       	ldd	r23, Z+1	; 0x01
    442a:	82 81       	ldd	r24, Z+2	; 0x02
    442c:	93 81       	ldd	r25, Z+3	; 0x03
    442e:	20 e0       	ldi	r18, 0x00	; 0
    4430:	30 e0       	ldi	r19, 0x00	; 0
    4432:	4a e7       	ldi	r20, 0x7A	; 122
    4434:	55 e4       	ldi	r21, 0x45	; 69
    4436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    443a:	dc 01       	movw	r26, r24
    443c:	cb 01       	movw	r24, r22
    443e:	f8 01       	movw	r30, r16
    4440:	80 83       	st	Z, r24
    4442:	91 83       	std	Z+1, r25	; 0x01
    4444:	a2 83       	std	Z+2, r26	; 0x02
    4446:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4448:	fe 01       	movw	r30, r28
    444a:	e9 58       	subi	r30, 0x89	; 137
    444c:	ff 4f       	sbci	r31, 0xFF	; 255
    444e:	60 81       	ld	r22, Z
    4450:	71 81       	ldd	r23, Z+1	; 0x01
    4452:	82 81       	ldd	r24, Z+2	; 0x02
    4454:	93 81       	ldd	r25, Z+3	; 0x03
    4456:	20 e0       	ldi	r18, 0x00	; 0
    4458:	30 e0       	ldi	r19, 0x00	; 0
    445a:	40 e8       	ldi	r20, 0x80	; 128
    445c:	5f e3       	ldi	r21, 0x3F	; 63
    445e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4462:	88 23       	and	r24, r24
    4464:	44 f4       	brge	.+16     	; 0x4476 <STEPPER_voidOn+0x1870>
		__ticks = 1;
    4466:	fe 01       	movw	r30, r28
    4468:	eb 58       	subi	r30, 0x8B	; 139
    446a:	ff 4f       	sbci	r31, 0xFF	; 255
    446c:	81 e0       	ldi	r24, 0x01	; 1
    446e:	90 e0       	ldi	r25, 0x00	; 0
    4470:	91 83       	std	Z+1, r25	; 0x01
    4472:	80 83       	st	Z, r24
    4474:	64 c0       	rjmp	.+200    	; 0x453e <STEPPER_voidOn+0x1938>
	else if (__tmp > 65535)
    4476:	fe 01       	movw	r30, r28
    4478:	e9 58       	subi	r30, 0x89	; 137
    447a:	ff 4f       	sbci	r31, 0xFF	; 255
    447c:	60 81       	ld	r22, Z
    447e:	71 81       	ldd	r23, Z+1	; 0x01
    4480:	82 81       	ldd	r24, Z+2	; 0x02
    4482:	93 81       	ldd	r25, Z+3	; 0x03
    4484:	20 e0       	ldi	r18, 0x00	; 0
    4486:	3f ef       	ldi	r19, 0xFF	; 255
    4488:	4f e7       	ldi	r20, 0x7F	; 127
    448a:	57 e4       	ldi	r21, 0x47	; 71
    448c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4490:	18 16       	cp	r1, r24
    4492:	0c f0       	brlt	.+2      	; 0x4496 <STEPPER_voidOn+0x1890>
    4494:	43 c0       	rjmp	.+134    	; 0x451c <STEPPER_voidOn+0x1916>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4496:	fe 01       	movw	r30, r28
    4498:	e5 58       	subi	r30, 0x85	; 133
    449a:	ff 4f       	sbci	r31, 0xFF	; 255
    449c:	60 81       	ld	r22, Z
    449e:	71 81       	ldd	r23, Z+1	; 0x01
    44a0:	82 81       	ldd	r24, Z+2	; 0x02
    44a2:	93 81       	ldd	r25, Z+3	; 0x03
    44a4:	20 e0       	ldi	r18, 0x00	; 0
    44a6:	30 e0       	ldi	r19, 0x00	; 0
    44a8:	40 e2       	ldi	r20, 0x20	; 32
    44aa:	51 e4       	ldi	r21, 0x41	; 65
    44ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44b0:	dc 01       	movw	r26, r24
    44b2:	cb 01       	movw	r24, r22
    44b4:	8e 01       	movw	r16, r28
    44b6:	0b 58       	subi	r16, 0x8B	; 139
    44b8:	1f 4f       	sbci	r17, 0xFF	; 255
    44ba:	bc 01       	movw	r22, r24
    44bc:	cd 01       	movw	r24, r26
    44be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44c2:	dc 01       	movw	r26, r24
    44c4:	cb 01       	movw	r24, r22
    44c6:	f8 01       	movw	r30, r16
    44c8:	91 83       	std	Z+1, r25	; 0x01
    44ca:	80 83       	st	Z, r24
    44cc:	1f c0       	rjmp	.+62     	; 0x450c <STEPPER_voidOn+0x1906>
    44ce:	fe 01       	movw	r30, r28
    44d0:	ed 58       	subi	r30, 0x8D	; 141
    44d2:	ff 4f       	sbci	r31, 0xFF	; 255
    44d4:	80 e9       	ldi	r24, 0x90	; 144
    44d6:	91 e0       	ldi	r25, 0x01	; 1
    44d8:	91 83       	std	Z+1, r25	; 0x01
    44da:	80 83       	st	Z, r24
    44dc:	fe 01       	movw	r30, r28
    44de:	ed 58       	subi	r30, 0x8D	; 141
    44e0:	ff 4f       	sbci	r31, 0xFF	; 255
    44e2:	80 81       	ld	r24, Z
    44e4:	91 81       	ldd	r25, Z+1	; 0x01
    44e6:	01 97       	sbiw	r24, 0x01	; 1
    44e8:	f1 f7       	brne	.-4      	; 0x44e6 <STEPPER_voidOn+0x18e0>
    44ea:	fe 01       	movw	r30, r28
    44ec:	ed 58       	subi	r30, 0x8D	; 141
    44ee:	ff 4f       	sbci	r31, 0xFF	; 255
    44f0:	91 83       	std	Z+1, r25	; 0x01
    44f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44f4:	de 01       	movw	r26, r28
    44f6:	ab 58       	subi	r26, 0x8B	; 139
    44f8:	bf 4f       	sbci	r27, 0xFF	; 255
    44fa:	fe 01       	movw	r30, r28
    44fc:	eb 58       	subi	r30, 0x8B	; 139
    44fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4500:	80 81       	ld	r24, Z
    4502:	91 81       	ldd	r25, Z+1	; 0x01
    4504:	01 97       	sbiw	r24, 0x01	; 1
    4506:	11 96       	adiw	r26, 0x01	; 1
    4508:	9c 93       	st	X, r25
    450a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    450c:	fe 01       	movw	r30, r28
    450e:	eb 58       	subi	r30, 0x8B	; 139
    4510:	ff 4f       	sbci	r31, 0xFF	; 255
    4512:	80 81       	ld	r24, Z
    4514:	91 81       	ldd	r25, Z+1	; 0x01
    4516:	00 97       	sbiw	r24, 0x00	; 0
    4518:	d1 f6       	brne	.-76     	; 0x44ce <STEPPER_voidOn+0x18c8>
    451a:	36 c5       	rjmp	.+2668   	; 0x4f88 <STEPPER_voidOn+0x2382>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    451c:	8e 01       	movw	r16, r28
    451e:	0b 58       	subi	r16, 0x8B	; 139
    4520:	1f 4f       	sbci	r17, 0xFF	; 255
    4522:	fe 01       	movw	r30, r28
    4524:	e9 58       	subi	r30, 0x89	; 137
    4526:	ff 4f       	sbci	r31, 0xFF	; 255
    4528:	60 81       	ld	r22, Z
    452a:	71 81       	ldd	r23, Z+1	; 0x01
    452c:	82 81       	ldd	r24, Z+2	; 0x02
    452e:	93 81       	ldd	r25, Z+3	; 0x03
    4530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4534:	dc 01       	movw	r26, r24
    4536:	cb 01       	movw	r24, r22
    4538:	f8 01       	movw	r30, r16
    453a:	91 83       	std	Z+1, r25	; 0x01
    453c:	80 83       	st	Z, r24
    453e:	de 01       	movw	r26, r28
    4540:	af 58       	subi	r26, 0x8F	; 143
    4542:	bf 4f       	sbci	r27, 0xFF	; 255
    4544:	fe 01       	movw	r30, r28
    4546:	eb 58       	subi	r30, 0x8B	; 139
    4548:	ff 4f       	sbci	r31, 0xFF	; 255
    454a:	80 81       	ld	r24, Z
    454c:	91 81       	ldd	r25, Z+1	; 0x01
    454e:	11 96       	adiw	r26, 0x01	; 1
    4550:	9c 93       	st	X, r25
    4552:	8e 93       	st	-X, r24
    4554:	fe 01       	movw	r30, r28
    4556:	ef 58       	subi	r30, 0x8F	; 143
    4558:	ff 4f       	sbci	r31, 0xFF	; 255
    455a:	80 81       	ld	r24, Z
    455c:	91 81       	ldd	r25, Z+1	; 0x01
    455e:	01 97       	sbiw	r24, 0x01	; 1
    4560:	f1 f7       	brne	.-4      	; 0x455e <STEPPER_voidOn+0x1958>
    4562:	fe 01       	movw	r30, r28
    4564:	ef 58       	subi	r30, 0x8F	; 143
    4566:	ff 4f       	sbci	r31, 0xFF	; 255
    4568:	91 83       	std	Z+1, r25	; 0x01
    456a:	80 83       	st	Z, r24
    456c:	0d c5       	rjmp	.+2586   	; 0x4f88 <STEPPER_voidOn+0x2382>
				_delay_ms( 50 );




		}else if( Copy_u8Direction == STEPPER_ANTI_CLOCK_WISE ){
    456e:	fe 01       	movw	r30, r28
    4570:	ee 5a       	subi	r30, 0xAE	; 174
    4572:	fe 4f       	sbci	r31, 0xFE	; 254
    4574:	80 81       	ld	r24, Z
    4576:	88 23       	and	r24, r24
    4578:	09 f0       	breq	.+2      	; 0x457c <STEPPER_voidOn+0x1976>
    457a:	06 c5       	rjmp	.+2572   	; 0x4f88 <STEPPER_voidOn+0x2382>


				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_u8PIN_LOW  );
    457c:	82 e0       	ldi	r24, 0x02	; 2
    457e:	63 e0       	ldi	r22, 0x03	; 3
    4580:	40 e0       	ldi	r20, 0x00	; 0
    4582:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_u8PIN_HIGH );
    4586:	82 e0       	ldi	r24, 0x02	; 2
    4588:	64 e0       	ldi	r22, 0x04	; 4
    458a:	41 e0       	ldi	r20, 0x01	; 1
    458c:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_u8PIN_HIGH );
    4590:	82 e0       	ldi	r24, 0x02	; 2
    4592:	65 e0       	ldi	r22, 0x05	; 5
    4594:	41 e0       	ldi	r20, 0x01	; 1
    4596:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_u8PIN_LOW  );
    459a:	82 e0       	ldi	r24, 0x02	; 2
    459c:	66 e0       	ldi	r22, 0x06	; 6
    459e:	40 e0       	ldi	r20, 0x00	; 0
    45a0:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    45a4:	fe 01       	movw	r30, r28
    45a6:	e3 59       	subi	r30, 0x93	; 147
    45a8:	ff 4f       	sbci	r31, 0xFF	; 255
    45aa:	80 e0       	ldi	r24, 0x00	; 0
    45ac:	90 e0       	ldi	r25, 0x00	; 0
    45ae:	a8 e4       	ldi	r26, 0x48	; 72
    45b0:	b2 e4       	ldi	r27, 0x42	; 66
    45b2:	80 83       	st	Z, r24
    45b4:	91 83       	std	Z+1, r25	; 0x01
    45b6:	a2 83       	std	Z+2, r26	; 0x02
    45b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45ba:	8e 01       	movw	r16, r28
    45bc:	07 59       	subi	r16, 0x97	; 151
    45be:	1f 4f       	sbci	r17, 0xFF	; 255
    45c0:	fe 01       	movw	r30, r28
    45c2:	e3 59       	subi	r30, 0x93	; 147
    45c4:	ff 4f       	sbci	r31, 0xFF	; 255
    45c6:	60 81       	ld	r22, Z
    45c8:	71 81       	ldd	r23, Z+1	; 0x01
    45ca:	82 81       	ldd	r24, Z+2	; 0x02
    45cc:	93 81       	ldd	r25, Z+3	; 0x03
    45ce:	20 e0       	ldi	r18, 0x00	; 0
    45d0:	30 e0       	ldi	r19, 0x00	; 0
    45d2:	4a e7       	ldi	r20, 0x7A	; 122
    45d4:	55 e4       	ldi	r21, 0x45	; 69
    45d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45da:	dc 01       	movw	r26, r24
    45dc:	cb 01       	movw	r24, r22
    45de:	f8 01       	movw	r30, r16
    45e0:	80 83       	st	Z, r24
    45e2:	91 83       	std	Z+1, r25	; 0x01
    45e4:	a2 83       	std	Z+2, r26	; 0x02
    45e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    45e8:	fe 01       	movw	r30, r28
    45ea:	e7 59       	subi	r30, 0x97	; 151
    45ec:	ff 4f       	sbci	r31, 0xFF	; 255
    45ee:	60 81       	ld	r22, Z
    45f0:	71 81       	ldd	r23, Z+1	; 0x01
    45f2:	82 81       	ldd	r24, Z+2	; 0x02
    45f4:	93 81       	ldd	r25, Z+3	; 0x03
    45f6:	20 e0       	ldi	r18, 0x00	; 0
    45f8:	30 e0       	ldi	r19, 0x00	; 0
    45fa:	40 e8       	ldi	r20, 0x80	; 128
    45fc:	5f e3       	ldi	r21, 0x3F	; 63
    45fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4602:	88 23       	and	r24, r24
    4604:	44 f4       	brge	.+16     	; 0x4616 <STEPPER_voidOn+0x1a10>
		__ticks = 1;
    4606:	fe 01       	movw	r30, r28
    4608:	e9 59       	subi	r30, 0x99	; 153
    460a:	ff 4f       	sbci	r31, 0xFF	; 255
    460c:	81 e0       	ldi	r24, 0x01	; 1
    460e:	90 e0       	ldi	r25, 0x00	; 0
    4610:	91 83       	std	Z+1, r25	; 0x01
    4612:	80 83       	st	Z, r24
    4614:	64 c0       	rjmp	.+200    	; 0x46de <STEPPER_voidOn+0x1ad8>
	else if (__tmp > 65535)
    4616:	fe 01       	movw	r30, r28
    4618:	e7 59       	subi	r30, 0x97	; 151
    461a:	ff 4f       	sbci	r31, 0xFF	; 255
    461c:	60 81       	ld	r22, Z
    461e:	71 81       	ldd	r23, Z+1	; 0x01
    4620:	82 81       	ldd	r24, Z+2	; 0x02
    4622:	93 81       	ldd	r25, Z+3	; 0x03
    4624:	20 e0       	ldi	r18, 0x00	; 0
    4626:	3f ef       	ldi	r19, 0xFF	; 255
    4628:	4f e7       	ldi	r20, 0x7F	; 127
    462a:	57 e4       	ldi	r21, 0x47	; 71
    462c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4630:	18 16       	cp	r1, r24
    4632:	0c f0       	brlt	.+2      	; 0x4636 <STEPPER_voidOn+0x1a30>
    4634:	43 c0       	rjmp	.+134    	; 0x46bc <STEPPER_voidOn+0x1ab6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4636:	fe 01       	movw	r30, r28
    4638:	e3 59       	subi	r30, 0x93	; 147
    463a:	ff 4f       	sbci	r31, 0xFF	; 255
    463c:	60 81       	ld	r22, Z
    463e:	71 81       	ldd	r23, Z+1	; 0x01
    4640:	82 81       	ldd	r24, Z+2	; 0x02
    4642:	93 81       	ldd	r25, Z+3	; 0x03
    4644:	20 e0       	ldi	r18, 0x00	; 0
    4646:	30 e0       	ldi	r19, 0x00	; 0
    4648:	40 e2       	ldi	r20, 0x20	; 32
    464a:	51 e4       	ldi	r21, 0x41	; 65
    464c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4650:	dc 01       	movw	r26, r24
    4652:	cb 01       	movw	r24, r22
    4654:	8e 01       	movw	r16, r28
    4656:	09 59       	subi	r16, 0x99	; 153
    4658:	1f 4f       	sbci	r17, 0xFF	; 255
    465a:	bc 01       	movw	r22, r24
    465c:	cd 01       	movw	r24, r26
    465e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4662:	dc 01       	movw	r26, r24
    4664:	cb 01       	movw	r24, r22
    4666:	f8 01       	movw	r30, r16
    4668:	91 83       	std	Z+1, r25	; 0x01
    466a:	80 83       	st	Z, r24
    466c:	1f c0       	rjmp	.+62     	; 0x46ac <STEPPER_voidOn+0x1aa6>
    466e:	fe 01       	movw	r30, r28
    4670:	eb 59       	subi	r30, 0x9B	; 155
    4672:	ff 4f       	sbci	r31, 0xFF	; 255
    4674:	80 e9       	ldi	r24, 0x90	; 144
    4676:	91 e0       	ldi	r25, 0x01	; 1
    4678:	91 83       	std	Z+1, r25	; 0x01
    467a:	80 83       	st	Z, r24
    467c:	fe 01       	movw	r30, r28
    467e:	eb 59       	subi	r30, 0x9B	; 155
    4680:	ff 4f       	sbci	r31, 0xFF	; 255
    4682:	80 81       	ld	r24, Z
    4684:	91 81       	ldd	r25, Z+1	; 0x01
    4686:	01 97       	sbiw	r24, 0x01	; 1
    4688:	f1 f7       	brne	.-4      	; 0x4686 <STEPPER_voidOn+0x1a80>
    468a:	fe 01       	movw	r30, r28
    468c:	eb 59       	subi	r30, 0x9B	; 155
    468e:	ff 4f       	sbci	r31, 0xFF	; 255
    4690:	91 83       	std	Z+1, r25	; 0x01
    4692:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4694:	de 01       	movw	r26, r28
    4696:	a9 59       	subi	r26, 0x99	; 153
    4698:	bf 4f       	sbci	r27, 0xFF	; 255
    469a:	fe 01       	movw	r30, r28
    469c:	e9 59       	subi	r30, 0x99	; 153
    469e:	ff 4f       	sbci	r31, 0xFF	; 255
    46a0:	80 81       	ld	r24, Z
    46a2:	91 81       	ldd	r25, Z+1	; 0x01
    46a4:	01 97       	sbiw	r24, 0x01	; 1
    46a6:	11 96       	adiw	r26, 0x01	; 1
    46a8:	9c 93       	st	X, r25
    46aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46ac:	fe 01       	movw	r30, r28
    46ae:	e9 59       	subi	r30, 0x99	; 153
    46b0:	ff 4f       	sbci	r31, 0xFF	; 255
    46b2:	80 81       	ld	r24, Z
    46b4:	91 81       	ldd	r25, Z+1	; 0x01
    46b6:	00 97       	sbiw	r24, 0x00	; 0
    46b8:	d1 f6       	brne	.-76     	; 0x466e <STEPPER_voidOn+0x1a68>
    46ba:	27 c0       	rjmp	.+78     	; 0x470a <STEPPER_voidOn+0x1b04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46bc:	8e 01       	movw	r16, r28
    46be:	09 59       	subi	r16, 0x99	; 153
    46c0:	1f 4f       	sbci	r17, 0xFF	; 255
    46c2:	fe 01       	movw	r30, r28
    46c4:	e7 59       	subi	r30, 0x97	; 151
    46c6:	ff 4f       	sbci	r31, 0xFF	; 255
    46c8:	60 81       	ld	r22, Z
    46ca:	71 81       	ldd	r23, Z+1	; 0x01
    46cc:	82 81       	ldd	r24, Z+2	; 0x02
    46ce:	93 81       	ldd	r25, Z+3	; 0x03
    46d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46d4:	dc 01       	movw	r26, r24
    46d6:	cb 01       	movw	r24, r22
    46d8:	f8 01       	movw	r30, r16
    46da:	91 83       	std	Z+1, r25	; 0x01
    46dc:	80 83       	st	Z, r24
    46de:	de 01       	movw	r26, r28
    46e0:	ad 59       	subi	r26, 0x9D	; 157
    46e2:	bf 4f       	sbci	r27, 0xFF	; 255
    46e4:	fe 01       	movw	r30, r28
    46e6:	e9 59       	subi	r30, 0x99	; 153
    46e8:	ff 4f       	sbci	r31, 0xFF	; 255
    46ea:	80 81       	ld	r24, Z
    46ec:	91 81       	ldd	r25, Z+1	; 0x01
    46ee:	8d 93       	st	X+, r24
    46f0:	9c 93       	st	X, r25
    46f2:	fe 01       	movw	r30, r28
    46f4:	ed 59       	subi	r30, 0x9D	; 157
    46f6:	ff 4f       	sbci	r31, 0xFF	; 255
    46f8:	80 81       	ld	r24, Z
    46fa:	91 81       	ldd	r25, Z+1	; 0x01
    46fc:	01 97       	sbiw	r24, 0x01	; 1
    46fe:	f1 f7       	brne	.-4      	; 0x46fc <STEPPER_voidOn+0x1af6>
    4700:	fe 01       	movw	r30, r28
    4702:	ed 59       	subi	r30, 0x9D	; 157
    4704:	ff 4f       	sbci	r31, 0xFF	; 255
    4706:	91 83       	std	Z+1, r25	; 0x01
    4708:	80 83       	st	Z, r24
				_delay_ms( 50 );

				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_u8PIN_HIGH);
    470a:	82 e0       	ldi	r24, 0x02	; 2
    470c:	63 e0       	ldi	r22, 0x03	; 3
    470e:	41 e0       	ldi	r20, 0x01	; 1
    4710:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_u8PIN_HIGH);
    4714:	82 e0       	ldi	r24, 0x02	; 2
    4716:	64 e0       	ldi	r22, 0x04	; 4
    4718:	41 e0       	ldi	r20, 0x01	; 1
    471a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_u8PIN_HIGH);
    471e:	82 e0       	ldi	r24, 0x02	; 2
    4720:	65 e0       	ldi	r22, 0x05	; 5
    4722:	41 e0       	ldi	r20, 0x01	; 1
    4724:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_u8PIN_LOW);
    4728:	82 e0       	ldi	r24, 0x02	; 2
    472a:	66 e0       	ldi	r22, 0x06	; 6
    472c:	40 e0       	ldi	r20, 0x00	; 0
    472e:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    4732:	fe 01       	movw	r30, r28
    4734:	e1 5a       	subi	r30, 0xA1	; 161
    4736:	ff 4f       	sbci	r31, 0xFF	; 255
    4738:	80 e0       	ldi	r24, 0x00	; 0
    473a:	90 e0       	ldi	r25, 0x00	; 0
    473c:	a8 e4       	ldi	r26, 0x48	; 72
    473e:	b2 e4       	ldi	r27, 0x42	; 66
    4740:	80 83       	st	Z, r24
    4742:	91 83       	std	Z+1, r25	; 0x01
    4744:	a2 83       	std	Z+2, r26	; 0x02
    4746:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4748:	8e 01       	movw	r16, r28
    474a:	05 5a       	subi	r16, 0xA5	; 165
    474c:	1f 4f       	sbci	r17, 0xFF	; 255
    474e:	fe 01       	movw	r30, r28
    4750:	e1 5a       	subi	r30, 0xA1	; 161
    4752:	ff 4f       	sbci	r31, 0xFF	; 255
    4754:	60 81       	ld	r22, Z
    4756:	71 81       	ldd	r23, Z+1	; 0x01
    4758:	82 81       	ldd	r24, Z+2	; 0x02
    475a:	93 81       	ldd	r25, Z+3	; 0x03
    475c:	20 e0       	ldi	r18, 0x00	; 0
    475e:	30 e0       	ldi	r19, 0x00	; 0
    4760:	4a e7       	ldi	r20, 0x7A	; 122
    4762:	55 e4       	ldi	r21, 0x45	; 69
    4764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4768:	dc 01       	movw	r26, r24
    476a:	cb 01       	movw	r24, r22
    476c:	f8 01       	movw	r30, r16
    476e:	80 83       	st	Z, r24
    4770:	91 83       	std	Z+1, r25	; 0x01
    4772:	a2 83       	std	Z+2, r26	; 0x02
    4774:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4776:	fe 01       	movw	r30, r28
    4778:	e5 5a       	subi	r30, 0xA5	; 165
    477a:	ff 4f       	sbci	r31, 0xFF	; 255
    477c:	60 81       	ld	r22, Z
    477e:	71 81       	ldd	r23, Z+1	; 0x01
    4780:	82 81       	ldd	r24, Z+2	; 0x02
    4782:	93 81       	ldd	r25, Z+3	; 0x03
    4784:	20 e0       	ldi	r18, 0x00	; 0
    4786:	30 e0       	ldi	r19, 0x00	; 0
    4788:	40 e8       	ldi	r20, 0x80	; 128
    478a:	5f e3       	ldi	r21, 0x3F	; 63
    478c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4790:	88 23       	and	r24, r24
    4792:	44 f4       	brge	.+16     	; 0x47a4 <STEPPER_voidOn+0x1b9e>
		__ticks = 1;
    4794:	fe 01       	movw	r30, r28
    4796:	e7 5a       	subi	r30, 0xA7	; 167
    4798:	ff 4f       	sbci	r31, 0xFF	; 255
    479a:	81 e0       	ldi	r24, 0x01	; 1
    479c:	90 e0       	ldi	r25, 0x00	; 0
    479e:	91 83       	std	Z+1, r25	; 0x01
    47a0:	80 83       	st	Z, r24
    47a2:	64 c0       	rjmp	.+200    	; 0x486c <STEPPER_voidOn+0x1c66>
	else if (__tmp > 65535)
    47a4:	fe 01       	movw	r30, r28
    47a6:	e5 5a       	subi	r30, 0xA5	; 165
    47a8:	ff 4f       	sbci	r31, 0xFF	; 255
    47aa:	60 81       	ld	r22, Z
    47ac:	71 81       	ldd	r23, Z+1	; 0x01
    47ae:	82 81       	ldd	r24, Z+2	; 0x02
    47b0:	93 81       	ldd	r25, Z+3	; 0x03
    47b2:	20 e0       	ldi	r18, 0x00	; 0
    47b4:	3f ef       	ldi	r19, 0xFF	; 255
    47b6:	4f e7       	ldi	r20, 0x7F	; 127
    47b8:	57 e4       	ldi	r21, 0x47	; 71
    47ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47be:	18 16       	cp	r1, r24
    47c0:	0c f0       	brlt	.+2      	; 0x47c4 <STEPPER_voidOn+0x1bbe>
    47c2:	43 c0       	rjmp	.+134    	; 0x484a <STEPPER_voidOn+0x1c44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47c4:	fe 01       	movw	r30, r28
    47c6:	e1 5a       	subi	r30, 0xA1	; 161
    47c8:	ff 4f       	sbci	r31, 0xFF	; 255
    47ca:	60 81       	ld	r22, Z
    47cc:	71 81       	ldd	r23, Z+1	; 0x01
    47ce:	82 81       	ldd	r24, Z+2	; 0x02
    47d0:	93 81       	ldd	r25, Z+3	; 0x03
    47d2:	20 e0       	ldi	r18, 0x00	; 0
    47d4:	30 e0       	ldi	r19, 0x00	; 0
    47d6:	40 e2       	ldi	r20, 0x20	; 32
    47d8:	51 e4       	ldi	r21, 0x41	; 65
    47da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47de:	dc 01       	movw	r26, r24
    47e0:	cb 01       	movw	r24, r22
    47e2:	8e 01       	movw	r16, r28
    47e4:	07 5a       	subi	r16, 0xA7	; 167
    47e6:	1f 4f       	sbci	r17, 0xFF	; 255
    47e8:	bc 01       	movw	r22, r24
    47ea:	cd 01       	movw	r24, r26
    47ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47f0:	dc 01       	movw	r26, r24
    47f2:	cb 01       	movw	r24, r22
    47f4:	f8 01       	movw	r30, r16
    47f6:	91 83       	std	Z+1, r25	; 0x01
    47f8:	80 83       	st	Z, r24
    47fa:	1f c0       	rjmp	.+62     	; 0x483a <STEPPER_voidOn+0x1c34>
    47fc:	fe 01       	movw	r30, r28
    47fe:	e9 5a       	subi	r30, 0xA9	; 169
    4800:	ff 4f       	sbci	r31, 0xFF	; 255
    4802:	80 e9       	ldi	r24, 0x90	; 144
    4804:	91 e0       	ldi	r25, 0x01	; 1
    4806:	91 83       	std	Z+1, r25	; 0x01
    4808:	80 83       	st	Z, r24
    480a:	fe 01       	movw	r30, r28
    480c:	e9 5a       	subi	r30, 0xA9	; 169
    480e:	ff 4f       	sbci	r31, 0xFF	; 255
    4810:	80 81       	ld	r24, Z
    4812:	91 81       	ldd	r25, Z+1	; 0x01
    4814:	01 97       	sbiw	r24, 0x01	; 1
    4816:	f1 f7       	brne	.-4      	; 0x4814 <STEPPER_voidOn+0x1c0e>
    4818:	fe 01       	movw	r30, r28
    481a:	e9 5a       	subi	r30, 0xA9	; 169
    481c:	ff 4f       	sbci	r31, 0xFF	; 255
    481e:	91 83       	std	Z+1, r25	; 0x01
    4820:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4822:	de 01       	movw	r26, r28
    4824:	a7 5a       	subi	r26, 0xA7	; 167
    4826:	bf 4f       	sbci	r27, 0xFF	; 255
    4828:	fe 01       	movw	r30, r28
    482a:	e7 5a       	subi	r30, 0xA7	; 167
    482c:	ff 4f       	sbci	r31, 0xFF	; 255
    482e:	80 81       	ld	r24, Z
    4830:	91 81       	ldd	r25, Z+1	; 0x01
    4832:	01 97       	sbiw	r24, 0x01	; 1
    4834:	11 96       	adiw	r26, 0x01	; 1
    4836:	9c 93       	st	X, r25
    4838:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    483a:	fe 01       	movw	r30, r28
    483c:	e7 5a       	subi	r30, 0xA7	; 167
    483e:	ff 4f       	sbci	r31, 0xFF	; 255
    4840:	80 81       	ld	r24, Z
    4842:	91 81       	ldd	r25, Z+1	; 0x01
    4844:	00 97       	sbiw	r24, 0x00	; 0
    4846:	d1 f6       	brne	.-76     	; 0x47fc <STEPPER_voidOn+0x1bf6>
    4848:	27 c0       	rjmp	.+78     	; 0x4898 <STEPPER_voidOn+0x1c92>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    484a:	8e 01       	movw	r16, r28
    484c:	07 5a       	subi	r16, 0xA7	; 167
    484e:	1f 4f       	sbci	r17, 0xFF	; 255
    4850:	fe 01       	movw	r30, r28
    4852:	e5 5a       	subi	r30, 0xA5	; 165
    4854:	ff 4f       	sbci	r31, 0xFF	; 255
    4856:	60 81       	ld	r22, Z
    4858:	71 81       	ldd	r23, Z+1	; 0x01
    485a:	82 81       	ldd	r24, Z+2	; 0x02
    485c:	93 81       	ldd	r25, Z+3	; 0x03
    485e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4862:	dc 01       	movw	r26, r24
    4864:	cb 01       	movw	r24, r22
    4866:	f8 01       	movw	r30, r16
    4868:	91 83       	std	Z+1, r25	; 0x01
    486a:	80 83       	st	Z, r24
    486c:	de 01       	movw	r26, r28
    486e:	ab 5a       	subi	r26, 0xAB	; 171
    4870:	bf 4f       	sbci	r27, 0xFF	; 255
    4872:	fe 01       	movw	r30, r28
    4874:	e7 5a       	subi	r30, 0xA7	; 167
    4876:	ff 4f       	sbci	r31, 0xFF	; 255
    4878:	80 81       	ld	r24, Z
    487a:	91 81       	ldd	r25, Z+1	; 0x01
    487c:	8d 93       	st	X+, r24
    487e:	9c 93       	st	X, r25
    4880:	fe 01       	movw	r30, r28
    4882:	eb 5a       	subi	r30, 0xAB	; 171
    4884:	ff 4f       	sbci	r31, 0xFF	; 255
    4886:	80 81       	ld	r24, Z
    4888:	91 81       	ldd	r25, Z+1	; 0x01
    488a:	01 97       	sbiw	r24, 0x01	; 1
    488c:	f1 f7       	brne	.-4      	; 0x488a <STEPPER_voidOn+0x1c84>
    488e:	fe 01       	movw	r30, r28
    4890:	eb 5a       	subi	r30, 0xAB	; 171
    4892:	ff 4f       	sbci	r31, 0xFF	; 255
    4894:	91 83       	std	Z+1, r25	; 0x01
    4896:	80 83       	st	Z, r24
				_delay_ms( 50 );

				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_u8PIN_HIGH );
    4898:	82 e0       	ldi	r24, 0x02	; 2
    489a:	63 e0       	ldi	r22, 0x03	; 3
    489c:	41 e0       	ldi	r20, 0x01	; 1
    489e:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_u8PIN_HIGH );
    48a2:	82 e0       	ldi	r24, 0x02	; 2
    48a4:	64 e0       	ldi	r22, 0x04	; 4
    48a6:	41 e0       	ldi	r20, 0x01	; 1
    48a8:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_u8PIN_LOW  );
    48ac:	82 e0       	ldi	r24, 0x02	; 2
    48ae:	65 e0       	ldi	r22, 0x05	; 5
    48b0:	40 e0       	ldi	r20, 0x00	; 0
    48b2:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_u8PIN_LOW  );
    48b6:	82 e0       	ldi	r24, 0x02	; 2
    48b8:	66 e0       	ldi	r22, 0x06	; 6
    48ba:	40 e0       	ldi	r20, 0x00	; 0
    48bc:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    48c0:	fe 01       	movw	r30, r28
    48c2:	ef 5a       	subi	r30, 0xAF	; 175
    48c4:	ff 4f       	sbci	r31, 0xFF	; 255
    48c6:	80 e0       	ldi	r24, 0x00	; 0
    48c8:	90 e0       	ldi	r25, 0x00	; 0
    48ca:	a8 e4       	ldi	r26, 0x48	; 72
    48cc:	b2 e4       	ldi	r27, 0x42	; 66
    48ce:	80 83       	st	Z, r24
    48d0:	91 83       	std	Z+1, r25	; 0x01
    48d2:	a2 83       	std	Z+2, r26	; 0x02
    48d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48d6:	8e 01       	movw	r16, r28
    48d8:	03 5b       	subi	r16, 0xB3	; 179
    48da:	1f 4f       	sbci	r17, 0xFF	; 255
    48dc:	fe 01       	movw	r30, r28
    48de:	ef 5a       	subi	r30, 0xAF	; 175
    48e0:	ff 4f       	sbci	r31, 0xFF	; 255
    48e2:	60 81       	ld	r22, Z
    48e4:	71 81       	ldd	r23, Z+1	; 0x01
    48e6:	82 81       	ldd	r24, Z+2	; 0x02
    48e8:	93 81       	ldd	r25, Z+3	; 0x03
    48ea:	20 e0       	ldi	r18, 0x00	; 0
    48ec:	30 e0       	ldi	r19, 0x00	; 0
    48ee:	4a e7       	ldi	r20, 0x7A	; 122
    48f0:	55 e4       	ldi	r21, 0x45	; 69
    48f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48f6:	dc 01       	movw	r26, r24
    48f8:	cb 01       	movw	r24, r22
    48fa:	f8 01       	movw	r30, r16
    48fc:	80 83       	st	Z, r24
    48fe:	91 83       	std	Z+1, r25	; 0x01
    4900:	a2 83       	std	Z+2, r26	; 0x02
    4902:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4904:	fe 01       	movw	r30, r28
    4906:	e3 5b       	subi	r30, 0xB3	; 179
    4908:	ff 4f       	sbci	r31, 0xFF	; 255
    490a:	60 81       	ld	r22, Z
    490c:	71 81       	ldd	r23, Z+1	; 0x01
    490e:	82 81       	ldd	r24, Z+2	; 0x02
    4910:	93 81       	ldd	r25, Z+3	; 0x03
    4912:	20 e0       	ldi	r18, 0x00	; 0
    4914:	30 e0       	ldi	r19, 0x00	; 0
    4916:	40 e8       	ldi	r20, 0x80	; 128
    4918:	5f e3       	ldi	r21, 0x3F	; 63
    491a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    491e:	88 23       	and	r24, r24
    4920:	44 f4       	brge	.+16     	; 0x4932 <STEPPER_voidOn+0x1d2c>
		__ticks = 1;
    4922:	fe 01       	movw	r30, r28
    4924:	e5 5b       	subi	r30, 0xB5	; 181
    4926:	ff 4f       	sbci	r31, 0xFF	; 255
    4928:	81 e0       	ldi	r24, 0x01	; 1
    492a:	90 e0       	ldi	r25, 0x00	; 0
    492c:	91 83       	std	Z+1, r25	; 0x01
    492e:	80 83       	st	Z, r24
    4930:	64 c0       	rjmp	.+200    	; 0x49fa <STEPPER_voidOn+0x1df4>
	else if (__tmp > 65535)
    4932:	fe 01       	movw	r30, r28
    4934:	e3 5b       	subi	r30, 0xB3	; 179
    4936:	ff 4f       	sbci	r31, 0xFF	; 255
    4938:	60 81       	ld	r22, Z
    493a:	71 81       	ldd	r23, Z+1	; 0x01
    493c:	82 81       	ldd	r24, Z+2	; 0x02
    493e:	93 81       	ldd	r25, Z+3	; 0x03
    4940:	20 e0       	ldi	r18, 0x00	; 0
    4942:	3f ef       	ldi	r19, 0xFF	; 255
    4944:	4f e7       	ldi	r20, 0x7F	; 127
    4946:	57 e4       	ldi	r21, 0x47	; 71
    4948:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    494c:	18 16       	cp	r1, r24
    494e:	0c f0       	brlt	.+2      	; 0x4952 <STEPPER_voidOn+0x1d4c>
    4950:	43 c0       	rjmp	.+134    	; 0x49d8 <STEPPER_voidOn+0x1dd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4952:	fe 01       	movw	r30, r28
    4954:	ef 5a       	subi	r30, 0xAF	; 175
    4956:	ff 4f       	sbci	r31, 0xFF	; 255
    4958:	60 81       	ld	r22, Z
    495a:	71 81       	ldd	r23, Z+1	; 0x01
    495c:	82 81       	ldd	r24, Z+2	; 0x02
    495e:	93 81       	ldd	r25, Z+3	; 0x03
    4960:	20 e0       	ldi	r18, 0x00	; 0
    4962:	30 e0       	ldi	r19, 0x00	; 0
    4964:	40 e2       	ldi	r20, 0x20	; 32
    4966:	51 e4       	ldi	r21, 0x41	; 65
    4968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    496c:	dc 01       	movw	r26, r24
    496e:	cb 01       	movw	r24, r22
    4970:	8e 01       	movw	r16, r28
    4972:	05 5b       	subi	r16, 0xB5	; 181
    4974:	1f 4f       	sbci	r17, 0xFF	; 255
    4976:	bc 01       	movw	r22, r24
    4978:	cd 01       	movw	r24, r26
    497a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    497e:	dc 01       	movw	r26, r24
    4980:	cb 01       	movw	r24, r22
    4982:	f8 01       	movw	r30, r16
    4984:	91 83       	std	Z+1, r25	; 0x01
    4986:	80 83       	st	Z, r24
    4988:	1f c0       	rjmp	.+62     	; 0x49c8 <STEPPER_voidOn+0x1dc2>
    498a:	fe 01       	movw	r30, r28
    498c:	e7 5b       	subi	r30, 0xB7	; 183
    498e:	ff 4f       	sbci	r31, 0xFF	; 255
    4990:	80 e9       	ldi	r24, 0x90	; 144
    4992:	91 e0       	ldi	r25, 0x01	; 1
    4994:	91 83       	std	Z+1, r25	; 0x01
    4996:	80 83       	st	Z, r24
    4998:	fe 01       	movw	r30, r28
    499a:	e7 5b       	subi	r30, 0xB7	; 183
    499c:	ff 4f       	sbci	r31, 0xFF	; 255
    499e:	80 81       	ld	r24, Z
    49a0:	91 81       	ldd	r25, Z+1	; 0x01
    49a2:	01 97       	sbiw	r24, 0x01	; 1
    49a4:	f1 f7       	brne	.-4      	; 0x49a2 <STEPPER_voidOn+0x1d9c>
    49a6:	fe 01       	movw	r30, r28
    49a8:	e7 5b       	subi	r30, 0xB7	; 183
    49aa:	ff 4f       	sbci	r31, 0xFF	; 255
    49ac:	91 83       	std	Z+1, r25	; 0x01
    49ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49b0:	de 01       	movw	r26, r28
    49b2:	a5 5b       	subi	r26, 0xB5	; 181
    49b4:	bf 4f       	sbci	r27, 0xFF	; 255
    49b6:	fe 01       	movw	r30, r28
    49b8:	e5 5b       	subi	r30, 0xB5	; 181
    49ba:	ff 4f       	sbci	r31, 0xFF	; 255
    49bc:	80 81       	ld	r24, Z
    49be:	91 81       	ldd	r25, Z+1	; 0x01
    49c0:	01 97       	sbiw	r24, 0x01	; 1
    49c2:	11 96       	adiw	r26, 0x01	; 1
    49c4:	9c 93       	st	X, r25
    49c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49c8:	fe 01       	movw	r30, r28
    49ca:	e5 5b       	subi	r30, 0xB5	; 181
    49cc:	ff 4f       	sbci	r31, 0xFF	; 255
    49ce:	80 81       	ld	r24, Z
    49d0:	91 81       	ldd	r25, Z+1	; 0x01
    49d2:	00 97       	sbiw	r24, 0x00	; 0
    49d4:	d1 f6       	brne	.-76     	; 0x498a <STEPPER_voidOn+0x1d84>
    49d6:	27 c0       	rjmp	.+78     	; 0x4a26 <STEPPER_voidOn+0x1e20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49d8:	8e 01       	movw	r16, r28
    49da:	05 5b       	subi	r16, 0xB5	; 181
    49dc:	1f 4f       	sbci	r17, 0xFF	; 255
    49de:	fe 01       	movw	r30, r28
    49e0:	e3 5b       	subi	r30, 0xB3	; 179
    49e2:	ff 4f       	sbci	r31, 0xFF	; 255
    49e4:	60 81       	ld	r22, Z
    49e6:	71 81       	ldd	r23, Z+1	; 0x01
    49e8:	82 81       	ldd	r24, Z+2	; 0x02
    49ea:	93 81       	ldd	r25, Z+3	; 0x03
    49ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49f0:	dc 01       	movw	r26, r24
    49f2:	cb 01       	movw	r24, r22
    49f4:	f8 01       	movw	r30, r16
    49f6:	91 83       	std	Z+1, r25	; 0x01
    49f8:	80 83       	st	Z, r24
    49fa:	de 01       	movw	r26, r28
    49fc:	a9 5b       	subi	r26, 0xB9	; 185
    49fe:	bf 4f       	sbci	r27, 0xFF	; 255
    4a00:	fe 01       	movw	r30, r28
    4a02:	e5 5b       	subi	r30, 0xB5	; 181
    4a04:	ff 4f       	sbci	r31, 0xFF	; 255
    4a06:	80 81       	ld	r24, Z
    4a08:	91 81       	ldd	r25, Z+1	; 0x01
    4a0a:	8d 93       	st	X+, r24
    4a0c:	9c 93       	st	X, r25
    4a0e:	fe 01       	movw	r30, r28
    4a10:	e9 5b       	subi	r30, 0xB9	; 185
    4a12:	ff 4f       	sbci	r31, 0xFF	; 255
    4a14:	80 81       	ld	r24, Z
    4a16:	91 81       	ldd	r25, Z+1	; 0x01
    4a18:	01 97       	sbiw	r24, 0x01	; 1
    4a1a:	f1 f7       	brne	.-4      	; 0x4a18 <STEPPER_voidOn+0x1e12>
    4a1c:	fe 01       	movw	r30, r28
    4a1e:	e9 5b       	subi	r30, 0xB9	; 185
    4a20:	ff 4f       	sbci	r31, 0xFF	; 255
    4a22:	91 83       	std	Z+1, r25	; 0x01
    4a24:	80 83       	st	Z, r24
				_delay_ms( 50 );

				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   ,  DIO_u8PIN_HIGH );
    4a26:	82 e0       	ldi	r24, 0x02	; 2
    4a28:	63 e0       	ldi	r22, 0x03	; 3
    4a2a:	41 e0       	ldi	r20, 0x01	; 1
    4a2c:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   ,  DIO_u8PIN_HIGH );
    4a30:	82 e0       	ldi	r24, 0x02	; 2
    4a32:	64 e0       	ldi	r22, 0x04	; 4
    4a34:	41 e0       	ldi	r20, 0x01	; 1
    4a36:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN ,  DIO_u8PIN_LOW  );
    4a3a:	82 e0       	ldi	r24, 0x02	; 2
    4a3c:	65 e0       	ldi	r22, 0x05	; 5
    4a3e:	40 e0       	ldi	r20, 0x00	; 0
    4a40:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN ,  DIO_u8PIN_HIGH );
    4a44:	82 e0       	ldi	r24, 0x02	; 2
    4a46:	66 e0       	ldi	r22, 0x06	; 6
    4a48:	41 e0       	ldi	r20, 0x01	; 1
    4a4a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    4a4e:	fe 01       	movw	r30, r28
    4a50:	ed 5b       	subi	r30, 0xBD	; 189
    4a52:	ff 4f       	sbci	r31, 0xFF	; 255
    4a54:	80 e0       	ldi	r24, 0x00	; 0
    4a56:	90 e0       	ldi	r25, 0x00	; 0
    4a58:	a8 e4       	ldi	r26, 0x48	; 72
    4a5a:	b2 e4       	ldi	r27, 0x42	; 66
    4a5c:	80 83       	st	Z, r24
    4a5e:	91 83       	std	Z+1, r25	; 0x01
    4a60:	a2 83       	std	Z+2, r26	; 0x02
    4a62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a64:	8e 01       	movw	r16, r28
    4a66:	01 5c       	subi	r16, 0xC1	; 193
    4a68:	1f 4f       	sbci	r17, 0xFF	; 255
    4a6a:	fe 01       	movw	r30, r28
    4a6c:	ed 5b       	subi	r30, 0xBD	; 189
    4a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a70:	60 81       	ld	r22, Z
    4a72:	71 81       	ldd	r23, Z+1	; 0x01
    4a74:	82 81       	ldd	r24, Z+2	; 0x02
    4a76:	93 81       	ldd	r25, Z+3	; 0x03
    4a78:	20 e0       	ldi	r18, 0x00	; 0
    4a7a:	30 e0       	ldi	r19, 0x00	; 0
    4a7c:	4a e7       	ldi	r20, 0x7A	; 122
    4a7e:	55 e4       	ldi	r21, 0x45	; 69
    4a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a84:	dc 01       	movw	r26, r24
    4a86:	cb 01       	movw	r24, r22
    4a88:	f8 01       	movw	r30, r16
    4a8a:	80 83       	st	Z, r24
    4a8c:	91 83       	std	Z+1, r25	; 0x01
    4a8e:	a2 83       	std	Z+2, r26	; 0x02
    4a90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a92:	fe 01       	movw	r30, r28
    4a94:	ff 96       	adiw	r30, 0x3f	; 63
    4a96:	60 81       	ld	r22, Z
    4a98:	71 81       	ldd	r23, Z+1	; 0x01
    4a9a:	82 81       	ldd	r24, Z+2	; 0x02
    4a9c:	93 81       	ldd	r25, Z+3	; 0x03
    4a9e:	20 e0       	ldi	r18, 0x00	; 0
    4aa0:	30 e0       	ldi	r19, 0x00	; 0
    4aa2:	40 e8       	ldi	r20, 0x80	; 128
    4aa4:	5f e3       	ldi	r21, 0x3F	; 63
    4aa6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4aaa:	88 23       	and	r24, r24
    4aac:	2c f4       	brge	.+10     	; 0x4ab8 <STEPPER_voidOn+0x1eb2>
		__ticks = 1;
    4aae:	81 e0       	ldi	r24, 0x01	; 1
    4ab0:	90 e0       	ldi	r25, 0x00	; 0
    4ab2:	9e af       	std	Y+62, r25	; 0x3e
    4ab4:	8d af       	std	Y+61, r24	; 0x3d
    4ab6:	46 c0       	rjmp	.+140    	; 0x4b44 <STEPPER_voidOn+0x1f3e>
	else if (__tmp > 65535)
    4ab8:	fe 01       	movw	r30, r28
    4aba:	ff 96       	adiw	r30, 0x3f	; 63
    4abc:	60 81       	ld	r22, Z
    4abe:	71 81       	ldd	r23, Z+1	; 0x01
    4ac0:	82 81       	ldd	r24, Z+2	; 0x02
    4ac2:	93 81       	ldd	r25, Z+3	; 0x03
    4ac4:	20 e0       	ldi	r18, 0x00	; 0
    4ac6:	3f ef       	ldi	r19, 0xFF	; 255
    4ac8:	4f e7       	ldi	r20, 0x7F	; 127
    4aca:	57 e4       	ldi	r21, 0x47	; 71
    4acc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ad0:	18 16       	cp	r1, r24
    4ad2:	64 f5       	brge	.+88     	; 0x4b2c <STEPPER_voidOn+0x1f26>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ad4:	fe 01       	movw	r30, r28
    4ad6:	ed 5b       	subi	r30, 0xBD	; 189
    4ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    4ada:	60 81       	ld	r22, Z
    4adc:	71 81       	ldd	r23, Z+1	; 0x01
    4ade:	82 81       	ldd	r24, Z+2	; 0x02
    4ae0:	93 81       	ldd	r25, Z+3	; 0x03
    4ae2:	20 e0       	ldi	r18, 0x00	; 0
    4ae4:	30 e0       	ldi	r19, 0x00	; 0
    4ae6:	40 e2       	ldi	r20, 0x20	; 32
    4ae8:	51 e4       	ldi	r21, 0x41	; 65
    4aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4aee:	dc 01       	movw	r26, r24
    4af0:	cb 01       	movw	r24, r22
    4af2:	bc 01       	movw	r22, r24
    4af4:	cd 01       	movw	r24, r26
    4af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4afa:	dc 01       	movw	r26, r24
    4afc:	cb 01       	movw	r24, r22
    4afe:	9e af       	std	Y+62, r25	; 0x3e
    4b00:	8d af       	std	Y+61, r24	; 0x3d
    4b02:	0f c0       	rjmp	.+30     	; 0x4b22 <STEPPER_voidOn+0x1f1c>
    4b04:	80 e9       	ldi	r24, 0x90	; 144
    4b06:	91 e0       	ldi	r25, 0x01	; 1
    4b08:	9c af       	std	Y+60, r25	; 0x3c
    4b0a:	8b af       	std	Y+59, r24	; 0x3b
    4b0c:	8b ad       	ldd	r24, Y+59	; 0x3b
    4b0e:	9c ad       	ldd	r25, Y+60	; 0x3c
    4b10:	01 97       	sbiw	r24, 0x01	; 1
    4b12:	f1 f7       	brne	.-4      	; 0x4b10 <STEPPER_voidOn+0x1f0a>
    4b14:	9c af       	std	Y+60, r25	; 0x3c
    4b16:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b18:	8d ad       	ldd	r24, Y+61	; 0x3d
    4b1a:	9e ad       	ldd	r25, Y+62	; 0x3e
    4b1c:	01 97       	sbiw	r24, 0x01	; 1
    4b1e:	9e af       	std	Y+62, r25	; 0x3e
    4b20:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b22:	8d ad       	ldd	r24, Y+61	; 0x3d
    4b24:	9e ad       	ldd	r25, Y+62	; 0x3e
    4b26:	00 97       	sbiw	r24, 0x00	; 0
    4b28:	69 f7       	brne	.-38     	; 0x4b04 <STEPPER_voidOn+0x1efe>
    4b2a:	16 c0       	rjmp	.+44     	; 0x4b58 <STEPPER_voidOn+0x1f52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b2c:	fe 01       	movw	r30, r28
    4b2e:	ff 96       	adiw	r30, 0x3f	; 63
    4b30:	60 81       	ld	r22, Z
    4b32:	71 81       	ldd	r23, Z+1	; 0x01
    4b34:	82 81       	ldd	r24, Z+2	; 0x02
    4b36:	93 81       	ldd	r25, Z+3	; 0x03
    4b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b3c:	dc 01       	movw	r26, r24
    4b3e:	cb 01       	movw	r24, r22
    4b40:	9e af       	std	Y+62, r25	; 0x3e
    4b42:	8d af       	std	Y+61, r24	; 0x3d
    4b44:	8d ad       	ldd	r24, Y+61	; 0x3d
    4b46:	9e ad       	ldd	r25, Y+62	; 0x3e
    4b48:	9a af       	std	Y+58, r25	; 0x3a
    4b4a:	89 af       	std	Y+57, r24	; 0x39
    4b4c:	89 ad       	ldd	r24, Y+57	; 0x39
    4b4e:	9a ad       	ldd	r25, Y+58	; 0x3a
    4b50:	01 97       	sbiw	r24, 0x01	; 1
    4b52:	f1 f7       	brne	.-4      	; 0x4b50 <STEPPER_voidOn+0x1f4a>
    4b54:	9a af       	std	Y+58, r25	; 0x3a
    4b56:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms( 50 );

				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_u8PIN_HIGH );
    4b58:	82 e0       	ldi	r24, 0x02	; 2
    4b5a:	63 e0       	ldi	r22, 0x03	; 3
    4b5c:	41 e0       	ldi	r20, 0x01	; 1
    4b5e:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_u8PIN_LOW  );
    4b62:	82 e0       	ldi	r24, 0x02	; 2
    4b64:	64 e0       	ldi	r22, 0x04	; 4
    4b66:	40 e0       	ldi	r20, 0x00	; 0
    4b68:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_u8PIN_LOW  );
    4b6c:	82 e0       	ldi	r24, 0x02	; 2
    4b6e:	65 e0       	ldi	r22, 0x05	; 5
    4b70:	40 e0       	ldi	r20, 0x00	; 0
    4b72:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_u8PIN_HIGH );
    4b76:	82 e0       	ldi	r24, 0x02	; 2
    4b78:	66 e0       	ldi	r22, 0x06	; 6
    4b7a:	41 e0       	ldi	r20, 0x01	; 1
    4b7c:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    4b80:	80 e0       	ldi	r24, 0x00	; 0
    4b82:	90 e0       	ldi	r25, 0x00	; 0
    4b84:	a8 e4       	ldi	r26, 0x48	; 72
    4b86:	b2 e4       	ldi	r27, 0x42	; 66
    4b88:	8d ab       	std	Y+53, r24	; 0x35
    4b8a:	9e ab       	std	Y+54, r25	; 0x36
    4b8c:	af ab       	std	Y+55, r26	; 0x37
    4b8e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b90:	6d a9       	ldd	r22, Y+53	; 0x35
    4b92:	7e a9       	ldd	r23, Y+54	; 0x36
    4b94:	8f a9       	ldd	r24, Y+55	; 0x37
    4b96:	98 ad       	ldd	r25, Y+56	; 0x38
    4b98:	20 e0       	ldi	r18, 0x00	; 0
    4b9a:	30 e0       	ldi	r19, 0x00	; 0
    4b9c:	4a e7       	ldi	r20, 0x7A	; 122
    4b9e:	55 e4       	ldi	r21, 0x45	; 69
    4ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ba4:	dc 01       	movw	r26, r24
    4ba6:	cb 01       	movw	r24, r22
    4ba8:	89 ab       	std	Y+49, r24	; 0x31
    4baa:	9a ab       	std	Y+50, r25	; 0x32
    4bac:	ab ab       	std	Y+51, r26	; 0x33
    4bae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4bb0:	69 a9       	ldd	r22, Y+49	; 0x31
    4bb2:	7a a9       	ldd	r23, Y+50	; 0x32
    4bb4:	8b a9       	ldd	r24, Y+51	; 0x33
    4bb6:	9c a9       	ldd	r25, Y+52	; 0x34
    4bb8:	20 e0       	ldi	r18, 0x00	; 0
    4bba:	30 e0       	ldi	r19, 0x00	; 0
    4bbc:	40 e8       	ldi	r20, 0x80	; 128
    4bbe:	5f e3       	ldi	r21, 0x3F	; 63
    4bc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4bc4:	88 23       	and	r24, r24
    4bc6:	2c f4       	brge	.+10     	; 0x4bd2 <STEPPER_voidOn+0x1fcc>
		__ticks = 1;
    4bc8:	81 e0       	ldi	r24, 0x01	; 1
    4bca:	90 e0       	ldi	r25, 0x00	; 0
    4bcc:	98 ab       	std	Y+48, r25	; 0x30
    4bce:	8f a7       	std	Y+47, r24	; 0x2f
    4bd0:	3f c0       	rjmp	.+126    	; 0x4c50 <STEPPER_voidOn+0x204a>
	else if (__tmp > 65535)
    4bd2:	69 a9       	ldd	r22, Y+49	; 0x31
    4bd4:	7a a9       	ldd	r23, Y+50	; 0x32
    4bd6:	8b a9       	ldd	r24, Y+51	; 0x33
    4bd8:	9c a9       	ldd	r25, Y+52	; 0x34
    4bda:	20 e0       	ldi	r18, 0x00	; 0
    4bdc:	3f ef       	ldi	r19, 0xFF	; 255
    4bde:	4f e7       	ldi	r20, 0x7F	; 127
    4be0:	57 e4       	ldi	r21, 0x47	; 71
    4be2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4be6:	18 16       	cp	r1, r24
    4be8:	4c f5       	brge	.+82     	; 0x4c3c <STEPPER_voidOn+0x2036>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bea:	6d a9       	ldd	r22, Y+53	; 0x35
    4bec:	7e a9       	ldd	r23, Y+54	; 0x36
    4bee:	8f a9       	ldd	r24, Y+55	; 0x37
    4bf0:	98 ad       	ldd	r25, Y+56	; 0x38
    4bf2:	20 e0       	ldi	r18, 0x00	; 0
    4bf4:	30 e0       	ldi	r19, 0x00	; 0
    4bf6:	40 e2       	ldi	r20, 0x20	; 32
    4bf8:	51 e4       	ldi	r21, 0x41	; 65
    4bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bfe:	dc 01       	movw	r26, r24
    4c00:	cb 01       	movw	r24, r22
    4c02:	bc 01       	movw	r22, r24
    4c04:	cd 01       	movw	r24, r26
    4c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c0a:	dc 01       	movw	r26, r24
    4c0c:	cb 01       	movw	r24, r22
    4c0e:	98 ab       	std	Y+48, r25	; 0x30
    4c10:	8f a7       	std	Y+47, r24	; 0x2f
    4c12:	0f c0       	rjmp	.+30     	; 0x4c32 <STEPPER_voidOn+0x202c>
    4c14:	80 e9       	ldi	r24, 0x90	; 144
    4c16:	91 e0       	ldi	r25, 0x01	; 1
    4c18:	9e a7       	std	Y+46, r25	; 0x2e
    4c1a:	8d a7       	std	Y+45, r24	; 0x2d
    4c1c:	8d a5       	ldd	r24, Y+45	; 0x2d
    4c1e:	9e a5       	ldd	r25, Y+46	; 0x2e
    4c20:	01 97       	sbiw	r24, 0x01	; 1
    4c22:	f1 f7       	brne	.-4      	; 0x4c20 <STEPPER_voidOn+0x201a>
    4c24:	9e a7       	std	Y+46, r25	; 0x2e
    4c26:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c28:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c2a:	98 a9       	ldd	r25, Y+48	; 0x30
    4c2c:	01 97       	sbiw	r24, 0x01	; 1
    4c2e:	98 ab       	std	Y+48, r25	; 0x30
    4c30:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c32:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c34:	98 a9       	ldd	r25, Y+48	; 0x30
    4c36:	00 97       	sbiw	r24, 0x00	; 0
    4c38:	69 f7       	brne	.-38     	; 0x4c14 <STEPPER_voidOn+0x200e>
    4c3a:	14 c0       	rjmp	.+40     	; 0x4c64 <STEPPER_voidOn+0x205e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c3c:	69 a9       	ldd	r22, Y+49	; 0x31
    4c3e:	7a a9       	ldd	r23, Y+50	; 0x32
    4c40:	8b a9       	ldd	r24, Y+51	; 0x33
    4c42:	9c a9       	ldd	r25, Y+52	; 0x34
    4c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c48:	dc 01       	movw	r26, r24
    4c4a:	cb 01       	movw	r24, r22
    4c4c:	98 ab       	std	Y+48, r25	; 0x30
    4c4e:	8f a7       	std	Y+47, r24	; 0x2f
    4c50:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c52:	98 a9       	ldd	r25, Y+48	; 0x30
    4c54:	9c a7       	std	Y+44, r25	; 0x2c
    4c56:	8b a7       	std	Y+43, r24	; 0x2b
    4c58:	8b a5       	ldd	r24, Y+43	; 0x2b
    4c5a:	9c a5       	ldd	r25, Y+44	; 0x2c
    4c5c:	01 97       	sbiw	r24, 0x01	; 1
    4c5e:	f1 f7       	brne	.-4      	; 0x4c5c <STEPPER_voidOn+0x2056>
    4c60:	9c a7       	std	Y+44, r25	; 0x2c
    4c62:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms( 50 );

				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_u8PIN_HIGH);
    4c64:	82 e0       	ldi	r24, 0x02	; 2
    4c66:	63 e0       	ldi	r22, 0x03	; 3
    4c68:	41 e0       	ldi	r20, 0x01	; 1
    4c6a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_u8PIN_LOW );
    4c6e:	82 e0       	ldi	r24, 0x02	; 2
    4c70:	64 e0       	ldi	r22, 0x04	; 4
    4c72:	40 e0       	ldi	r20, 0x00	; 0
    4c74:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_u8PIN_HIGH);
    4c78:	82 e0       	ldi	r24, 0x02	; 2
    4c7a:	65 e0       	ldi	r22, 0x05	; 5
    4c7c:	41 e0       	ldi	r20, 0x01	; 1
    4c7e:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_u8PIN_HIGH);
    4c82:	82 e0       	ldi	r24, 0x02	; 2
    4c84:	66 e0       	ldi	r22, 0x06	; 6
    4c86:	41 e0       	ldi	r20, 0x01	; 1
    4c88:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    4c8c:	80 e0       	ldi	r24, 0x00	; 0
    4c8e:	90 e0       	ldi	r25, 0x00	; 0
    4c90:	a8 e4       	ldi	r26, 0x48	; 72
    4c92:	b2 e4       	ldi	r27, 0x42	; 66
    4c94:	8f a3       	std	Y+39, r24	; 0x27
    4c96:	98 a7       	std	Y+40, r25	; 0x28
    4c98:	a9 a7       	std	Y+41, r26	; 0x29
    4c9a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c9c:	6f a1       	ldd	r22, Y+39	; 0x27
    4c9e:	78 a5       	ldd	r23, Y+40	; 0x28
    4ca0:	89 a5       	ldd	r24, Y+41	; 0x29
    4ca2:	9a a5       	ldd	r25, Y+42	; 0x2a
    4ca4:	20 e0       	ldi	r18, 0x00	; 0
    4ca6:	30 e0       	ldi	r19, 0x00	; 0
    4ca8:	4a e7       	ldi	r20, 0x7A	; 122
    4caa:	55 e4       	ldi	r21, 0x45	; 69
    4cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cb0:	dc 01       	movw	r26, r24
    4cb2:	cb 01       	movw	r24, r22
    4cb4:	8b a3       	std	Y+35, r24	; 0x23
    4cb6:	9c a3       	std	Y+36, r25	; 0x24
    4cb8:	ad a3       	std	Y+37, r26	; 0x25
    4cba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4cbc:	6b a1       	ldd	r22, Y+35	; 0x23
    4cbe:	7c a1       	ldd	r23, Y+36	; 0x24
    4cc0:	8d a1       	ldd	r24, Y+37	; 0x25
    4cc2:	9e a1       	ldd	r25, Y+38	; 0x26
    4cc4:	20 e0       	ldi	r18, 0x00	; 0
    4cc6:	30 e0       	ldi	r19, 0x00	; 0
    4cc8:	40 e8       	ldi	r20, 0x80	; 128
    4cca:	5f e3       	ldi	r21, 0x3F	; 63
    4ccc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4cd0:	88 23       	and	r24, r24
    4cd2:	2c f4       	brge	.+10     	; 0x4cde <STEPPER_voidOn+0x20d8>
		__ticks = 1;
    4cd4:	81 e0       	ldi	r24, 0x01	; 1
    4cd6:	90 e0       	ldi	r25, 0x00	; 0
    4cd8:	9a a3       	std	Y+34, r25	; 0x22
    4cda:	89 a3       	std	Y+33, r24	; 0x21
    4cdc:	3f c0       	rjmp	.+126    	; 0x4d5c <STEPPER_voidOn+0x2156>
	else if (__tmp > 65535)
    4cde:	6b a1       	ldd	r22, Y+35	; 0x23
    4ce0:	7c a1       	ldd	r23, Y+36	; 0x24
    4ce2:	8d a1       	ldd	r24, Y+37	; 0x25
    4ce4:	9e a1       	ldd	r25, Y+38	; 0x26
    4ce6:	20 e0       	ldi	r18, 0x00	; 0
    4ce8:	3f ef       	ldi	r19, 0xFF	; 255
    4cea:	4f e7       	ldi	r20, 0x7F	; 127
    4cec:	57 e4       	ldi	r21, 0x47	; 71
    4cee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4cf2:	18 16       	cp	r1, r24
    4cf4:	4c f5       	brge	.+82     	; 0x4d48 <STEPPER_voidOn+0x2142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cf6:	6f a1       	ldd	r22, Y+39	; 0x27
    4cf8:	78 a5       	ldd	r23, Y+40	; 0x28
    4cfa:	89 a5       	ldd	r24, Y+41	; 0x29
    4cfc:	9a a5       	ldd	r25, Y+42	; 0x2a
    4cfe:	20 e0       	ldi	r18, 0x00	; 0
    4d00:	30 e0       	ldi	r19, 0x00	; 0
    4d02:	40 e2       	ldi	r20, 0x20	; 32
    4d04:	51 e4       	ldi	r21, 0x41	; 65
    4d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d0a:	dc 01       	movw	r26, r24
    4d0c:	cb 01       	movw	r24, r22
    4d0e:	bc 01       	movw	r22, r24
    4d10:	cd 01       	movw	r24, r26
    4d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d16:	dc 01       	movw	r26, r24
    4d18:	cb 01       	movw	r24, r22
    4d1a:	9a a3       	std	Y+34, r25	; 0x22
    4d1c:	89 a3       	std	Y+33, r24	; 0x21
    4d1e:	0f c0       	rjmp	.+30     	; 0x4d3e <STEPPER_voidOn+0x2138>
    4d20:	80 e9       	ldi	r24, 0x90	; 144
    4d22:	91 e0       	ldi	r25, 0x01	; 1
    4d24:	98 a3       	std	Y+32, r25	; 0x20
    4d26:	8f 8f       	std	Y+31, r24	; 0x1f
    4d28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4d2a:	98 a1       	ldd	r25, Y+32	; 0x20
    4d2c:	01 97       	sbiw	r24, 0x01	; 1
    4d2e:	f1 f7       	brne	.-4      	; 0x4d2c <STEPPER_voidOn+0x2126>
    4d30:	98 a3       	std	Y+32, r25	; 0x20
    4d32:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d34:	89 a1       	ldd	r24, Y+33	; 0x21
    4d36:	9a a1       	ldd	r25, Y+34	; 0x22
    4d38:	01 97       	sbiw	r24, 0x01	; 1
    4d3a:	9a a3       	std	Y+34, r25	; 0x22
    4d3c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d3e:	89 a1       	ldd	r24, Y+33	; 0x21
    4d40:	9a a1       	ldd	r25, Y+34	; 0x22
    4d42:	00 97       	sbiw	r24, 0x00	; 0
    4d44:	69 f7       	brne	.-38     	; 0x4d20 <STEPPER_voidOn+0x211a>
    4d46:	14 c0       	rjmp	.+40     	; 0x4d70 <STEPPER_voidOn+0x216a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d48:	6b a1       	ldd	r22, Y+35	; 0x23
    4d4a:	7c a1       	ldd	r23, Y+36	; 0x24
    4d4c:	8d a1       	ldd	r24, Y+37	; 0x25
    4d4e:	9e a1       	ldd	r25, Y+38	; 0x26
    4d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d54:	dc 01       	movw	r26, r24
    4d56:	cb 01       	movw	r24, r22
    4d58:	9a a3       	std	Y+34, r25	; 0x22
    4d5a:	89 a3       	std	Y+33, r24	; 0x21
    4d5c:	89 a1       	ldd	r24, Y+33	; 0x21
    4d5e:	9a a1       	ldd	r25, Y+34	; 0x22
    4d60:	9e 8f       	std	Y+30, r25	; 0x1e
    4d62:	8d 8f       	std	Y+29, r24	; 0x1d
    4d64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4d66:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4d68:	01 97       	sbiw	r24, 0x01	; 1
    4d6a:	f1 f7       	brne	.-4      	; 0x4d68 <STEPPER_voidOn+0x2162>
    4d6c:	9e 8f       	std	Y+30, r25	; 0x1e
    4d6e:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms( 50 );

				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   ,  DIO_u8PIN_LOW   );
    4d70:	82 e0       	ldi	r24, 0x02	; 2
    4d72:	63 e0       	ldi	r22, 0x03	; 3
    4d74:	40 e0       	ldi	r20, 0x00	; 0
    4d76:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   ,  DIO_u8PIN_LOW   );
    4d7a:	82 e0       	ldi	r24, 0x02	; 2
    4d7c:	64 e0       	ldi	r22, 0x04	; 4
    4d7e:	40 e0       	ldi	r20, 0x00	; 0
    4d80:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN ,  DIO_u8PIN_HIGH  );
    4d84:	82 e0       	ldi	r24, 0x02	; 2
    4d86:	65 e0       	ldi	r22, 0x05	; 5
    4d88:	41 e0       	ldi	r20, 0x01	; 1
    4d8a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN ,  DIO_u8PIN_HIGH  );
    4d8e:	82 e0       	ldi	r24, 0x02	; 2
    4d90:	66 e0       	ldi	r22, 0x06	; 6
    4d92:	41 e0       	ldi	r20, 0x01	; 1
    4d94:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    4d98:	80 e0       	ldi	r24, 0x00	; 0
    4d9a:	90 e0       	ldi	r25, 0x00	; 0
    4d9c:	a8 e4       	ldi	r26, 0x48	; 72
    4d9e:	b2 e4       	ldi	r27, 0x42	; 66
    4da0:	89 8f       	std	Y+25, r24	; 0x19
    4da2:	9a 8f       	std	Y+26, r25	; 0x1a
    4da4:	ab 8f       	std	Y+27, r26	; 0x1b
    4da6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4da8:	69 8d       	ldd	r22, Y+25	; 0x19
    4daa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4dac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4dae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4db0:	20 e0       	ldi	r18, 0x00	; 0
    4db2:	30 e0       	ldi	r19, 0x00	; 0
    4db4:	4a e7       	ldi	r20, 0x7A	; 122
    4db6:	55 e4       	ldi	r21, 0x45	; 69
    4db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dbc:	dc 01       	movw	r26, r24
    4dbe:	cb 01       	movw	r24, r22
    4dc0:	8d 8b       	std	Y+21, r24	; 0x15
    4dc2:	9e 8b       	std	Y+22, r25	; 0x16
    4dc4:	af 8b       	std	Y+23, r26	; 0x17
    4dc6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4dc8:	6d 89       	ldd	r22, Y+21	; 0x15
    4dca:	7e 89       	ldd	r23, Y+22	; 0x16
    4dcc:	8f 89       	ldd	r24, Y+23	; 0x17
    4dce:	98 8d       	ldd	r25, Y+24	; 0x18
    4dd0:	20 e0       	ldi	r18, 0x00	; 0
    4dd2:	30 e0       	ldi	r19, 0x00	; 0
    4dd4:	40 e8       	ldi	r20, 0x80	; 128
    4dd6:	5f e3       	ldi	r21, 0x3F	; 63
    4dd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ddc:	88 23       	and	r24, r24
    4dde:	2c f4       	brge	.+10     	; 0x4dea <STEPPER_voidOn+0x21e4>
		__ticks = 1;
    4de0:	81 e0       	ldi	r24, 0x01	; 1
    4de2:	90 e0       	ldi	r25, 0x00	; 0
    4de4:	9c 8b       	std	Y+20, r25	; 0x14
    4de6:	8b 8b       	std	Y+19, r24	; 0x13
    4de8:	3f c0       	rjmp	.+126    	; 0x4e68 <STEPPER_voidOn+0x2262>
	else if (__tmp > 65535)
    4dea:	6d 89       	ldd	r22, Y+21	; 0x15
    4dec:	7e 89       	ldd	r23, Y+22	; 0x16
    4dee:	8f 89       	ldd	r24, Y+23	; 0x17
    4df0:	98 8d       	ldd	r25, Y+24	; 0x18
    4df2:	20 e0       	ldi	r18, 0x00	; 0
    4df4:	3f ef       	ldi	r19, 0xFF	; 255
    4df6:	4f e7       	ldi	r20, 0x7F	; 127
    4df8:	57 e4       	ldi	r21, 0x47	; 71
    4dfa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4dfe:	18 16       	cp	r1, r24
    4e00:	4c f5       	brge	.+82     	; 0x4e54 <STEPPER_voidOn+0x224e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e02:	69 8d       	ldd	r22, Y+25	; 0x19
    4e04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e0a:	20 e0       	ldi	r18, 0x00	; 0
    4e0c:	30 e0       	ldi	r19, 0x00	; 0
    4e0e:	40 e2       	ldi	r20, 0x20	; 32
    4e10:	51 e4       	ldi	r21, 0x41	; 65
    4e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e16:	dc 01       	movw	r26, r24
    4e18:	cb 01       	movw	r24, r22
    4e1a:	bc 01       	movw	r22, r24
    4e1c:	cd 01       	movw	r24, r26
    4e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e22:	dc 01       	movw	r26, r24
    4e24:	cb 01       	movw	r24, r22
    4e26:	9c 8b       	std	Y+20, r25	; 0x14
    4e28:	8b 8b       	std	Y+19, r24	; 0x13
    4e2a:	0f c0       	rjmp	.+30     	; 0x4e4a <STEPPER_voidOn+0x2244>
    4e2c:	80 e9       	ldi	r24, 0x90	; 144
    4e2e:	91 e0       	ldi	r25, 0x01	; 1
    4e30:	9a 8b       	std	Y+18, r25	; 0x12
    4e32:	89 8b       	std	Y+17, r24	; 0x11
    4e34:	89 89       	ldd	r24, Y+17	; 0x11
    4e36:	9a 89       	ldd	r25, Y+18	; 0x12
    4e38:	01 97       	sbiw	r24, 0x01	; 1
    4e3a:	f1 f7       	brne	.-4      	; 0x4e38 <STEPPER_voidOn+0x2232>
    4e3c:	9a 8b       	std	Y+18, r25	; 0x12
    4e3e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e40:	8b 89       	ldd	r24, Y+19	; 0x13
    4e42:	9c 89       	ldd	r25, Y+20	; 0x14
    4e44:	01 97       	sbiw	r24, 0x01	; 1
    4e46:	9c 8b       	std	Y+20, r25	; 0x14
    4e48:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e4a:	8b 89       	ldd	r24, Y+19	; 0x13
    4e4c:	9c 89       	ldd	r25, Y+20	; 0x14
    4e4e:	00 97       	sbiw	r24, 0x00	; 0
    4e50:	69 f7       	brne	.-38     	; 0x4e2c <STEPPER_voidOn+0x2226>
    4e52:	14 c0       	rjmp	.+40     	; 0x4e7c <STEPPER_voidOn+0x2276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e54:	6d 89       	ldd	r22, Y+21	; 0x15
    4e56:	7e 89       	ldd	r23, Y+22	; 0x16
    4e58:	8f 89       	ldd	r24, Y+23	; 0x17
    4e5a:	98 8d       	ldd	r25, Y+24	; 0x18
    4e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e60:	dc 01       	movw	r26, r24
    4e62:	cb 01       	movw	r24, r22
    4e64:	9c 8b       	std	Y+20, r25	; 0x14
    4e66:	8b 8b       	std	Y+19, r24	; 0x13
    4e68:	8b 89       	ldd	r24, Y+19	; 0x13
    4e6a:	9c 89       	ldd	r25, Y+20	; 0x14
    4e6c:	98 8b       	std	Y+16, r25	; 0x10
    4e6e:	8f 87       	std	Y+15, r24	; 0x0f
    4e70:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e72:	98 89       	ldd	r25, Y+16	; 0x10
    4e74:	01 97       	sbiw	r24, 0x01	; 1
    4e76:	f1 f7       	brne	.-4      	; 0x4e74 <STEPPER_voidOn+0x226e>
    4e78:	98 8b       	std	Y+16, r25	; 0x10
    4e7a:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms( 50 );

				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_u8PIN_LOW  );
    4e7c:	82 e0       	ldi	r24, 0x02	; 2
    4e7e:	63 e0       	ldi	r22, 0x03	; 3
    4e80:	40 e0       	ldi	r20, 0x00	; 0
    4e82:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_u8PIN_HIGH );
    4e86:	82 e0       	ldi	r24, 0x02	; 2
    4e88:	64 e0       	ldi	r22, 0x04	; 4
    4e8a:	41 e0       	ldi	r20, 0x01	; 1
    4e8c:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_u8PIN_HIGH );
    4e90:	82 e0       	ldi	r24, 0x02	; 2
    4e92:	65 e0       	ldi	r22, 0x05	; 5
    4e94:	41 e0       	ldi	r20, 0x01	; 1
    4e96:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
				DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_u8PIN_HIGH );
    4e9a:	82 e0       	ldi	r24, 0x02	; 2
    4e9c:	66 e0       	ldi	r22, 0x06	; 6
    4e9e:	41 e0       	ldi	r20, 0x01	; 1
    4ea0:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
    4ea4:	80 e0       	ldi	r24, 0x00	; 0
    4ea6:	90 e0       	ldi	r25, 0x00	; 0
    4ea8:	a8 e4       	ldi	r26, 0x48	; 72
    4eaa:	b2 e4       	ldi	r27, 0x42	; 66
    4eac:	8b 87       	std	Y+11, r24	; 0x0b
    4eae:	9c 87       	std	Y+12, r25	; 0x0c
    4eb0:	ad 87       	std	Y+13, r26	; 0x0d
    4eb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4eb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    4eb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    4eb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4eba:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ebc:	20 e0       	ldi	r18, 0x00	; 0
    4ebe:	30 e0       	ldi	r19, 0x00	; 0
    4ec0:	4a e7       	ldi	r20, 0x7A	; 122
    4ec2:	55 e4       	ldi	r21, 0x45	; 69
    4ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ec8:	dc 01       	movw	r26, r24
    4eca:	cb 01       	movw	r24, r22
    4ecc:	8f 83       	std	Y+7, r24	; 0x07
    4ece:	98 87       	std	Y+8, r25	; 0x08
    4ed0:	a9 87       	std	Y+9, r26	; 0x09
    4ed2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4ed4:	6f 81       	ldd	r22, Y+7	; 0x07
    4ed6:	78 85       	ldd	r23, Y+8	; 0x08
    4ed8:	89 85       	ldd	r24, Y+9	; 0x09
    4eda:	9a 85       	ldd	r25, Y+10	; 0x0a
    4edc:	20 e0       	ldi	r18, 0x00	; 0
    4ede:	30 e0       	ldi	r19, 0x00	; 0
    4ee0:	40 e8       	ldi	r20, 0x80	; 128
    4ee2:	5f e3       	ldi	r21, 0x3F	; 63
    4ee4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ee8:	88 23       	and	r24, r24
    4eea:	2c f4       	brge	.+10     	; 0x4ef6 <STEPPER_voidOn+0x22f0>
		__ticks = 1;
    4eec:	81 e0       	ldi	r24, 0x01	; 1
    4eee:	90 e0       	ldi	r25, 0x00	; 0
    4ef0:	9e 83       	std	Y+6, r25	; 0x06
    4ef2:	8d 83       	std	Y+5, r24	; 0x05
    4ef4:	3f c0       	rjmp	.+126    	; 0x4f74 <STEPPER_voidOn+0x236e>
	else if (__tmp > 65535)
    4ef6:	6f 81       	ldd	r22, Y+7	; 0x07
    4ef8:	78 85       	ldd	r23, Y+8	; 0x08
    4efa:	89 85       	ldd	r24, Y+9	; 0x09
    4efc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4efe:	20 e0       	ldi	r18, 0x00	; 0
    4f00:	3f ef       	ldi	r19, 0xFF	; 255
    4f02:	4f e7       	ldi	r20, 0x7F	; 127
    4f04:	57 e4       	ldi	r21, 0x47	; 71
    4f06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f0a:	18 16       	cp	r1, r24
    4f0c:	4c f5       	brge	.+82     	; 0x4f60 <STEPPER_voidOn+0x235a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f10:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f12:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f14:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f16:	20 e0       	ldi	r18, 0x00	; 0
    4f18:	30 e0       	ldi	r19, 0x00	; 0
    4f1a:	40 e2       	ldi	r20, 0x20	; 32
    4f1c:	51 e4       	ldi	r21, 0x41	; 65
    4f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f22:	dc 01       	movw	r26, r24
    4f24:	cb 01       	movw	r24, r22
    4f26:	bc 01       	movw	r22, r24
    4f28:	cd 01       	movw	r24, r26
    4f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f2e:	dc 01       	movw	r26, r24
    4f30:	cb 01       	movw	r24, r22
    4f32:	9e 83       	std	Y+6, r25	; 0x06
    4f34:	8d 83       	std	Y+5, r24	; 0x05
    4f36:	0f c0       	rjmp	.+30     	; 0x4f56 <STEPPER_voidOn+0x2350>
    4f38:	80 e9       	ldi	r24, 0x90	; 144
    4f3a:	91 e0       	ldi	r25, 0x01	; 1
    4f3c:	9c 83       	std	Y+4, r25	; 0x04
    4f3e:	8b 83       	std	Y+3, r24	; 0x03
    4f40:	8b 81       	ldd	r24, Y+3	; 0x03
    4f42:	9c 81       	ldd	r25, Y+4	; 0x04
    4f44:	01 97       	sbiw	r24, 0x01	; 1
    4f46:	f1 f7       	brne	.-4      	; 0x4f44 <STEPPER_voidOn+0x233e>
    4f48:	9c 83       	std	Y+4, r25	; 0x04
    4f4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    4f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    4f50:	01 97       	sbiw	r24, 0x01	; 1
    4f52:	9e 83       	std	Y+6, r25	; 0x06
    4f54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f56:	8d 81       	ldd	r24, Y+5	; 0x05
    4f58:	9e 81       	ldd	r25, Y+6	; 0x06
    4f5a:	00 97       	sbiw	r24, 0x00	; 0
    4f5c:	69 f7       	brne	.-38     	; 0x4f38 <STEPPER_voidOn+0x2332>
    4f5e:	14 c0       	rjmp	.+40     	; 0x4f88 <STEPPER_voidOn+0x2382>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f60:	6f 81       	ldd	r22, Y+7	; 0x07
    4f62:	78 85       	ldd	r23, Y+8	; 0x08
    4f64:	89 85       	ldd	r24, Y+9	; 0x09
    4f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f6c:	dc 01       	movw	r26, r24
    4f6e:	cb 01       	movw	r24, r22
    4f70:	9e 83       	std	Y+6, r25	; 0x06
    4f72:	8d 83       	std	Y+5, r24	; 0x05
    4f74:	8d 81       	ldd	r24, Y+5	; 0x05
    4f76:	9e 81       	ldd	r25, Y+6	; 0x06
    4f78:	9a 83       	std	Y+2, r25	; 0x02
    4f7a:	89 83       	std	Y+1, r24	; 0x01
    4f7c:	89 81       	ldd	r24, Y+1	; 0x01
    4f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    4f80:	01 97       	sbiw	r24, 0x01	; 1
    4f82:	f1 f7       	brne	.-4      	; 0x4f80 <STEPPER_voidOn+0x237a>
    4f84:	9a 83       	std	Y+2, r25	; 0x02
    4f86:	89 83       	std	Y+1, r24	; 0x01

		}

	}

}
    4f88:	ce 5a       	subi	r28, 0xAE	; 174
    4f8a:	de 4f       	sbci	r29, 0xFE	; 254
    4f8c:	0f b6       	in	r0, 0x3f	; 63
    4f8e:	f8 94       	cli
    4f90:	de bf       	out	0x3e, r29	; 62
    4f92:	0f be       	out	0x3f, r0	; 63
    4f94:	cd bf       	out	0x3d, r28	; 61
    4f96:	cf 91       	pop	r28
    4f98:	df 91       	pop	r29
    4f9a:	1f 91       	pop	r17
    4f9c:	0f 91       	pop	r16
    4f9e:	08 95       	ret

00004fa0 <STEPPER_voidOff>:
/*
* Breif : This Function This Function used to  stepper motor off
* Parameters : Nothing
* return : Nothing 
*/
void STEPPER_voidOff ( void ){
    4fa0:	df 93       	push	r29
    4fa2:	cf 93       	push	r28
    4fa4:	cd b7       	in	r28, 0x3d	; 61
    4fa6:	de b7       	in	r29, 0x3e	; 62

	DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_BLUE_PIN   , DIO_u8PIN_LOW );
    4fa8:	82 e0       	ldi	r24, 0x02	; 2
    4faa:	63 e0       	ldi	r22, 0x03	; 3
    4fac:	40 e0       	ldi	r20, 0x00	; 0
    4fae:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
	DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_PINK_PIN   , DIO_u8PIN_LOW );
    4fb2:	82 e0       	ldi	r24, 0x02	; 2
    4fb4:	64 e0       	ldi	r22, 0x04	; 4
    4fb6:	40 e0       	ldi	r20, 0x00	; 0
    4fb8:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
	DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_YELLOW_PIN , DIO_u8PIN_LOW );
    4fbc:	82 e0       	ldi	r24, 0x02	; 2
    4fbe:	65 e0       	ldi	r22, 0x05	; 5
    4fc0:	40 e0       	ldi	r20, 0x00	; 0
    4fc2:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>
	DIO_u8_SetPinValue( STEPPER_PORT , STEPPER_ORANGE_PIN , DIO_u8PIN_LOW );
    4fc6:	82 e0       	ldi	r24, 0x02	; 2
    4fc8:	66 e0       	ldi	r22, 0x06	; 6
    4fca:	40 e0       	ldi	r20, 0x00	; 0
    4fcc:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <DIO_u8_SetPinValue>

}
    4fd0:	cf 91       	pop	r28
    4fd2:	df 91       	pop	r29
    4fd4:	08 95       	ret

00004fd6 <openDoor>:
BUZZER_T buzzer = {DIO_u8PORTB, DIO_u8PIN6, BUZZER_ACTIVE_HIGH};
ADC_info temp = {Vref_AVCC , RES_EIGHT_BITS};
void GetNotification(void);
void INIT2FUNC(void);
void openDoor(void)
{
    4fd6:	df 93       	push	r29
    4fd8:	cf 93       	push	r28
    4fda:	cd b7       	in	r28, 0x3d	; 61
    4fdc:	de b7       	in	r29, 0x3e	; 62
	// Example function to simulate opening a door using a stepper motor
	STEPPER_voidOn(STEPPER_FULL_STEP, STEPPER_CLOCK_WISE); // Adjust parameters as needed
    4fde:	81 e0       	ldi	r24, 0x01	; 1
    4fe0:	61 e0       	ldi	r22, 0x01	; 1
    4fe2:	0e 94 03 16 	call	0x2c06	; 0x2c06 <STEPPER_voidOn>
}
    4fe6:	cf 91       	pop	r28
    4fe8:	df 91       	pop	r29
    4fea:	08 95       	ret

00004fec <closeDoor>:

void closeDoor(void) {
    4fec:	df 93       	push	r29
    4fee:	cf 93       	push	r28
    4ff0:	cd b7       	in	r28, 0x3d	; 61
    4ff2:	de b7       	in	r29, 0x3e	; 62
	// Example function to simulate closing a door using a stepper motor
	STEPPER_voidOff();
    4ff4:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <STEPPER_voidOff>
}
    4ff8:	cf 91       	pop	r28
    4ffa:	df 91       	pop	r29
    4ffc:	08 95       	ret

00004ffe <blinkRedLED>:
void blinkRedLED(void) {
    4ffe:	df 93       	push	r29
    5000:	cf 93       	push	r28
    5002:	cd b7       	in	r28, 0x3d	; 61
    5004:	de b7       	in	r29, 0x3e	; 62
    5006:	6d 97       	sbiw	r28, 0x1d	; 29
    5008:	0f b6       	in	r0, 0x3f	; 63
    500a:	f8 94       	cli
    500c:	de bf       	out	0x3e, r29	; 62
    500e:	0f be       	out	0x3f, r0	; 63
    5010:	cd bf       	out	0x3d, r28	; 61
	for (u8 i = 0; i < 10; i++) { // Blink for approximately 5 seconds
    5012:	1d 8e       	std	Y+29, r1	; 0x1d
    5014:	f7 c0       	rjmp	.+494    	; 0x5204 <blinkRedLED+0x206>
		LED_voidOn(redLED);
    5016:	60 91 db 01 	lds	r22, 0x01DB
    501a:	70 91 dc 01 	lds	r23, 0x01DC
    501e:	80 91 dd 01 	lds	r24, 0x01DD
    5022:	0e 94 7e 14 	call	0x28fc	; 0x28fc <LED_voidOn>
    5026:	80 e0       	ldi	r24, 0x00	; 0
    5028:	90 e0       	ldi	r25, 0x00	; 0
    502a:	aa ef       	ldi	r26, 0xFA	; 250
    502c:	b3 e4       	ldi	r27, 0x43	; 67
    502e:	89 8f       	std	Y+25, r24	; 0x19
    5030:	9a 8f       	std	Y+26, r25	; 0x1a
    5032:	ab 8f       	std	Y+27, r26	; 0x1b
    5034:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5036:	69 8d       	ldd	r22, Y+25	; 0x19
    5038:	7a 8d       	ldd	r23, Y+26	; 0x1a
    503a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    503c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    503e:	20 e0       	ldi	r18, 0x00	; 0
    5040:	30 e0       	ldi	r19, 0x00	; 0
    5042:	4a e7       	ldi	r20, 0x7A	; 122
    5044:	55 e4       	ldi	r21, 0x45	; 69
    5046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    504a:	dc 01       	movw	r26, r24
    504c:	cb 01       	movw	r24, r22
    504e:	8d 8b       	std	Y+21, r24	; 0x15
    5050:	9e 8b       	std	Y+22, r25	; 0x16
    5052:	af 8b       	std	Y+23, r26	; 0x17
    5054:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5056:	6d 89       	ldd	r22, Y+21	; 0x15
    5058:	7e 89       	ldd	r23, Y+22	; 0x16
    505a:	8f 89       	ldd	r24, Y+23	; 0x17
    505c:	98 8d       	ldd	r25, Y+24	; 0x18
    505e:	20 e0       	ldi	r18, 0x00	; 0
    5060:	30 e0       	ldi	r19, 0x00	; 0
    5062:	40 e8       	ldi	r20, 0x80	; 128
    5064:	5f e3       	ldi	r21, 0x3F	; 63
    5066:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    506a:	88 23       	and	r24, r24
    506c:	2c f4       	brge	.+10     	; 0x5078 <blinkRedLED+0x7a>
		__ticks = 1;
    506e:	81 e0       	ldi	r24, 0x01	; 1
    5070:	90 e0       	ldi	r25, 0x00	; 0
    5072:	9c 8b       	std	Y+20, r25	; 0x14
    5074:	8b 8b       	std	Y+19, r24	; 0x13
    5076:	3f c0       	rjmp	.+126    	; 0x50f6 <blinkRedLED+0xf8>
	else if (__tmp > 65535)
    5078:	6d 89       	ldd	r22, Y+21	; 0x15
    507a:	7e 89       	ldd	r23, Y+22	; 0x16
    507c:	8f 89       	ldd	r24, Y+23	; 0x17
    507e:	98 8d       	ldd	r25, Y+24	; 0x18
    5080:	20 e0       	ldi	r18, 0x00	; 0
    5082:	3f ef       	ldi	r19, 0xFF	; 255
    5084:	4f e7       	ldi	r20, 0x7F	; 127
    5086:	57 e4       	ldi	r21, 0x47	; 71
    5088:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    508c:	18 16       	cp	r1, r24
    508e:	4c f5       	brge	.+82     	; 0x50e2 <blinkRedLED+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5090:	69 8d       	ldd	r22, Y+25	; 0x19
    5092:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5094:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5096:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5098:	20 e0       	ldi	r18, 0x00	; 0
    509a:	30 e0       	ldi	r19, 0x00	; 0
    509c:	40 e2       	ldi	r20, 0x20	; 32
    509e:	51 e4       	ldi	r21, 0x41	; 65
    50a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50a4:	dc 01       	movw	r26, r24
    50a6:	cb 01       	movw	r24, r22
    50a8:	bc 01       	movw	r22, r24
    50aa:	cd 01       	movw	r24, r26
    50ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50b0:	dc 01       	movw	r26, r24
    50b2:	cb 01       	movw	r24, r22
    50b4:	9c 8b       	std	Y+20, r25	; 0x14
    50b6:	8b 8b       	std	Y+19, r24	; 0x13
    50b8:	0f c0       	rjmp	.+30     	; 0x50d8 <blinkRedLED+0xda>
    50ba:	80 e9       	ldi	r24, 0x90	; 144
    50bc:	91 e0       	ldi	r25, 0x01	; 1
    50be:	9a 8b       	std	Y+18, r25	; 0x12
    50c0:	89 8b       	std	Y+17, r24	; 0x11
    50c2:	89 89       	ldd	r24, Y+17	; 0x11
    50c4:	9a 89       	ldd	r25, Y+18	; 0x12
    50c6:	01 97       	sbiw	r24, 0x01	; 1
    50c8:	f1 f7       	brne	.-4      	; 0x50c6 <blinkRedLED+0xc8>
    50ca:	9a 8b       	std	Y+18, r25	; 0x12
    50cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50ce:	8b 89       	ldd	r24, Y+19	; 0x13
    50d0:	9c 89       	ldd	r25, Y+20	; 0x14
    50d2:	01 97       	sbiw	r24, 0x01	; 1
    50d4:	9c 8b       	std	Y+20, r25	; 0x14
    50d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50d8:	8b 89       	ldd	r24, Y+19	; 0x13
    50da:	9c 89       	ldd	r25, Y+20	; 0x14
    50dc:	00 97       	sbiw	r24, 0x00	; 0
    50de:	69 f7       	brne	.-38     	; 0x50ba <blinkRedLED+0xbc>
    50e0:	14 c0       	rjmp	.+40     	; 0x510a <blinkRedLED+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50e2:	6d 89       	ldd	r22, Y+21	; 0x15
    50e4:	7e 89       	ldd	r23, Y+22	; 0x16
    50e6:	8f 89       	ldd	r24, Y+23	; 0x17
    50e8:	98 8d       	ldd	r25, Y+24	; 0x18
    50ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50ee:	dc 01       	movw	r26, r24
    50f0:	cb 01       	movw	r24, r22
    50f2:	9c 8b       	std	Y+20, r25	; 0x14
    50f4:	8b 8b       	std	Y+19, r24	; 0x13
    50f6:	8b 89       	ldd	r24, Y+19	; 0x13
    50f8:	9c 89       	ldd	r25, Y+20	; 0x14
    50fa:	98 8b       	std	Y+16, r25	; 0x10
    50fc:	8f 87       	std	Y+15, r24	; 0x0f
    50fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    5100:	98 89       	ldd	r25, Y+16	; 0x10
    5102:	01 97       	sbiw	r24, 0x01	; 1
    5104:	f1 f7       	brne	.-4      	; 0x5102 <blinkRedLED+0x104>
    5106:	98 8b       	std	Y+16, r25	; 0x10
    5108:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		LED_voidOff(redLED);
    510a:	60 91 db 01 	lds	r22, 0x01DB
    510e:	70 91 dc 01 	lds	r23, 0x01DC
    5112:	80 91 dd 01 	lds	r24, 0x01DD
    5116:	0e 94 a0 14 	call	0x2940	; 0x2940 <LED_voidOff>
    511a:	80 e0       	ldi	r24, 0x00	; 0
    511c:	90 e0       	ldi	r25, 0x00	; 0
    511e:	aa ef       	ldi	r26, 0xFA	; 250
    5120:	b3 e4       	ldi	r27, 0x43	; 67
    5122:	8b 87       	std	Y+11, r24	; 0x0b
    5124:	9c 87       	std	Y+12, r25	; 0x0c
    5126:	ad 87       	std	Y+13, r26	; 0x0d
    5128:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    512a:	6b 85       	ldd	r22, Y+11	; 0x0b
    512c:	7c 85       	ldd	r23, Y+12	; 0x0c
    512e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5130:	9e 85       	ldd	r25, Y+14	; 0x0e
    5132:	20 e0       	ldi	r18, 0x00	; 0
    5134:	30 e0       	ldi	r19, 0x00	; 0
    5136:	4a e7       	ldi	r20, 0x7A	; 122
    5138:	55 e4       	ldi	r21, 0x45	; 69
    513a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    513e:	dc 01       	movw	r26, r24
    5140:	cb 01       	movw	r24, r22
    5142:	8f 83       	std	Y+7, r24	; 0x07
    5144:	98 87       	std	Y+8, r25	; 0x08
    5146:	a9 87       	std	Y+9, r26	; 0x09
    5148:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    514a:	6f 81       	ldd	r22, Y+7	; 0x07
    514c:	78 85       	ldd	r23, Y+8	; 0x08
    514e:	89 85       	ldd	r24, Y+9	; 0x09
    5150:	9a 85       	ldd	r25, Y+10	; 0x0a
    5152:	20 e0       	ldi	r18, 0x00	; 0
    5154:	30 e0       	ldi	r19, 0x00	; 0
    5156:	40 e8       	ldi	r20, 0x80	; 128
    5158:	5f e3       	ldi	r21, 0x3F	; 63
    515a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    515e:	88 23       	and	r24, r24
    5160:	2c f4       	brge	.+10     	; 0x516c <blinkRedLED+0x16e>
		__ticks = 1;
    5162:	81 e0       	ldi	r24, 0x01	; 1
    5164:	90 e0       	ldi	r25, 0x00	; 0
    5166:	9e 83       	std	Y+6, r25	; 0x06
    5168:	8d 83       	std	Y+5, r24	; 0x05
    516a:	3f c0       	rjmp	.+126    	; 0x51ea <blinkRedLED+0x1ec>
	else if (__tmp > 65535)
    516c:	6f 81       	ldd	r22, Y+7	; 0x07
    516e:	78 85       	ldd	r23, Y+8	; 0x08
    5170:	89 85       	ldd	r24, Y+9	; 0x09
    5172:	9a 85       	ldd	r25, Y+10	; 0x0a
    5174:	20 e0       	ldi	r18, 0x00	; 0
    5176:	3f ef       	ldi	r19, 0xFF	; 255
    5178:	4f e7       	ldi	r20, 0x7F	; 127
    517a:	57 e4       	ldi	r21, 0x47	; 71
    517c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5180:	18 16       	cp	r1, r24
    5182:	4c f5       	brge	.+82     	; 0x51d6 <blinkRedLED+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5184:	6b 85       	ldd	r22, Y+11	; 0x0b
    5186:	7c 85       	ldd	r23, Y+12	; 0x0c
    5188:	8d 85       	ldd	r24, Y+13	; 0x0d
    518a:	9e 85       	ldd	r25, Y+14	; 0x0e
    518c:	20 e0       	ldi	r18, 0x00	; 0
    518e:	30 e0       	ldi	r19, 0x00	; 0
    5190:	40 e2       	ldi	r20, 0x20	; 32
    5192:	51 e4       	ldi	r21, 0x41	; 65
    5194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5198:	dc 01       	movw	r26, r24
    519a:	cb 01       	movw	r24, r22
    519c:	bc 01       	movw	r22, r24
    519e:	cd 01       	movw	r24, r26
    51a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51a4:	dc 01       	movw	r26, r24
    51a6:	cb 01       	movw	r24, r22
    51a8:	9e 83       	std	Y+6, r25	; 0x06
    51aa:	8d 83       	std	Y+5, r24	; 0x05
    51ac:	0f c0       	rjmp	.+30     	; 0x51cc <blinkRedLED+0x1ce>
    51ae:	80 e9       	ldi	r24, 0x90	; 144
    51b0:	91 e0       	ldi	r25, 0x01	; 1
    51b2:	9c 83       	std	Y+4, r25	; 0x04
    51b4:	8b 83       	std	Y+3, r24	; 0x03
    51b6:	8b 81       	ldd	r24, Y+3	; 0x03
    51b8:	9c 81       	ldd	r25, Y+4	; 0x04
    51ba:	01 97       	sbiw	r24, 0x01	; 1
    51bc:	f1 f7       	brne	.-4      	; 0x51ba <blinkRedLED+0x1bc>
    51be:	9c 83       	std	Y+4, r25	; 0x04
    51c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51c2:	8d 81       	ldd	r24, Y+5	; 0x05
    51c4:	9e 81       	ldd	r25, Y+6	; 0x06
    51c6:	01 97       	sbiw	r24, 0x01	; 1
    51c8:	9e 83       	std	Y+6, r25	; 0x06
    51ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51cc:	8d 81       	ldd	r24, Y+5	; 0x05
    51ce:	9e 81       	ldd	r25, Y+6	; 0x06
    51d0:	00 97       	sbiw	r24, 0x00	; 0
    51d2:	69 f7       	brne	.-38     	; 0x51ae <blinkRedLED+0x1b0>
    51d4:	14 c0       	rjmp	.+40     	; 0x51fe <blinkRedLED+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51d6:	6f 81       	ldd	r22, Y+7	; 0x07
    51d8:	78 85       	ldd	r23, Y+8	; 0x08
    51da:	89 85       	ldd	r24, Y+9	; 0x09
    51dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    51de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51e2:	dc 01       	movw	r26, r24
    51e4:	cb 01       	movw	r24, r22
    51e6:	9e 83       	std	Y+6, r25	; 0x06
    51e8:	8d 83       	std	Y+5, r24	; 0x05
    51ea:	8d 81       	ldd	r24, Y+5	; 0x05
    51ec:	9e 81       	ldd	r25, Y+6	; 0x06
    51ee:	9a 83       	std	Y+2, r25	; 0x02
    51f0:	89 83       	std	Y+1, r24	; 0x01
    51f2:	89 81       	ldd	r24, Y+1	; 0x01
    51f4:	9a 81       	ldd	r25, Y+2	; 0x02
    51f6:	01 97       	sbiw	r24, 0x01	; 1
    51f8:	f1 f7       	brne	.-4      	; 0x51f6 <blinkRedLED+0x1f8>
    51fa:	9a 83       	std	Y+2, r25	; 0x02
    51fc:	89 83       	std	Y+1, r24	; 0x01
void closeDoor(void) {
	// Example function to simulate closing a door using a stepper motor
	STEPPER_voidOff();
}
void blinkRedLED(void) {
	for (u8 i = 0; i < 10; i++) { // Blink for approximately 5 seconds
    51fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5200:	8f 5f       	subi	r24, 0xFF	; 255
    5202:	8d 8f       	std	Y+29, r24	; 0x1d
    5204:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5206:	8a 30       	cpi	r24, 0x0A	; 10
    5208:	08 f4       	brcc	.+2      	; 0x520c <blinkRedLED+0x20e>
    520a:	05 cf       	rjmp	.-502    	; 0x5016 <blinkRedLED+0x18>
		LED_voidOn(redLED);
		_delay_ms(500);
		LED_voidOff(redLED);
		_delay_ms(500);
	}
}
    520c:	6d 96       	adiw	r28, 0x1d	; 29
    520e:	0f b6       	in	r0, 0x3f	; 63
    5210:	f8 94       	cli
    5212:	de bf       	out	0x3e, r29	; 62
    5214:	0f be       	out	0x3f, r0	; 63
    5216:	cd bf       	out	0x3d, r28	; 61
    5218:	cf 91       	pop	r28
    521a:	df 91       	pop	r29
    521c:	08 95       	ret

0000521e <handlePassword>:
void handlePassword(void) {
    521e:	df 93       	push	r29
    5220:	cf 93       	push	r28
    5222:	cd b7       	in	r28, 0x3d	; 61
    5224:	de b7       	in	r29, 0x3e	; 62
    5226:	e0 97       	sbiw	r28, 0x30	; 48
    5228:	0f b6       	in	r0, 0x3f	; 63
    522a:	f8 94       	cli
    522c:	de bf       	out	0x3e, r29	; 62
    522e:	0f be       	out	0x3f, r0	; 63
    5230:	cd bf       	out	0x3d, r28	; 61
	char enteredPassword[3]; // To store the entered password (2 digits + null terminator)
	u8 i = 0;
    5232:	1d a6       	std	Y+45, r1	; 0x2d
	u8 key;

	// Initialize
	u8 attemptCount = 0;
    5234:	1b a6       	std	Y+43, r1	; 0x2b
	CLCD_voidClearScreen();
    5236:	0e 94 3d 13 	call	0x267a	; 0x267a <CLCD_voidClearScreen>
    523a:	ee c1       	rjmp	.+988    	; 0x5618 <handlePassword+0x3fa>

	while (attemptCount < MAX_ATTEMPTS) {
		CLCD_voidSendString("Enter Password:");
    523c:	81 e7       	ldi	r24, 0x71	; 113
    523e:	90 e0       	ldi	r25, 0x00	; 0
    5240:	0e 94 3e 12 	call	0x247c	; 0x247c <CLCD_voidSendString>

		// Clear previous input
		for (i = 0; i < 2; i++) {
    5244:	1d a6       	std	Y+45, r1	; 0x2d
    5246:	0c c0       	rjmp	.+24     	; 0x5260 <handlePassword+0x42>
			enteredPassword[i] = 0;
    5248:	8d a5       	ldd	r24, Y+45	; 0x2d
    524a:	28 2f       	mov	r18, r24
    524c:	30 e0       	ldi	r19, 0x00	; 0
    524e:	ce 01       	movw	r24, r28
    5250:	8e 96       	adiw	r24, 0x2e	; 46
    5252:	fc 01       	movw	r30, r24
    5254:	e2 0f       	add	r30, r18
    5256:	f3 1f       	adc	r31, r19
    5258:	10 82       	st	Z, r1

	while (attemptCount < MAX_ATTEMPTS) {
		CLCD_voidSendString("Enter Password:");

		// Clear previous input
		for (i = 0; i < 2; i++) {
    525a:	8d a5       	ldd	r24, Y+45	; 0x2d
    525c:	8f 5f       	subi	r24, 0xFF	; 255
    525e:	8d a7       	std	Y+45, r24	; 0x2d
    5260:	8d a5       	ldd	r24, Y+45	; 0x2d
    5262:	82 30       	cpi	r24, 0x02	; 2
    5264:	88 f3       	brcs	.-30     	; 0x5248 <handlePassword+0x2a>
			enteredPassword[i] = 0;
		}

		// Get input from keypad
		for (i = 0; i < 2; i++) {
    5266:	1d a6       	std	Y+45, r1	; 0x2d
    5268:	93 c0       	rjmp	.+294    	; 0x5390 <handlePassword+0x172>
			do
			{
				key = KPD_u8GetPressedKey();
    526a:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <KPD_u8GetPressedKey>
    526e:	8c a7       	std	Y+44, r24	; 0x2c
			}while(key == 0xff);
    5270:	8c a5       	ldd	r24, Y+44	; 0x2c
    5272:	8f 3f       	cpi	r24, 0xFF	; 255
    5274:	d1 f3       	breq	.-12     	; 0x526a <handlePassword+0x4c>

			if (key != KPD_NO_PRESSED_KEY) {
    5276:	8c a5       	ldd	r24, Y+44	; 0x2c
    5278:	8f 3f       	cpi	r24, 0xFF	; 255
    527a:	09 f4       	brne	.+2      	; 0x527e <handlePassword+0x60>
    527c:	86 c0       	rjmp	.+268    	; 0x538a <handlePassword+0x16c>
				enteredPassword[i] = key;
    527e:	8d a5       	ldd	r24, Y+45	; 0x2d
    5280:	28 2f       	mov	r18, r24
    5282:	30 e0       	ldi	r19, 0x00	; 0
    5284:	ce 01       	movw	r24, r28
    5286:	8e 96       	adiw	r24, 0x2e	; 46
    5288:	fc 01       	movw	r30, r24
    528a:	e2 0f       	add	r30, r18
    528c:	f3 1f       	adc	r31, r19
    528e:	8c a5       	ldd	r24, Y+44	; 0x2c
    5290:	80 83       	st	Z, r24
				if(i == 0)
    5292:	8d a5       	ldd	r24, Y+45	; 0x2d
    5294:	88 23       	and	r24, r24
    5296:	21 f4       	brne	.+8      	; 0x52a0 <handlePassword+0x82>
				{
					CLCD_voidGoToXY(1,0);
    5298:	81 e0       	ldi	r24, 0x01	; 1
    529a:	60 e0       	ldi	r22, 0x00	; 0
    529c:	0e 94 68 12 	call	0x24d0	; 0x24d0 <CLCD_voidGoToXY>
				}
				CLCD_voidSendData(key);
    52a0:	8c a5       	ldd	r24, Y+44	; 0x2c
    52a2:	0e 94 07 11 	call	0x220e	; 0x220e <CLCD_voidSendData>
    52a6:	80 e0       	ldi	r24, 0x00	; 0
    52a8:	90 e0       	ldi	r25, 0x00	; 0
    52aa:	a8 e4       	ldi	r26, 0x48	; 72
    52ac:	b3 e4       	ldi	r27, 0x43	; 67
    52ae:	8f a3       	std	Y+39, r24	; 0x27
    52b0:	98 a7       	std	Y+40, r25	; 0x28
    52b2:	a9 a7       	std	Y+41, r26	; 0x29
    52b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52b6:	6f a1       	ldd	r22, Y+39	; 0x27
    52b8:	78 a5       	ldd	r23, Y+40	; 0x28
    52ba:	89 a5       	ldd	r24, Y+41	; 0x29
    52bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    52be:	20 e0       	ldi	r18, 0x00	; 0
    52c0:	30 e0       	ldi	r19, 0x00	; 0
    52c2:	4a e7       	ldi	r20, 0x7A	; 122
    52c4:	55 e4       	ldi	r21, 0x45	; 69
    52c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52ca:	dc 01       	movw	r26, r24
    52cc:	cb 01       	movw	r24, r22
    52ce:	8b a3       	std	Y+35, r24	; 0x23
    52d0:	9c a3       	std	Y+36, r25	; 0x24
    52d2:	ad a3       	std	Y+37, r26	; 0x25
    52d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    52d6:	6b a1       	ldd	r22, Y+35	; 0x23
    52d8:	7c a1       	ldd	r23, Y+36	; 0x24
    52da:	8d a1       	ldd	r24, Y+37	; 0x25
    52dc:	9e a1       	ldd	r25, Y+38	; 0x26
    52de:	20 e0       	ldi	r18, 0x00	; 0
    52e0:	30 e0       	ldi	r19, 0x00	; 0
    52e2:	40 e8       	ldi	r20, 0x80	; 128
    52e4:	5f e3       	ldi	r21, 0x3F	; 63
    52e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    52ea:	88 23       	and	r24, r24
    52ec:	2c f4       	brge	.+10     	; 0x52f8 <handlePassword+0xda>
		__ticks = 1;
    52ee:	81 e0       	ldi	r24, 0x01	; 1
    52f0:	90 e0       	ldi	r25, 0x00	; 0
    52f2:	9a a3       	std	Y+34, r25	; 0x22
    52f4:	89 a3       	std	Y+33, r24	; 0x21
    52f6:	3f c0       	rjmp	.+126    	; 0x5376 <handlePassword+0x158>
	else if (__tmp > 65535)
    52f8:	6b a1       	ldd	r22, Y+35	; 0x23
    52fa:	7c a1       	ldd	r23, Y+36	; 0x24
    52fc:	8d a1       	ldd	r24, Y+37	; 0x25
    52fe:	9e a1       	ldd	r25, Y+38	; 0x26
    5300:	20 e0       	ldi	r18, 0x00	; 0
    5302:	3f ef       	ldi	r19, 0xFF	; 255
    5304:	4f e7       	ldi	r20, 0x7F	; 127
    5306:	57 e4       	ldi	r21, 0x47	; 71
    5308:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    530c:	18 16       	cp	r1, r24
    530e:	4c f5       	brge	.+82     	; 0x5362 <handlePassword+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5310:	6f a1       	ldd	r22, Y+39	; 0x27
    5312:	78 a5       	ldd	r23, Y+40	; 0x28
    5314:	89 a5       	ldd	r24, Y+41	; 0x29
    5316:	9a a5       	ldd	r25, Y+42	; 0x2a
    5318:	20 e0       	ldi	r18, 0x00	; 0
    531a:	30 e0       	ldi	r19, 0x00	; 0
    531c:	40 e2       	ldi	r20, 0x20	; 32
    531e:	51 e4       	ldi	r21, 0x41	; 65
    5320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5324:	dc 01       	movw	r26, r24
    5326:	cb 01       	movw	r24, r22
    5328:	bc 01       	movw	r22, r24
    532a:	cd 01       	movw	r24, r26
    532c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5330:	dc 01       	movw	r26, r24
    5332:	cb 01       	movw	r24, r22
    5334:	9a a3       	std	Y+34, r25	; 0x22
    5336:	89 a3       	std	Y+33, r24	; 0x21
    5338:	0f c0       	rjmp	.+30     	; 0x5358 <handlePassword+0x13a>
    533a:	80 e9       	ldi	r24, 0x90	; 144
    533c:	91 e0       	ldi	r25, 0x01	; 1
    533e:	98 a3       	std	Y+32, r25	; 0x20
    5340:	8f 8f       	std	Y+31, r24	; 0x1f
    5342:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5344:	98 a1       	ldd	r25, Y+32	; 0x20
    5346:	01 97       	sbiw	r24, 0x01	; 1
    5348:	f1 f7       	brne	.-4      	; 0x5346 <handlePassword+0x128>
    534a:	98 a3       	std	Y+32, r25	; 0x20
    534c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    534e:	89 a1       	ldd	r24, Y+33	; 0x21
    5350:	9a a1       	ldd	r25, Y+34	; 0x22
    5352:	01 97       	sbiw	r24, 0x01	; 1
    5354:	9a a3       	std	Y+34, r25	; 0x22
    5356:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5358:	89 a1       	ldd	r24, Y+33	; 0x21
    535a:	9a a1       	ldd	r25, Y+34	; 0x22
    535c:	00 97       	sbiw	r24, 0x00	; 0
    535e:	69 f7       	brne	.-38     	; 0x533a <handlePassword+0x11c>
    5360:	14 c0       	rjmp	.+40     	; 0x538a <handlePassword+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5362:	6b a1       	ldd	r22, Y+35	; 0x23
    5364:	7c a1       	ldd	r23, Y+36	; 0x24
    5366:	8d a1       	ldd	r24, Y+37	; 0x25
    5368:	9e a1       	ldd	r25, Y+38	; 0x26
    536a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    536e:	dc 01       	movw	r26, r24
    5370:	cb 01       	movw	r24, r22
    5372:	9a a3       	std	Y+34, r25	; 0x22
    5374:	89 a3       	std	Y+33, r24	; 0x21
    5376:	89 a1       	ldd	r24, Y+33	; 0x21
    5378:	9a a1       	ldd	r25, Y+34	; 0x22
    537a:	9e 8f       	std	Y+30, r25	; 0x1e
    537c:	8d 8f       	std	Y+29, r24	; 0x1d
    537e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5380:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5382:	01 97       	sbiw	r24, 0x01	; 1
    5384:	f1 f7       	brne	.-4      	; 0x5382 <handlePassword+0x164>
    5386:	9e 8f       	std	Y+30, r25	; 0x1e
    5388:	8d 8f       	std	Y+29, r24	; 0x1d
		for (i = 0; i < 2; i++) {
			enteredPassword[i] = 0;
		}

		// Get input from keypad
		for (i = 0; i < 2; i++) {
    538a:	8d a5       	ldd	r24, Y+45	; 0x2d
    538c:	8f 5f       	subi	r24, 0xFF	; 255
    538e:	8d a7       	std	Y+45, r24	; 0x2d
    5390:	8d a5       	ldd	r24, Y+45	; 0x2d
    5392:	82 30       	cpi	r24, 0x02	; 2
    5394:	08 f4       	brcc	.+2      	; 0x5398 <handlePassword+0x17a>
    5396:	69 cf       	rjmp	.-302    	; 0x526a <handlePassword+0x4c>
				}
				CLCD_voidSendData(key);
				_delay_ms(200);
			}
		}
		enteredPassword[2] = '\0';  // Null-terminate the entered password
    5398:	18 aa       	std	Y+48, r1	; 0x30
		// Check password
		if (strcmp(enteredPassword, PASSWORD) == 0) {
    539a:	ce 01       	movw	r24, r28
    539c:	8e 96       	adiw	r24, 0x2e	; 46
    539e:	21 e8       	ldi	r18, 0x81	; 129
    53a0:	30 e0       	ldi	r19, 0x00	; 0
    53a2:	b9 01       	movw	r22, r18
    53a4:	0e 94 5c 2e 	call	0x5cb8	; 0x5cb8 <strcmp>
    53a8:	00 97       	sbiw	r24, 0x00	; 0
    53aa:	09 f0       	breq	.+2      	; 0x53ae <handlePassword+0x190>
    53ac:	8f c0       	rjmp	.+286    	; 0x54cc <handlePassword+0x2ae>
			CLCD_voidClearScreen();
    53ae:	0e 94 3d 13 	call	0x267a	; 0x267a <CLCD_voidClearScreen>
			CLCD_voidSendString("Welcome Home");
    53b2:	84 e8       	ldi	r24, 0x84	; 132
    53b4:	90 e0       	ldi	r25, 0x00	; 0
    53b6:	0e 94 3e 12 	call	0x247c	; 0x247c <CLCD_voidSendString>
			LED_voidOn(greenLED);
    53ba:	60 91 de 01 	lds	r22, 0x01DE
    53be:	70 91 df 01 	lds	r23, 0x01DF
    53c2:	80 91 e0 01 	lds	r24, 0x01E0
    53c6:	0e 94 7e 14 	call	0x28fc	; 0x28fc <LED_voidOn>
			openDoor();
    53ca:	0e 94 eb 27 	call	0x4fd6	; 0x4fd6 <openDoor>
    53ce:	80 e0       	ldi	r24, 0x00	; 0
    53d0:	90 e8       	ldi	r25, 0x80	; 128
    53d2:	ab e3       	ldi	r26, 0x3B	; 59
    53d4:	b5 e4       	ldi	r27, 0x45	; 69
    53d6:	89 8f       	std	Y+25, r24	; 0x19
    53d8:	9a 8f       	std	Y+26, r25	; 0x1a
    53da:	ab 8f       	std	Y+27, r26	; 0x1b
    53dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53de:	69 8d       	ldd	r22, Y+25	; 0x19
    53e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    53e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    53e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    53e6:	20 e0       	ldi	r18, 0x00	; 0
    53e8:	30 e0       	ldi	r19, 0x00	; 0
    53ea:	4a e7       	ldi	r20, 0x7A	; 122
    53ec:	55 e4       	ldi	r21, 0x45	; 69
    53ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53f2:	dc 01       	movw	r26, r24
    53f4:	cb 01       	movw	r24, r22
    53f6:	8d 8b       	std	Y+21, r24	; 0x15
    53f8:	9e 8b       	std	Y+22, r25	; 0x16
    53fa:	af 8b       	std	Y+23, r26	; 0x17
    53fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    53fe:	6d 89       	ldd	r22, Y+21	; 0x15
    5400:	7e 89       	ldd	r23, Y+22	; 0x16
    5402:	8f 89       	ldd	r24, Y+23	; 0x17
    5404:	98 8d       	ldd	r25, Y+24	; 0x18
    5406:	20 e0       	ldi	r18, 0x00	; 0
    5408:	30 e0       	ldi	r19, 0x00	; 0
    540a:	40 e8       	ldi	r20, 0x80	; 128
    540c:	5f e3       	ldi	r21, 0x3F	; 63
    540e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5412:	88 23       	and	r24, r24
    5414:	2c f4       	brge	.+10     	; 0x5420 <handlePassword+0x202>
		__ticks = 1;
    5416:	81 e0       	ldi	r24, 0x01	; 1
    5418:	90 e0       	ldi	r25, 0x00	; 0
    541a:	9c 8b       	std	Y+20, r25	; 0x14
    541c:	8b 8b       	std	Y+19, r24	; 0x13
    541e:	3f c0       	rjmp	.+126    	; 0x549e <handlePassword+0x280>
	else if (__tmp > 65535)
    5420:	6d 89       	ldd	r22, Y+21	; 0x15
    5422:	7e 89       	ldd	r23, Y+22	; 0x16
    5424:	8f 89       	ldd	r24, Y+23	; 0x17
    5426:	98 8d       	ldd	r25, Y+24	; 0x18
    5428:	20 e0       	ldi	r18, 0x00	; 0
    542a:	3f ef       	ldi	r19, 0xFF	; 255
    542c:	4f e7       	ldi	r20, 0x7F	; 127
    542e:	57 e4       	ldi	r21, 0x47	; 71
    5430:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5434:	18 16       	cp	r1, r24
    5436:	4c f5       	brge	.+82     	; 0x548a <handlePassword+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5438:	69 8d       	ldd	r22, Y+25	; 0x19
    543a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    543c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    543e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5440:	20 e0       	ldi	r18, 0x00	; 0
    5442:	30 e0       	ldi	r19, 0x00	; 0
    5444:	40 e2       	ldi	r20, 0x20	; 32
    5446:	51 e4       	ldi	r21, 0x41	; 65
    5448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    544c:	dc 01       	movw	r26, r24
    544e:	cb 01       	movw	r24, r22
    5450:	bc 01       	movw	r22, r24
    5452:	cd 01       	movw	r24, r26
    5454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5458:	dc 01       	movw	r26, r24
    545a:	cb 01       	movw	r24, r22
    545c:	9c 8b       	std	Y+20, r25	; 0x14
    545e:	8b 8b       	std	Y+19, r24	; 0x13
    5460:	0f c0       	rjmp	.+30     	; 0x5480 <handlePassword+0x262>
    5462:	80 e9       	ldi	r24, 0x90	; 144
    5464:	91 e0       	ldi	r25, 0x01	; 1
    5466:	9a 8b       	std	Y+18, r25	; 0x12
    5468:	89 8b       	std	Y+17, r24	; 0x11
    546a:	89 89       	ldd	r24, Y+17	; 0x11
    546c:	9a 89       	ldd	r25, Y+18	; 0x12
    546e:	01 97       	sbiw	r24, 0x01	; 1
    5470:	f1 f7       	brne	.-4      	; 0x546e <handlePassword+0x250>
    5472:	9a 8b       	std	Y+18, r25	; 0x12
    5474:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5476:	8b 89       	ldd	r24, Y+19	; 0x13
    5478:	9c 89       	ldd	r25, Y+20	; 0x14
    547a:	01 97       	sbiw	r24, 0x01	; 1
    547c:	9c 8b       	std	Y+20, r25	; 0x14
    547e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5480:	8b 89       	ldd	r24, Y+19	; 0x13
    5482:	9c 89       	ldd	r25, Y+20	; 0x14
    5484:	00 97       	sbiw	r24, 0x00	; 0
    5486:	69 f7       	brne	.-38     	; 0x5462 <handlePassword+0x244>
    5488:	14 c0       	rjmp	.+40     	; 0x54b2 <handlePassword+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    548a:	6d 89       	ldd	r22, Y+21	; 0x15
    548c:	7e 89       	ldd	r23, Y+22	; 0x16
    548e:	8f 89       	ldd	r24, Y+23	; 0x17
    5490:	98 8d       	ldd	r25, Y+24	; 0x18
    5492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5496:	dc 01       	movw	r26, r24
    5498:	cb 01       	movw	r24, r22
    549a:	9c 8b       	std	Y+20, r25	; 0x14
    549c:	8b 8b       	std	Y+19, r24	; 0x13
    549e:	8b 89       	ldd	r24, Y+19	; 0x13
    54a0:	9c 89       	ldd	r25, Y+20	; 0x14
    54a2:	98 8b       	std	Y+16, r25	; 0x10
    54a4:	8f 87       	std	Y+15, r24	; 0x0f
    54a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    54a8:	98 89       	ldd	r25, Y+16	; 0x10
    54aa:	01 97       	sbiw	r24, 0x01	; 1
    54ac:	f1 f7       	brne	.-4      	; 0x54aa <handlePassword+0x28c>
    54ae:	98 8b       	std	Y+16, r25	; 0x10
    54b0:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(3000); // Door open time
			closeDoor();
    54b2:	0e 94 f6 27 	call	0x4fec	; 0x4fec <closeDoor>
			LED_voidOff(greenLED);
    54b6:	60 91 de 01 	lds	r22, 0x01DE
    54ba:	70 91 df 01 	lds	r23, 0x01DF
    54be:	80 91 e0 01 	lds	r24, 0x01E0
    54c2:	0e 94 a0 14 	call	0x2940	; 0x2940 <LED_voidOff>
			CLCD_voidClearScreen();
    54c6:	0e 94 3d 13 	call	0x267a	; 0x267a <CLCD_voidClearScreen>
    54ca:	aa c0       	rjmp	.+340    	; 0x5620 <handlePassword+0x402>
			return; // Exit after successful entry
		} else {
			CLCD_voidClearScreen();
    54cc:	0e 94 3d 13 	call	0x267a	; 0x267a <CLCD_voidClearScreen>
			CLCD_voidSendString("Wrong Password");
    54d0:	81 e9       	ldi	r24, 0x91	; 145
    54d2:	90 e0       	ldi	r25, 0x00	; 0
    54d4:	0e 94 3e 12 	call	0x247c	; 0x247c <CLCD_voidSendString>
			LED_voidOn(redLED);
    54d8:	60 91 db 01 	lds	r22, 0x01DB
    54dc:	70 91 dc 01 	lds	r23, 0x01DC
    54e0:	80 91 dd 01 	lds	r24, 0x01DD
    54e4:	0e 94 7e 14 	call	0x28fc	; 0x28fc <LED_voidOn>
    54e8:	80 e0       	ldi	r24, 0x00	; 0
    54ea:	90 e0       	ldi	r25, 0x00	; 0
    54ec:	aa e7       	ldi	r26, 0x7A	; 122
    54ee:	b4 e4       	ldi	r27, 0x44	; 68
    54f0:	8b 87       	std	Y+11, r24	; 0x0b
    54f2:	9c 87       	std	Y+12, r25	; 0x0c
    54f4:	ad 87       	std	Y+13, r26	; 0x0d
    54f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    54fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    54fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    54fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    5500:	20 e0       	ldi	r18, 0x00	; 0
    5502:	30 e0       	ldi	r19, 0x00	; 0
    5504:	4a e7       	ldi	r20, 0x7A	; 122
    5506:	55 e4       	ldi	r21, 0x45	; 69
    5508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    550c:	dc 01       	movw	r26, r24
    550e:	cb 01       	movw	r24, r22
    5510:	8f 83       	std	Y+7, r24	; 0x07
    5512:	98 87       	std	Y+8, r25	; 0x08
    5514:	a9 87       	std	Y+9, r26	; 0x09
    5516:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5518:	6f 81       	ldd	r22, Y+7	; 0x07
    551a:	78 85       	ldd	r23, Y+8	; 0x08
    551c:	89 85       	ldd	r24, Y+9	; 0x09
    551e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5520:	20 e0       	ldi	r18, 0x00	; 0
    5522:	30 e0       	ldi	r19, 0x00	; 0
    5524:	40 e8       	ldi	r20, 0x80	; 128
    5526:	5f e3       	ldi	r21, 0x3F	; 63
    5528:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    552c:	88 23       	and	r24, r24
    552e:	2c f4       	brge	.+10     	; 0x553a <handlePassword+0x31c>
		__ticks = 1;
    5530:	81 e0       	ldi	r24, 0x01	; 1
    5532:	90 e0       	ldi	r25, 0x00	; 0
    5534:	9e 83       	std	Y+6, r25	; 0x06
    5536:	8d 83       	std	Y+5, r24	; 0x05
    5538:	3f c0       	rjmp	.+126    	; 0x55b8 <handlePassword+0x39a>
	else if (__tmp > 65535)
    553a:	6f 81       	ldd	r22, Y+7	; 0x07
    553c:	78 85       	ldd	r23, Y+8	; 0x08
    553e:	89 85       	ldd	r24, Y+9	; 0x09
    5540:	9a 85       	ldd	r25, Y+10	; 0x0a
    5542:	20 e0       	ldi	r18, 0x00	; 0
    5544:	3f ef       	ldi	r19, 0xFF	; 255
    5546:	4f e7       	ldi	r20, 0x7F	; 127
    5548:	57 e4       	ldi	r21, 0x47	; 71
    554a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    554e:	18 16       	cp	r1, r24
    5550:	4c f5       	brge	.+82     	; 0x55a4 <handlePassword+0x386>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5552:	6b 85       	ldd	r22, Y+11	; 0x0b
    5554:	7c 85       	ldd	r23, Y+12	; 0x0c
    5556:	8d 85       	ldd	r24, Y+13	; 0x0d
    5558:	9e 85       	ldd	r25, Y+14	; 0x0e
    555a:	20 e0       	ldi	r18, 0x00	; 0
    555c:	30 e0       	ldi	r19, 0x00	; 0
    555e:	40 e2       	ldi	r20, 0x20	; 32
    5560:	51 e4       	ldi	r21, 0x41	; 65
    5562:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5566:	dc 01       	movw	r26, r24
    5568:	cb 01       	movw	r24, r22
    556a:	bc 01       	movw	r22, r24
    556c:	cd 01       	movw	r24, r26
    556e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5572:	dc 01       	movw	r26, r24
    5574:	cb 01       	movw	r24, r22
    5576:	9e 83       	std	Y+6, r25	; 0x06
    5578:	8d 83       	std	Y+5, r24	; 0x05
    557a:	0f c0       	rjmp	.+30     	; 0x559a <handlePassword+0x37c>
    557c:	80 e9       	ldi	r24, 0x90	; 144
    557e:	91 e0       	ldi	r25, 0x01	; 1
    5580:	9c 83       	std	Y+4, r25	; 0x04
    5582:	8b 83       	std	Y+3, r24	; 0x03
    5584:	8b 81       	ldd	r24, Y+3	; 0x03
    5586:	9c 81       	ldd	r25, Y+4	; 0x04
    5588:	01 97       	sbiw	r24, 0x01	; 1
    558a:	f1 f7       	brne	.-4      	; 0x5588 <handlePassword+0x36a>
    558c:	9c 83       	std	Y+4, r25	; 0x04
    558e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5590:	8d 81       	ldd	r24, Y+5	; 0x05
    5592:	9e 81       	ldd	r25, Y+6	; 0x06
    5594:	01 97       	sbiw	r24, 0x01	; 1
    5596:	9e 83       	std	Y+6, r25	; 0x06
    5598:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    559a:	8d 81       	ldd	r24, Y+5	; 0x05
    559c:	9e 81       	ldd	r25, Y+6	; 0x06
    559e:	00 97       	sbiw	r24, 0x00	; 0
    55a0:	69 f7       	brne	.-38     	; 0x557c <handlePassword+0x35e>
    55a2:	14 c0       	rjmp	.+40     	; 0x55cc <handlePassword+0x3ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55a4:	6f 81       	ldd	r22, Y+7	; 0x07
    55a6:	78 85       	ldd	r23, Y+8	; 0x08
    55a8:	89 85       	ldd	r24, Y+9	; 0x09
    55aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    55ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55b0:	dc 01       	movw	r26, r24
    55b2:	cb 01       	movw	r24, r22
    55b4:	9e 83       	std	Y+6, r25	; 0x06
    55b6:	8d 83       	std	Y+5, r24	; 0x05
    55b8:	8d 81       	ldd	r24, Y+5	; 0x05
    55ba:	9e 81       	ldd	r25, Y+6	; 0x06
    55bc:	9a 83       	std	Y+2, r25	; 0x02
    55be:	89 83       	std	Y+1, r24	; 0x01
    55c0:	89 81       	ldd	r24, Y+1	; 0x01
    55c2:	9a 81       	ldd	r25, Y+2	; 0x02
    55c4:	01 97       	sbiw	r24, 0x01	; 1
    55c6:	f1 f7       	brne	.-4      	; 0x55c4 <handlePassword+0x3a6>
    55c8:	9a 83       	std	Y+2, r25	; 0x02
    55ca:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000); // LED on for a short time
			LED_voidOff(redLED);
    55cc:	60 91 db 01 	lds	r22, 0x01DB
    55d0:	70 91 dc 01 	lds	r23, 0x01DC
    55d4:	80 91 dd 01 	lds	r24, 0x01DD
    55d8:	0e 94 a0 14 	call	0x2940	; 0x2940 <LED_voidOff>
			attemptCount++;
    55dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    55de:	8f 5f       	subi	r24, 0xFF	; 255
    55e0:	8b a7       	std	Y+43, r24	; 0x2b
			CLCD_voidClearScreen();
    55e2:	0e 94 3d 13 	call	0x267a	; 0x267a <CLCD_voidClearScreen>
			if (attemptCount >= MAX_ATTEMPTS) {
    55e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    55e8:	83 30       	cpi	r24, 0x03	; 3
    55ea:	b0 f0       	brcs	.+44     	; 0x5618 <handlePassword+0x3fa>
				// Activate alarm
				CLCD_voidSendString("Too Many Attempts");
    55ec:	80 ea       	ldi	r24, 0xA0	; 160
    55ee:	90 e0       	ldi	r25, 0x00	; 0
    55f0:	0e 94 3e 12 	call	0x247c	; 0x247c <CLCD_voidSendString>
				BUZZER_voidOn(alarmBuzzer);
    55f4:	60 91 f0 01 	lds	r22, 0x01F0
    55f8:	70 91 f1 01 	lds	r23, 0x01F1
    55fc:	80 91 f2 01 	lds	r24, 0x01F2
    5600:	0e 94 0f 09 	call	0x121e	; 0x121e <BUZZER_voidOn>
				blinkRedLED();
    5604:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <blinkRedLED>
				BUZZER_voidOff(alarmBuzzer);
    5608:	60 91 f0 01 	lds	r22, 0x01F0
    560c:	70 91 f1 01 	lds	r23, 0x01F1
    5610:	80 91 f2 01 	lds	r24, 0x01F2
    5614:	0e 94 2e 09 	call	0x125c	; 0x125c <BUZZER_voidOff>

	// Initialize
	u8 attemptCount = 0;
	CLCD_voidClearScreen();

	while (attemptCount < MAX_ATTEMPTS) {
    5618:	8b a5       	ldd	r24, Y+43	; 0x2b
    561a:	83 30       	cpi	r24, 0x03	; 3
    561c:	08 f4       	brcc	.+2      	; 0x5620 <handlePassword+0x402>
    561e:	0e ce       	rjmp	.-996    	; 0x523c <handlePassword+0x1e>
				blinkRedLED();
				BUZZER_voidOff(alarmBuzzer);
			}
		}
	}
}
    5620:	e0 96       	adiw	r28, 0x30	; 48
    5622:	0f b6       	in	r0, 0x3f	; 63
    5624:	f8 94       	cli
    5626:	de bf       	out	0x3e, r29	; 62
    5628:	0f be       	out	0x3f, r0	; 63
    562a:	cd bf       	out	0x3d, r28	; 61
    562c:	cf 91       	pop	r28
    562e:	df 91       	pop	r29
    5630:	08 95       	ret

00005632 <main>:
u16 result[2] , Analog[2] = {0};
u8 attemptCount = 0 , Channels[2] = {4 , 5};
u8 Flag = 0u;

void main(void)
{
    5632:	df 93       	push	r29
    5634:	cf 93       	push	r28
    5636:	cd b7       	in	r28, 0x3d	; 61
    5638:	de b7       	in	r29, 0x3e	; 62
    563a:	2d 97       	sbiw	r28, 0x0d	; 13
    563c:	0f b6       	in	r0, 0x3f	; 63
    563e:	f8 94       	cli
    5640:	de bf       	out	0x3e, r29	; 62
    5642:	0f be       	out	0x3f, r0	; 63
    5644:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    5646:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <PORT_voidInit>
	CLCD_voidInit();
    564a:	0e 94 a5 11 	call	0x234a	; 0x234a <CLCD_voidInit>
	LED_voidInit(redLED);
    564e:	60 91 db 01 	lds	r22, 0x01DB
    5652:	70 91 dc 01 	lds	r23, 0x01DC
    5656:	80 91 dd 01 	lds	r24, 0x01DD
    565a:	0e 94 69 14 	call	0x28d2	; 0x28d2 <LED_voidInit>
	LED_voidInit(greenLED);
    565e:	60 91 de 01 	lds	r22, 0x01DE
    5662:	70 91 df 01 	lds	r23, 0x01DF
    5666:	80 91 e0 01 	lds	r24, 0x01E0
    566a:	0e 94 69 14 	call	0x28d2	; 0x28d2 <LED_voidInit>
	LED_voidInit(LED1);
    566e:	60 91 e1 01 	lds	r22, 0x01E1
    5672:	70 91 e2 01 	lds	r23, 0x01E2
    5676:	80 91 e3 01 	lds	r24, 0x01E3
    567a:	0e 94 69 14 	call	0x28d2	; 0x28d2 <LED_voidInit>
	LED_voidInit(LED2);
    567e:	60 91 e4 01 	lds	r22, 0x01E4
    5682:	70 91 e5 01 	lds	r23, 0x01E5
    5686:	80 91 e6 01 	lds	r24, 0x01E6
    568a:	0e 94 69 14 	call	0x28d2	; 0x28d2 <LED_voidInit>
	LED_voidInit(LED3);
    568e:	60 91 e7 01 	lds	r22, 0x01E7
    5692:	70 91 e8 01 	lds	r23, 0x01E8
    5696:	80 91 e9 01 	lds	r24, 0x01E9
    569a:	0e 94 69 14 	call	0x28d2	; 0x28d2 <LED_voidInit>
	LED_voidInit(LED4);
    569e:	60 91 ea 01 	lds	r22, 0x01EA
    56a2:	70 91 eb 01 	lds	r23, 0x01EB
    56a6:	80 91 ec 01 	lds	r24, 0x01EC
    56aa:	0e 94 69 14 	call	0x28d2	; 0x28d2 <LED_voidInit>
	LED_voidInit(LED5);
    56ae:	60 91 ed 01 	lds	r22, 0x01ED
    56b2:	70 91 ee 01 	lds	r23, 0x01EE
    56b6:	80 91 ef 01 	lds	r24, 0x01EF
    56ba:	0e 94 69 14 	call	0x28d2	; 0x28d2 <LED_voidInit>
	BUZZER_voidInit(alarmBuzzer);
    56be:	60 91 f0 01 	lds	r22, 0x01F0
    56c2:	70 91 f1 01 	lds	r23, 0x01F1
    56c6:	80 91 f2 01 	lds	r24, 0x01F2
    56ca:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <BUZZER_voidInit>
	STEPPER_voidInit();
    56ce:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <STEPPER_voidInit>
	ADC_voidInit ();
    56d2:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_voidInit>
	EXTI_voidInit();
    56d6:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <EXTI_voidInit>
	GIE_voidEnableGlobal();
    56da:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <GIE_voidEnableGlobal>
	BUZZER_voidInit(buzzer);
    56de:	60 91 f3 01 	lds	r22, 0x01F3
    56e2:	70 91 f4 01 	lds	r23, 0x01F4
    56e6:	80 91 f5 01 	lds	r24, 0x01F5
    56ea:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <BUZZER_voidInit>
			0b00011111,
			0b00011111,
			0b00001110,
			0b00000100,
			0b00000000
	};
    56ee:	ce 01       	movw	r24, r28
    56f0:	01 96       	adiw	r24, 0x01	; 1
    56f2:	9a 87       	std	Y+10, r25	; 0x0a
    56f4:	89 87       	std	Y+9, r24	; 0x09
    56f6:	ea ef       	ldi	r30, 0xFA	; 250
    56f8:	f1 e0       	ldi	r31, 0x01	; 1
    56fa:	fc 87       	std	Y+12, r31	; 0x0c
    56fc:	eb 87       	std	Y+11, r30	; 0x0b
    56fe:	f8 e0       	ldi	r31, 0x08	; 8
    5700:	fd 87       	std	Y+13, r31	; 0x0d
    5702:	eb 85       	ldd	r30, Y+11	; 0x0b
    5704:	fc 85       	ldd	r31, Y+12	; 0x0c
    5706:	00 80       	ld	r0, Z
    5708:	8b 85       	ldd	r24, Y+11	; 0x0b
    570a:	9c 85       	ldd	r25, Y+12	; 0x0c
    570c:	01 96       	adiw	r24, 0x01	; 1
    570e:	9c 87       	std	Y+12, r25	; 0x0c
    5710:	8b 87       	std	Y+11, r24	; 0x0b
    5712:	e9 85       	ldd	r30, Y+9	; 0x09
    5714:	fa 85       	ldd	r31, Y+10	; 0x0a
    5716:	00 82       	st	Z, r0
    5718:	89 85       	ldd	r24, Y+9	; 0x09
    571a:	9a 85       	ldd	r25, Y+10	; 0x0a
    571c:	01 96       	adiw	r24, 0x01	; 1
    571e:	9a 87       	std	Y+10, r25	; 0x0a
    5720:	89 87       	std	Y+9, r24	; 0x09
    5722:	9d 85       	ldd	r25, Y+13	; 0x0d
    5724:	91 50       	subi	r25, 0x01	; 1
    5726:	9d 87       	std	Y+13, r25	; 0x0d
    5728:	ed 85       	ldd	r30, Y+13	; 0x0d
    572a:	ee 23       	and	r30, r30
    572c:	51 f7       	brne	.-44     	; 0x5702 <main+0xd0>
	handlePassword();
    572e:	0e 94 0f 29 	call	0x521e	; 0x521e <handlePassword>
	while(1)
	{

		/*Start ADC conversion*/
		ADC_u8StartChainConvAsynch(NUM_OF_CHANNELS , Channels , result , GetNotification);
    5732:	28 ef       	ldi	r18, 0xF8	; 248
    5734:	31 e0       	ldi	r19, 0x01	; 1
    5736:	46 e1       	ldi	r20, 0x16	; 22
    5738:	52 e0       	ldi	r21, 0x02	; 2
    573a:	eb e2       	ldi	r30, 0x2B	; 43
    573c:	fd e2       	ldi	r31, 0x2D	; 45
    573e:	82 e0       	ldi	r24, 0x02	; 2
    5740:	b9 01       	movw	r22, r18
    5742:	9f 01       	movw	r18, r30
    5744:	0e 94 2d 08 	call	0x105a	; 0x105a <ADC_u8StartChainConvAsynch>
		CLCD_voidGoToXY(0,0);
    5748:	80 e0       	ldi	r24, 0x00	; 0
    574a:	60 e0       	ldi	r22, 0x00	; 0
    574c:	0e 94 68 12 	call	0x24d0	; 0x24d0 <CLCD_voidGoToXY>
		CLCD_voidSendString("TEMP: ");
    5750:	82 eb       	ldi	r24, 0xB2	; 178
    5752:	90 e0       	ldi	r25, 0x00	; 0
    5754:	0e 94 3e 12 	call	0x247c	; 0x247c <CLCD_voidSendString>
		CLCD_voidDisplayNumber((u32) Analog[0]);
    5758:	80 91 10 02 	lds	r24, 0x0210
    575c:	90 91 11 02 	lds	r25, 0x0211
    5760:	cc 01       	movw	r24, r24
    5762:	a0 e0       	ldi	r26, 0x00	; 0
    5764:	b0 e0       	ldi	r27, 0x00	; 0
    5766:	bc 01       	movw	r22, r24
    5768:	cd 01       	movw	r24, r26
    576a:	0e 94 c8 12 	call	0x2590	; 0x2590 <CLCD_voidDisplayNumber>
		CLCD_voidSendString(" C");
    576e:	89 eb       	ldi	r24, 0xB9	; 185
    5770:	90 e0       	ldi	r25, 0x00	; 0
    5772:	0e 94 3e 12 	call	0x247c	; 0x247c <CLCD_voidSendString>


		if(Analog[0] > 50)
    5776:	80 91 10 02 	lds	r24, 0x0210
    577a:	90 91 11 02 	lds	r25, 0x0211
    577e:	83 33       	cpi	r24, 0x33	; 51
    5780:	91 05       	cpc	r25, r1
    5782:	70 f1       	brcs	.+92     	; 0x57e0 <main+0x1ae>
    5784:	21 c0       	rjmp	.+66     	; 0x57c8 <main+0x196>
		{
			while(!Flag)
			{
				CLCD_voidGoToXY(0,0);
    5786:	80 e0       	ldi	r24, 0x00	; 0
    5788:	60 e0       	ldi	r22, 0x00	; 0
    578a:	0e 94 68 12 	call	0x24d0	; 0x24d0 <CLCD_voidGoToXY>
				STEPPER_voidOn(STEPPER_HALF_STEP , STEPPER_CLOCK_WISE);
    578e:	80 e0       	ldi	r24, 0x00	; 0
    5790:	61 e0       	ldi	r22, 0x01	; 1
    5792:	0e 94 03 16 	call	0x2c06	; 0x2c06 <STEPPER_voidOn>
				CLCD_voidSendString("FIRE DETECTED ");
    5796:	8c eb       	ldi	r24, 0xBC	; 188
    5798:	90 e0       	ldi	r25, 0x00	; 0
    579a:	0e 94 3e 12 	call	0x247c	; 0x247c <CLCD_voidSendString>
				CLCD_voidDisplaySpecialCharacter(fire , 0 , 0 , 15);
    579e:	ce 01       	movw	r24, r28
    57a0:	01 96       	adiw	r24, 0x01	; 1
    57a2:	60 e0       	ldi	r22, 0x00	; 0
    57a4:	40 e0       	ldi	r20, 0x00	; 0
    57a6:	2f e0       	ldi	r18, 0x0F	; 15
    57a8:	0e 94 87 12 	call	0x250e	; 0x250e <CLCD_voidDisplaySpecialCharacter>
				BUZZER_voidOn(buzzer);
    57ac:	60 91 f3 01 	lds	r22, 0x01F3
    57b0:	70 91 f4 01 	lds	r23, 0x01F4
    57b4:	80 91 f5 01 	lds	r24, 0x01F5
    57b8:	0e 94 0f 09 	call	0x121e	; 0x121e <BUZZER_voidOn>
				EXTI_u8SetCallBack(INT2 ,&INIT2FUNC );
    57bc:	28 e4       	ldi	r18, 0x48	; 72
    57be:	3d e2       	ldi	r19, 0x2D	; 45
    57c0:	82 e0       	ldi	r24, 0x02	; 2
    57c2:	b9 01       	movw	r22, r18
    57c4:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <EXTI_u8SetCallBack>
		CLCD_voidSendString(" C");


		if(Analog[0] > 50)
		{
			while(!Flag)
    57c8:	80 91 15 02 	lds	r24, 0x0215
    57cc:	88 23       	and	r24, r24
    57ce:	d9 f2       	breq	.-74     	; 0x5786 <main+0x154>
				CLCD_voidSendString("FIRE DETECTED ");
				CLCD_voidDisplaySpecialCharacter(fire , 0 , 0 , 15);
				BUZZER_voidOn(buzzer);
				EXTI_u8SetCallBack(INT2 ,&INIT2FUNC );
			}
			CLCD_voidClearScreen();
    57d0:	0e 94 3d 13 	call	0x267a	; 0x267a <CLCD_voidClearScreen>
			Flag --;
    57d4:	80 91 15 02 	lds	r24, 0x0215
    57d8:	81 50       	subi	r24, 0x01	; 1
    57da:	80 93 15 02 	sts	0x0215, r24
    57de:	15 c0       	rjmp	.+42     	; 0x580a <main+0x1d8>
		}

		else if(Analog[0] > 25)
    57e0:	80 91 10 02 	lds	r24, 0x0210
    57e4:	90 91 11 02 	lds	r25, 0x0211
    57e8:	8a 31       	cpi	r24, 0x1A	; 26
    57ea:	91 05       	cpc	r25, r1
    57ec:	28 f0       	brcs	.+10     	; 0x57f8 <main+0x1c6>
		{
			STEPPER_voidOn(STEPPER_HALF_STEP , STEPPER_CLOCK_WISE);
    57ee:	80 e0       	ldi	r24, 0x00	; 0
    57f0:	61 e0       	ldi	r22, 0x01	; 1
    57f2:	0e 94 03 16 	call	0x2c06	; 0x2c06 <STEPPER_voidOn>
    57f6:	09 c0       	rjmp	.+18     	; 0x580a <main+0x1d8>
		}

		else if(Analog[0] < 23)
    57f8:	80 91 10 02 	lds	r24, 0x0210
    57fc:	90 91 11 02 	lds	r25, 0x0211
    5800:	87 31       	cpi	r24, 0x17	; 23
    5802:	91 05       	cpc	r25, r1
    5804:	10 f4       	brcc	.+4      	; 0x580a <main+0x1d8>
		{
			STEPPER_voidOff();
    5806:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <STEPPER_voidOff>
		}


		if(Analog[1] > LVL_0_LIGHT)
    580a:	80 91 12 02 	lds	r24, 0x0212
    580e:	90 91 13 02 	lds	r25, 0x0213
    5812:	f9 e0       	ldi	r31, 0x09	; 9
    5814:	87 3f       	cpi	r24, 0xF7	; 247
    5816:	9f 07       	cpc	r25, r31
    5818:	48 f1       	brcs	.+82     	; 0x586c <main+0x23a>
		{
			LED_voidOn(LED1);
    581a:	60 91 e1 01 	lds	r22, 0x01E1
    581e:	70 91 e2 01 	lds	r23, 0x01E2
    5822:	80 91 e3 01 	lds	r24, 0x01E3
    5826:	0e 94 7e 14 	call	0x28fc	; 0x28fc <LED_voidOn>
			LED_voidOn(LED2);
    582a:	60 91 e4 01 	lds	r22, 0x01E4
    582e:	70 91 e5 01 	lds	r23, 0x01E5
    5832:	80 91 e6 01 	lds	r24, 0x01E6
    5836:	0e 94 7e 14 	call	0x28fc	; 0x28fc <LED_voidOn>
			LED_voidOn(LED3);
    583a:	60 91 e7 01 	lds	r22, 0x01E7
    583e:	70 91 e8 01 	lds	r23, 0x01E8
    5842:	80 91 e9 01 	lds	r24, 0x01E9
    5846:	0e 94 7e 14 	call	0x28fc	; 0x28fc <LED_voidOn>
			LED_voidOn(LED4);
    584a:	60 91 ea 01 	lds	r22, 0x01EA
    584e:	70 91 eb 01 	lds	r23, 0x01EB
    5852:	80 91 ec 01 	lds	r24, 0x01EC
    5856:	0e 94 7e 14 	call	0x28fc	; 0x28fc <LED_voidOn>
			LED_voidOn(LED5);
    585a:	60 91 ed 01 	lds	r22, 0x01ED
    585e:	70 91 ee 01 	lds	r23, 0x01EE
    5862:	80 91 ef 01 	lds	r24, 0x01EF
    5866:	0e 94 7e 14 	call	0x28fc	; 0x28fc <LED_voidOn>
    586a:	63 cf       	rjmp	.-314    	; 0x5732 <main+0x100>
		}
		else if(Analog[1] > LVL_1_LIGHT)
    586c:	80 91 12 02 	lds	r24, 0x0212
    5870:	90 91 13 02 	lds	r25, 0x0213
    5874:	28 e0       	ldi	r18, 0x08	; 8
    5876:	88 3f       	cpi	r24, 0xF8	; 248
    5878:	92 07       	cpc	r25, r18
    587a:	48 f1       	brcs	.+82     	; 0x58ce <main+0x29c>
		{
			LED_voidOn(LED1);
    587c:	60 91 e1 01 	lds	r22, 0x01E1
    5880:	70 91 e2 01 	lds	r23, 0x01E2
    5884:	80 91 e3 01 	lds	r24, 0x01E3
    5888:	0e 94 7e 14 	call	0x28fc	; 0x28fc <LED_voidOn>
			LED_voidOn(LED2);
    588c:	60 91 e4 01 	lds	r22, 0x01E4
    5890:	70 91 e5 01 	lds	r23, 0x01E5
    5894:	80 91 e6 01 	lds	r24, 0x01E6
    5898:	0e 94 7e 14 	call	0x28fc	; 0x28fc <LED_voidOn>
			LED_voidOn(LED3);
    589c:	60 91 e7 01 	lds	r22, 0x01E7
    58a0:	70 91 e8 01 	lds	r23, 0x01E8
    58a4:	80 91 e9 01 	lds	r24, 0x01E9
    58a8:	0e 94 7e 14 	call	0x28fc	; 0x28fc <LED_voidOn>
			LED_voidOn(LED4);
    58ac:	60 91 ea 01 	lds	r22, 0x01EA
    58b0:	70 91 eb 01 	lds	r23, 0x01EB
    58b4:	80 91 ec 01 	lds	r24, 0x01EC
    58b8:	0e 94 7e 14 	call	0x28fc	; 0x28fc <LED_voidOn>
			LED_voidOff(LED5);
    58bc:	60 91 ed 01 	lds	r22, 0x01ED
    58c0:	70 91 ee 01 	lds	r23, 0x01EE
    58c4:	80 91 ef 01 	lds	r24, 0x01EF
    58c8:	0e 94 a0 14 	call	0x2940	; 0x2940 <LED_voidOff>
    58cc:	32 cf       	rjmp	.-412    	; 0x5732 <main+0x100>
		}
		else if(Analog[1] > LVL_2_LIGHT)
    58ce:	80 91 12 02 	lds	r24, 0x0212
    58d2:	90 91 13 02 	lds	r25, 0x0213
    58d6:	e5 e0       	ldi	r30, 0x05	; 5
    58d8:	8b 3f       	cpi	r24, 0xFB	; 251
    58da:	9e 07       	cpc	r25, r30
    58dc:	48 f1       	brcs	.+82     	; 0x5930 <main+0x2fe>
		{
			LED_voidOn(LED1);
    58de:	60 91 e1 01 	lds	r22, 0x01E1
    58e2:	70 91 e2 01 	lds	r23, 0x01E2
    58e6:	80 91 e3 01 	lds	r24, 0x01E3
    58ea:	0e 94 7e 14 	call	0x28fc	; 0x28fc <LED_voidOn>
			LED_voidOn(LED2);
    58ee:	60 91 e4 01 	lds	r22, 0x01E4
    58f2:	70 91 e5 01 	lds	r23, 0x01E5
    58f6:	80 91 e6 01 	lds	r24, 0x01E6
    58fa:	0e 94 7e 14 	call	0x28fc	; 0x28fc <LED_voidOn>
			LED_voidOn(LED3);
    58fe:	60 91 e7 01 	lds	r22, 0x01E7
    5902:	70 91 e8 01 	lds	r23, 0x01E8
    5906:	80 91 e9 01 	lds	r24, 0x01E9
    590a:	0e 94 7e 14 	call	0x28fc	; 0x28fc <LED_voidOn>
			LED_voidOff(LED4);
    590e:	60 91 ea 01 	lds	r22, 0x01EA
    5912:	70 91 eb 01 	lds	r23, 0x01EB
    5916:	80 91 ec 01 	lds	r24, 0x01EC
    591a:	0e 94 a0 14 	call	0x2940	; 0x2940 <LED_voidOff>
			LED_voidOff(LED5);
    591e:	60 91 ed 01 	lds	r22, 0x01ED
    5922:	70 91 ee 01 	lds	r23, 0x01EE
    5926:	80 91 ef 01 	lds	r24, 0x01EF
    592a:	0e 94 a0 14 	call	0x2940	; 0x2940 <LED_voidOff>
    592e:	01 cf       	rjmp	.-510    	; 0x5732 <main+0x100>
		}
		else if(Analog[1] > LVL_3_LIGHT)
    5930:	80 91 12 02 	lds	r24, 0x0212
    5934:	90 91 13 02 	lds	r25, 0x0213
    5938:	f3 e0       	ldi	r31, 0x03	; 3
    593a:	8d 3f       	cpi	r24, 0xFD	; 253
    593c:	9f 07       	cpc	r25, r31
    593e:	48 f1       	brcs	.+82     	; 0x5992 <main+0x360>
		{
			LED_voidOn(LED1);
    5940:	60 91 e1 01 	lds	r22, 0x01E1
    5944:	70 91 e2 01 	lds	r23, 0x01E2
    5948:	80 91 e3 01 	lds	r24, 0x01E3
    594c:	0e 94 7e 14 	call	0x28fc	; 0x28fc <LED_voidOn>
			LED_voidOn(LED2);
    5950:	60 91 e4 01 	lds	r22, 0x01E4
    5954:	70 91 e5 01 	lds	r23, 0x01E5
    5958:	80 91 e6 01 	lds	r24, 0x01E6
    595c:	0e 94 7e 14 	call	0x28fc	; 0x28fc <LED_voidOn>
			LED_voidOff(LED3);
    5960:	60 91 e7 01 	lds	r22, 0x01E7
    5964:	70 91 e8 01 	lds	r23, 0x01E8
    5968:	80 91 e9 01 	lds	r24, 0x01E9
    596c:	0e 94 a0 14 	call	0x2940	; 0x2940 <LED_voidOff>
			LED_voidOff(LED4);
    5970:	60 91 ea 01 	lds	r22, 0x01EA
    5974:	70 91 eb 01 	lds	r23, 0x01EB
    5978:	80 91 ec 01 	lds	r24, 0x01EC
    597c:	0e 94 a0 14 	call	0x2940	; 0x2940 <LED_voidOff>
			LED_voidOff(LED5);
    5980:	60 91 ed 01 	lds	r22, 0x01ED
    5984:	70 91 ee 01 	lds	r23, 0x01EE
    5988:	80 91 ef 01 	lds	r24, 0x01EF
    598c:	0e 94 a0 14 	call	0x2940	; 0x2940 <LED_voidOff>
    5990:	d0 ce       	rjmp	.-608    	; 0x5732 <main+0x100>
		}
		else if(Analog[1] > LVL_4_LIGHT)
    5992:	80 91 12 02 	lds	r24, 0x0212
    5996:	90 91 13 02 	lds	r25, 0x0213
    599a:	21 e0       	ldi	r18, 0x01	; 1
    599c:	8f 3f       	cpi	r24, 0xFF	; 255
    599e:	92 07       	cpc	r25, r18
    59a0:	48 f1       	brcs	.+82     	; 0x59f4 <main+0x3c2>
		{
			LED_voidOn(LED1);
    59a2:	60 91 e1 01 	lds	r22, 0x01E1
    59a6:	70 91 e2 01 	lds	r23, 0x01E2
    59aa:	80 91 e3 01 	lds	r24, 0x01E3
    59ae:	0e 94 7e 14 	call	0x28fc	; 0x28fc <LED_voidOn>
			LED_voidOff(LED2);
    59b2:	60 91 e4 01 	lds	r22, 0x01E4
    59b6:	70 91 e5 01 	lds	r23, 0x01E5
    59ba:	80 91 e6 01 	lds	r24, 0x01E6
    59be:	0e 94 a0 14 	call	0x2940	; 0x2940 <LED_voidOff>
			LED_voidOff(LED3);
    59c2:	60 91 e7 01 	lds	r22, 0x01E7
    59c6:	70 91 e8 01 	lds	r23, 0x01E8
    59ca:	80 91 e9 01 	lds	r24, 0x01E9
    59ce:	0e 94 a0 14 	call	0x2940	; 0x2940 <LED_voidOff>
			LED_voidOff(LED4);
    59d2:	60 91 ea 01 	lds	r22, 0x01EA
    59d6:	70 91 eb 01 	lds	r23, 0x01EB
    59da:	80 91 ec 01 	lds	r24, 0x01EC
    59de:	0e 94 a0 14 	call	0x2940	; 0x2940 <LED_voidOff>
			LED_voidOff(LED5);
    59e2:	60 91 ed 01 	lds	r22, 0x01ED
    59e6:	70 91 ee 01 	lds	r23, 0x01EE
    59ea:	80 91 ef 01 	lds	r24, 0x01EF
    59ee:	0e 94 a0 14 	call	0x2940	; 0x2940 <LED_voidOff>
    59f2:	9f ce       	rjmp	.-706    	; 0x5732 <main+0x100>
		}
		else if(Analog[1] > LVL_5_LIGHT)
    59f4:	80 91 12 02 	lds	r24, 0x0212
    59f8:	90 91 13 02 	lds	r25, 0x0213
    59fc:	8e 3f       	cpi	r24, 0xFE	; 254
    59fe:	91 05       	cpc	r25, r1
    5a00:	08 f4       	brcc	.+2      	; 0x5a04 <main+0x3d2>
    5a02:	97 ce       	rjmp	.-722    	; 0x5732 <main+0x100>
		{
			LED_voidOff(LED1);
    5a04:	60 91 e1 01 	lds	r22, 0x01E1
    5a08:	70 91 e2 01 	lds	r23, 0x01E2
    5a0c:	80 91 e3 01 	lds	r24, 0x01E3
    5a10:	0e 94 a0 14 	call	0x2940	; 0x2940 <LED_voidOff>
			LED_voidOff(LED2);
    5a14:	60 91 e4 01 	lds	r22, 0x01E4
    5a18:	70 91 e5 01 	lds	r23, 0x01E5
    5a1c:	80 91 e6 01 	lds	r24, 0x01E6
    5a20:	0e 94 a0 14 	call	0x2940	; 0x2940 <LED_voidOff>
			LED_voidOff(LED3);
    5a24:	60 91 e7 01 	lds	r22, 0x01E7
    5a28:	70 91 e8 01 	lds	r23, 0x01E8
    5a2c:	80 91 e9 01 	lds	r24, 0x01E9
    5a30:	0e 94 a0 14 	call	0x2940	; 0x2940 <LED_voidOff>
			LED_voidOff(LED4);
    5a34:	60 91 ea 01 	lds	r22, 0x01EA
    5a38:	70 91 eb 01 	lds	r23, 0x01EB
    5a3c:	80 91 ec 01 	lds	r24, 0x01EC
    5a40:	0e 94 a0 14 	call	0x2940	; 0x2940 <LED_voidOff>
			LED_voidOff(LED5);
    5a44:	60 91 ed 01 	lds	r22, 0x01ED
    5a48:	70 91 ee 01 	lds	r23, 0x01EE
    5a4c:	80 91 ef 01 	lds	r24, 0x01EF
    5a50:	0e 94 a0 14 	call	0x2940	; 0x2940 <LED_voidOff>
    5a54:	6e ce       	rjmp	.-804    	; 0x5732 <main+0x100>

00005a56 <GetNotification>:
	}

}

void GetNotification(void)
{
    5a56:	df 93       	push	r29
    5a58:	cf 93       	push	r28
    5a5a:	cd b7       	in	r28, 0x3d	; 61
    5a5c:	de b7       	in	r29, 0x3e	; 62
	LM35_getTemperature(&temp , result[0] , &Analog[0]);
    5a5e:	40 91 16 02 	lds	r20, 0x0216
    5a62:	50 91 17 02 	lds	r21, 0x0217
    5a66:	86 ef       	ldi	r24, 0xF6	; 246
    5a68:	91 e0       	ldi	r25, 0x01	; 1
    5a6a:	20 e1       	ldi	r18, 0x10	; 16
    5a6c:	32 e0       	ldi	r19, 0x02	; 2
    5a6e:	ba 01       	movw	r22, r20
    5a70:	a9 01       	movw	r20, r18
    5a72:	0e 94 c2 14 	call	0x2984	; 0x2984 <LM35_getTemperature>
	Analog[1] = LDR_u16GetResistanceFrom8BitADC(result[1]);
    5a76:	80 91 18 02 	lds	r24, 0x0218
    5a7a:	90 91 19 02 	lds	r25, 0x0219
    5a7e:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LDR_u16GetResistanceFrom8BitADC>
    5a82:	90 93 13 02 	sts	0x0213, r25
    5a86:	80 93 12 02 	sts	0x0212, r24
}
    5a8a:	cf 91       	pop	r28
    5a8c:	df 91       	pop	r29
    5a8e:	08 95       	ret

00005a90 <INIT2FUNC>:

void INIT2FUNC(void)
{
    5a90:	df 93       	push	r29
    5a92:	cf 93       	push	r28
    5a94:	cd b7       	in	r28, 0x3d	; 61
    5a96:	de b7       	in	r29, 0x3e	; 62
	BUZZER_voidOff(buzzer);
    5a98:	60 91 f3 01 	lds	r22, 0x01F3
    5a9c:	70 91 f4 01 	lds	r23, 0x01F4
    5aa0:	80 91 f5 01 	lds	r24, 0x01F5
    5aa4:	0e 94 2e 09 	call	0x125c	; 0x125c <BUZZER_voidOff>
	Flag ++;
    5aa8:	80 91 15 02 	lds	r24, 0x0215
    5aac:	8f 5f       	subi	r24, 0xFF	; 255
    5aae:	80 93 15 02 	sts	0x0215, r24
}
    5ab2:	cf 91       	pop	r28
    5ab4:	df 91       	pop	r29
    5ab6:	08 95       	ret

00005ab8 <Map>:
#include "STD_TYPES.h"

s32 Map(s32 InputRangeMin, s32 InputRangeMax , s32 OutputRangeMin , s32 OutputRangeMax , s32 InputValue)
{
    5ab8:	af 92       	push	r10
    5aba:	bf 92       	push	r11
    5abc:	cf 92       	push	r12
    5abe:	df 92       	push	r13
    5ac0:	ef 92       	push	r14
    5ac2:	ff 92       	push	r15
    5ac4:	0f 93       	push	r16
    5ac6:	1f 93       	push	r17
    5ac8:	df 93       	push	r29
    5aca:	cf 93       	push	r28
    5acc:	cd b7       	in	r28, 0x3d	; 61
    5ace:	de b7       	in	r29, 0x3e	; 62
    5ad0:	60 97       	sbiw	r28, 0x10	; 16
    5ad2:	0f b6       	in	r0, 0x3f	; 63
    5ad4:	f8 94       	cli
    5ad6:	de bf       	out	0x3e, r29	; 62
    5ad8:	0f be       	out	0x3f, r0	; 63
    5ada:	cd bf       	out	0x3d, r28	; 61
    5adc:	69 83       	std	Y+1, r22	; 0x01
    5ade:	7a 83       	std	Y+2, r23	; 0x02
    5ae0:	8b 83       	std	Y+3, r24	; 0x03
    5ae2:	9c 83       	std	Y+4, r25	; 0x04
    5ae4:	2d 83       	std	Y+5, r18	; 0x05
    5ae6:	3e 83       	std	Y+6, r19	; 0x06
    5ae8:	4f 83       	std	Y+7, r20	; 0x07
    5aea:	58 87       	std	Y+8, r21	; 0x08
    5aec:	e9 86       	std	Y+9, r14	; 0x09
    5aee:	fa 86       	std	Y+10, r15	; 0x0a
    5af0:	0b 87       	std	Y+11, r16	; 0x0b
    5af2:	1c 87       	std	Y+12, r17	; 0x0c
    5af4:	ad 86       	std	Y+13, r10	; 0x0d
    5af6:	be 86       	std	Y+14, r11	; 0x0e
    5af8:	cf 86       	std	Y+15, r12	; 0x0f
    5afa:	d8 8a       	std	Y+16, r13	; 0x10
	InputValue *= (InputRangeMax - InputRangeMin);
    5afc:	2d 81       	ldd	r18, Y+5	; 0x05
    5afe:	3e 81       	ldd	r19, Y+6	; 0x06
    5b00:	4f 81       	ldd	r20, Y+7	; 0x07
    5b02:	58 85       	ldd	r21, Y+8	; 0x08
    5b04:	89 81       	ldd	r24, Y+1	; 0x01
    5b06:	9a 81       	ldd	r25, Y+2	; 0x02
    5b08:	ab 81       	ldd	r26, Y+3	; 0x03
    5b0a:	bc 81       	ldd	r27, Y+4	; 0x04
    5b0c:	28 1b       	sub	r18, r24
    5b0e:	39 0b       	sbc	r19, r25
    5b10:	4a 0b       	sbc	r20, r26
    5b12:	5b 0b       	sbc	r21, r27
    5b14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5b16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5b18:	af 8d       	ldd	r26, Y+31	; 0x1f
    5b1a:	b8 a1       	ldd	r27, Y+32	; 0x20
    5b1c:	bc 01       	movw	r22, r24
    5b1e:	cd 01       	movw	r24, r26
    5b20:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <__mulsi3>
    5b24:	dc 01       	movw	r26, r24
    5b26:	cb 01       	movw	r24, r22
    5b28:	8d 8f       	std	Y+29, r24	; 0x1d
    5b2a:	9e 8f       	std	Y+30, r25	; 0x1e
    5b2c:	af 8f       	std	Y+31, r26	; 0x1f
    5b2e:	b8 a3       	std	Y+32, r27	; 0x20
	InputValue /= (OutputRangeMax - OutputRangeMin);
    5b30:	2d 85       	ldd	r18, Y+13	; 0x0d
    5b32:	3e 85       	ldd	r19, Y+14	; 0x0e
    5b34:	4f 85       	ldd	r20, Y+15	; 0x0f
    5b36:	58 89       	ldd	r21, Y+16	; 0x10
    5b38:	89 85       	ldd	r24, Y+9	; 0x09
    5b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b3c:	ab 85       	ldd	r26, Y+11	; 0x0b
    5b3e:	bc 85       	ldd	r27, Y+12	; 0x0c
    5b40:	28 1b       	sub	r18, r24
    5b42:	39 0b       	sbc	r19, r25
    5b44:	4a 0b       	sbc	r20, r26
    5b46:	5b 0b       	sbc	r21, r27
    5b48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5b4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5b4c:	af 8d       	ldd	r26, Y+31	; 0x1f
    5b4e:	b8 a1       	ldd	r27, Y+32	; 0x20
    5b50:	bc 01       	movw	r22, r24
    5b52:	cd 01       	movw	r24, r26
    5b54:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <__divmodsi4>
    5b58:	da 01       	movw	r26, r20
    5b5a:	c9 01       	movw	r24, r18
    5b5c:	8d 8f       	std	Y+29, r24	; 0x1d
    5b5e:	9e 8f       	std	Y+30, r25	; 0x1e
    5b60:	af 8f       	std	Y+31, r26	; 0x1f
    5b62:	b8 a3       	std	Y+32, r27	; 0x20
	return InputValue;
    5b64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5b66:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5b68:	af 8d       	ldd	r26, Y+31	; 0x1f
    5b6a:	b8 a1       	ldd	r27, Y+32	; 0x20
}
    5b6c:	bc 01       	movw	r22, r24
    5b6e:	cd 01       	movw	r24, r26
    5b70:	60 96       	adiw	r28, 0x10	; 16
    5b72:	0f b6       	in	r0, 0x3f	; 63
    5b74:	f8 94       	cli
    5b76:	de bf       	out	0x3e, r29	; 62
    5b78:	0f be       	out	0x3f, r0	; 63
    5b7a:	cd bf       	out	0x3d, r28	; 61
    5b7c:	cf 91       	pop	r28
    5b7e:	df 91       	pop	r29
    5b80:	1f 91       	pop	r17
    5b82:	0f 91       	pop	r16
    5b84:	ff 90       	pop	r15
    5b86:	ef 90       	pop	r14
    5b88:	df 90       	pop	r13
    5b8a:	cf 90       	pop	r12
    5b8c:	bf 90       	pop	r11
    5b8e:	af 90       	pop	r10
    5b90:	08 95       	ret

00005b92 <__mulsi3>:
    5b92:	62 9f       	mul	r22, r18
    5b94:	d0 01       	movw	r26, r0
    5b96:	73 9f       	mul	r23, r19
    5b98:	f0 01       	movw	r30, r0
    5b9a:	82 9f       	mul	r24, r18
    5b9c:	e0 0d       	add	r30, r0
    5b9e:	f1 1d       	adc	r31, r1
    5ba0:	64 9f       	mul	r22, r20
    5ba2:	e0 0d       	add	r30, r0
    5ba4:	f1 1d       	adc	r31, r1
    5ba6:	92 9f       	mul	r25, r18
    5ba8:	f0 0d       	add	r31, r0
    5baa:	83 9f       	mul	r24, r19
    5bac:	f0 0d       	add	r31, r0
    5bae:	74 9f       	mul	r23, r20
    5bb0:	f0 0d       	add	r31, r0
    5bb2:	65 9f       	mul	r22, r21
    5bb4:	f0 0d       	add	r31, r0
    5bb6:	99 27       	eor	r25, r25
    5bb8:	72 9f       	mul	r23, r18
    5bba:	b0 0d       	add	r27, r0
    5bbc:	e1 1d       	adc	r30, r1
    5bbe:	f9 1f       	adc	r31, r25
    5bc0:	63 9f       	mul	r22, r19
    5bc2:	b0 0d       	add	r27, r0
    5bc4:	e1 1d       	adc	r30, r1
    5bc6:	f9 1f       	adc	r31, r25
    5bc8:	bd 01       	movw	r22, r26
    5bca:	cf 01       	movw	r24, r30
    5bcc:	11 24       	eor	r1, r1
    5bce:	08 95       	ret

00005bd0 <__udivmodsi4>:
    5bd0:	a1 e2       	ldi	r26, 0x21	; 33
    5bd2:	1a 2e       	mov	r1, r26
    5bd4:	aa 1b       	sub	r26, r26
    5bd6:	bb 1b       	sub	r27, r27
    5bd8:	fd 01       	movw	r30, r26
    5bda:	0d c0       	rjmp	.+26     	; 0x5bf6 <__udivmodsi4_ep>

00005bdc <__udivmodsi4_loop>:
    5bdc:	aa 1f       	adc	r26, r26
    5bde:	bb 1f       	adc	r27, r27
    5be0:	ee 1f       	adc	r30, r30
    5be2:	ff 1f       	adc	r31, r31
    5be4:	a2 17       	cp	r26, r18
    5be6:	b3 07       	cpc	r27, r19
    5be8:	e4 07       	cpc	r30, r20
    5bea:	f5 07       	cpc	r31, r21
    5bec:	20 f0       	brcs	.+8      	; 0x5bf6 <__udivmodsi4_ep>
    5bee:	a2 1b       	sub	r26, r18
    5bf0:	b3 0b       	sbc	r27, r19
    5bf2:	e4 0b       	sbc	r30, r20
    5bf4:	f5 0b       	sbc	r31, r21

00005bf6 <__udivmodsi4_ep>:
    5bf6:	66 1f       	adc	r22, r22
    5bf8:	77 1f       	adc	r23, r23
    5bfa:	88 1f       	adc	r24, r24
    5bfc:	99 1f       	adc	r25, r25
    5bfe:	1a 94       	dec	r1
    5c00:	69 f7       	brne	.-38     	; 0x5bdc <__udivmodsi4_loop>
    5c02:	60 95       	com	r22
    5c04:	70 95       	com	r23
    5c06:	80 95       	com	r24
    5c08:	90 95       	com	r25
    5c0a:	9b 01       	movw	r18, r22
    5c0c:	ac 01       	movw	r20, r24
    5c0e:	bd 01       	movw	r22, r26
    5c10:	cf 01       	movw	r24, r30
    5c12:	08 95       	ret

00005c14 <__divmodsi4>:
    5c14:	97 fb       	bst	r25, 7
    5c16:	09 2e       	mov	r0, r25
    5c18:	05 26       	eor	r0, r21
    5c1a:	0e d0       	rcall	.+28     	; 0x5c38 <__divmodsi4_neg1>
    5c1c:	57 fd       	sbrc	r21, 7
    5c1e:	04 d0       	rcall	.+8      	; 0x5c28 <__divmodsi4_neg2>
    5c20:	d7 df       	rcall	.-82     	; 0x5bd0 <__udivmodsi4>
    5c22:	0a d0       	rcall	.+20     	; 0x5c38 <__divmodsi4_neg1>
    5c24:	00 1c       	adc	r0, r0
    5c26:	38 f4       	brcc	.+14     	; 0x5c36 <__divmodsi4_exit>

00005c28 <__divmodsi4_neg2>:
    5c28:	50 95       	com	r21
    5c2a:	40 95       	com	r20
    5c2c:	30 95       	com	r19
    5c2e:	21 95       	neg	r18
    5c30:	3f 4f       	sbci	r19, 0xFF	; 255
    5c32:	4f 4f       	sbci	r20, 0xFF	; 255
    5c34:	5f 4f       	sbci	r21, 0xFF	; 255

00005c36 <__divmodsi4_exit>:
    5c36:	08 95       	ret

00005c38 <__divmodsi4_neg1>:
    5c38:	f6 f7       	brtc	.-4      	; 0x5c36 <__divmodsi4_exit>
    5c3a:	90 95       	com	r25
    5c3c:	80 95       	com	r24
    5c3e:	70 95       	com	r23
    5c40:	61 95       	neg	r22
    5c42:	7f 4f       	sbci	r23, 0xFF	; 255
    5c44:	8f 4f       	sbci	r24, 0xFF	; 255
    5c46:	9f 4f       	sbci	r25, 0xFF	; 255
    5c48:	08 95       	ret

00005c4a <__prologue_saves__>:
    5c4a:	2f 92       	push	r2
    5c4c:	3f 92       	push	r3
    5c4e:	4f 92       	push	r4
    5c50:	5f 92       	push	r5
    5c52:	6f 92       	push	r6
    5c54:	7f 92       	push	r7
    5c56:	8f 92       	push	r8
    5c58:	9f 92       	push	r9
    5c5a:	af 92       	push	r10
    5c5c:	bf 92       	push	r11
    5c5e:	cf 92       	push	r12
    5c60:	df 92       	push	r13
    5c62:	ef 92       	push	r14
    5c64:	ff 92       	push	r15
    5c66:	0f 93       	push	r16
    5c68:	1f 93       	push	r17
    5c6a:	cf 93       	push	r28
    5c6c:	df 93       	push	r29
    5c6e:	cd b7       	in	r28, 0x3d	; 61
    5c70:	de b7       	in	r29, 0x3e	; 62
    5c72:	ca 1b       	sub	r28, r26
    5c74:	db 0b       	sbc	r29, r27
    5c76:	0f b6       	in	r0, 0x3f	; 63
    5c78:	f8 94       	cli
    5c7a:	de bf       	out	0x3e, r29	; 62
    5c7c:	0f be       	out	0x3f, r0	; 63
    5c7e:	cd bf       	out	0x3d, r28	; 61
    5c80:	09 94       	ijmp

00005c82 <__epilogue_restores__>:
    5c82:	2a 88       	ldd	r2, Y+18	; 0x12
    5c84:	39 88       	ldd	r3, Y+17	; 0x11
    5c86:	48 88       	ldd	r4, Y+16	; 0x10
    5c88:	5f 84       	ldd	r5, Y+15	; 0x0f
    5c8a:	6e 84       	ldd	r6, Y+14	; 0x0e
    5c8c:	7d 84       	ldd	r7, Y+13	; 0x0d
    5c8e:	8c 84       	ldd	r8, Y+12	; 0x0c
    5c90:	9b 84       	ldd	r9, Y+11	; 0x0b
    5c92:	aa 84       	ldd	r10, Y+10	; 0x0a
    5c94:	b9 84       	ldd	r11, Y+9	; 0x09
    5c96:	c8 84       	ldd	r12, Y+8	; 0x08
    5c98:	df 80       	ldd	r13, Y+7	; 0x07
    5c9a:	ee 80       	ldd	r14, Y+6	; 0x06
    5c9c:	fd 80       	ldd	r15, Y+5	; 0x05
    5c9e:	0c 81       	ldd	r16, Y+4	; 0x04
    5ca0:	1b 81       	ldd	r17, Y+3	; 0x03
    5ca2:	aa 81       	ldd	r26, Y+2	; 0x02
    5ca4:	b9 81       	ldd	r27, Y+1	; 0x01
    5ca6:	ce 0f       	add	r28, r30
    5ca8:	d1 1d       	adc	r29, r1
    5caa:	0f b6       	in	r0, 0x3f	; 63
    5cac:	f8 94       	cli
    5cae:	de bf       	out	0x3e, r29	; 62
    5cb0:	0f be       	out	0x3f, r0	; 63
    5cb2:	cd bf       	out	0x3d, r28	; 61
    5cb4:	ed 01       	movw	r28, r26
    5cb6:	08 95       	ret

00005cb8 <strcmp>:
    5cb8:	fb 01       	movw	r30, r22
    5cba:	dc 01       	movw	r26, r24
    5cbc:	8d 91       	ld	r24, X+
    5cbe:	01 90       	ld	r0, Z+
    5cc0:	80 19       	sub	r24, r0
    5cc2:	01 10       	cpse	r0, r1
    5cc4:	d9 f3       	breq	.-10     	; 0x5cbc <strcmp+0x4>
    5cc6:	99 0b       	sbc	r25, r25
    5cc8:	08 95       	ret

00005cca <_exit>:
    5cca:	f8 94       	cli

00005ccc <__stop_program>:
    5ccc:	ff cf       	rjmp	.-2      	; 0x5ccc <__stop_program>
